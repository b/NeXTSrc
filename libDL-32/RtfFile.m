/*
 * Build the RtfFile window
 */

#import <appkit/appkit.h>

#import "RtfFile.h"
#import "SplitView.h"
#import "NroffText.h"
#import "Find.h"
#import "aux.h"

@implementation RtfFile 

/* internal methods */
#define PAD 8.0
#define PAD2 16.0
#define DX 520.0
#define DY 300.0

- _build
/* Generated by the NeXT Interface Builder */
{
	id	cView;
	NXRect	theFrame;

	NXSetRect(&theFrame, 525.0, 500.0, DX, DY);
	window = [Window newContent:&theFrame
			style:NX_TITLEDSTYLE
			backing:NX_BUFFERED
			buttonMask:NX_CLOSEBUTTONMASK|NX_RESIZEBUTTONMASK
			defer:NO];
	[window setFreeWhenClosed:NO];

	theFrame.origin.x = theFrame.origin.y = 0.0;
	cView = [View newFrame:&theFrame];

	NXSetRect(&theFrame, PAD, 0.0, DX-PAD2, DY-PAD);
	splitView = [SplitView newFrame:&theFrame];
	[cView addSubview:splitView];

	theFrame.size.height = DY-PAD;
	theFrame.origin.y = 0.;
	fileText = [NroffText newFrame:&theFrame];
	[fileText setEditable:NO];
	[cView addSubview:fileText];

	/* setup splitview stuff */
	[splitView addView:fileText divider:YES];
	[splitView setMinHeight:fileText:100.0];
	fixScrolls(fileText, splitView);

	/* setup content view */
	[window setContentView:cView];
	[cView setAutoresizeSubviews:YES];
	return window;
}

/* delegate methods */
- windowWillResize:sender toSize:(NXSize *)frameSize
{
	if (frameSize->width < 300.)
		frameSize->width = 300.;
	if (frameSize->height < 250.)
		frameSize->height = 250.;
	return self;
}

/* overridden */
- free {
	[window free];
	[splitView free];
	[fileText free];
	return [super free];
}

/* class methods */
- print:sender
{
	id p = [NXApp printInfo];
	[p setHorizCentered:NO];
	[p setVertCentered:NO];

	[fileText printPSCode:self];
	return self;
}

- search:(id)sender {
	return [findPanel() search:sender in:fileText];
}

- setFile:(char *)s {
	char t[1024];
#if 0
	id sv;
#endif

	NXStream *f=NXMapFile(s, NX_READONLY);
	if (!f) return self;

	Wait();
	[window disableFlushWindow];
	[window disableDisplay];
	[fileText setText:NULL];
#if 0
	sv = [fileText superview];
	[fileText removeFromSuperview];
	[fileText setAutodisplay:NO];
#endif
	[fileText readRichText:f];
	NXCloseMemory(f, NX_FREEBUFFER);

#if 0
	[fileText setAutodisplay:YES];
	[sv addSubview:fileText];
#endif
	[window reenableDisplay];
	[fileText setSel:0:0];
	[splitView refreshText:fileText];
	[window reenableFlushWindow];
	[window flushWindow];
	DoneWaiting();

	return self;
}

/* instance variables */
- contentsText {return fileText;}

+ new
{
	self = [super new];
	[self _build];
	[window display];
	[window setTitle:"Help"];
	[window setDelegate:self];
	return self;
}

+ showFile:(char *)path {
	static RtfFile *currObj = nil;

	if (!currObj) {
		currObj = [RtfFile new];
	}
	self = currObj;

	[self setFile:path];
	[window center];
	[window makeKeyAndOrderFront:self];
	return self;
}

@end
