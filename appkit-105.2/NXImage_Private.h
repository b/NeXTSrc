#import "NXImage.h"
#import "Window.h"

/*
 * Asynch stuff. Define DISABLEASYNCHIMAGING to remove all references
 * to asynchronous drawing in the code.
 */

#define DISABLEASYNCHIMAGING

#ifndef DISABLEASYNCHIMAGING
#define ASYNCHNOTDONE 0
#define ASYNCHDRAWOK 1
#define ASYNCHDRAWERROR 2
#endif

typedef unsigned short CacheCoord;

typedef Window *CacheWindow;

typedef struct _CacheWindowInfo {
    CacheWindow window;
    CacheCoord width;
    CacheCoord height;
    struct _FreeSpaceList *sharedList;	/* If null, then unique */
} CacheWindowInfo;

typedef struct _CacheRect {
    CacheCoord x, y, w, h;
} CacheRect;

/*
 * Image representations are kept in a linked list of RepresentationInfo.
 * Each representation has a cache window, a cacheRect (the rectangle in
 * the cache window), an instance of NXImageRep, and file name information
 * if lazy.  The from field determines if the representation is lazy or not:
 *	from == NOTLAZY: The rep is not lazy. fileName & appName are NULL
 *	from == LAZYFROMFILE: Rep is lazy, load from file
 *	from == LAZYFROMSECTION: Rep is lazy, load from specified section
 *		(fileName is either a section name or file in launch dir)
 *	from == LAZYFROMICON: Rep is lazy, load from section named fileName
 *		in the __ICON segment.
 *	from == LAZYDUMMY: Rep is lazy but was generated by expanding another
 *		lazy rep in this image. This rep should not be archived.
 *
 * A representation is cached if rendered is YES.  If cache is not NULL, then
 * the cached image is stored in the window pointed to by cache.  If cache is
 * NULL, then the representation is cached in the representation itself;
 * in this case the representation better be NXCachedImageRep or a subclass.
 */

/* Values for RepresentationInfo from field */
#define NOTLAZY 0
#define LAZYFROMFILE 1
#define LAZYFROMSECTION 2
#define LAZYFROMICON 3
#define LAZYDUMMY 4

/* Macros to deal with representations */
#define REPLAZY(rep)		(rep->flags.from != NOTLAZY)
#define REPDUMMY(rep)		(rep->flags.from == LAZYDUMMY)
#define MAKEREPDUMMY(rep)	rep->flags.from = LAZYDUMMY;

#define GSTATE(rep) ([(rep)->cache->window gState])
#define WINDOW(rep) ((rep)->cache->window)
#define UNIQUE(rep) ((rep)->cache->sharedList == NULL)
#define CACHED(rep) \
	(rep->cache || [rep->image isKindOf:[NXCachedImageRep class]])

#define CACHEX(rep) ((rep)->cacheRect.x)
#define CACHEY(rep) ((rep)->cacheRect.y)
#define CACHEW(rep) ((rep)->cacheRect.w)
#define CACHEH(rep) ((rep)->cacheRect.h)

#define FILENAME(rep) (rep->image ? [rep->image _fileName] : rep->fileName)
#define APPNAME(rep)  (rep->image ? [rep->image _appName]  : rep->appName)

typedef struct _RepresentationInfo {
    struct _RepresentationInfo *next;
    CacheWindowInfo *cache;
    CacheRect cacheRect;
    id image;
    struct _RepresentationInfoFlags {
	unsigned int rendered:1;
	unsigned int drawError:1;
	unsigned int checked:1;
	unsigned int from:4;
	unsigned int :25;
    } flags;
#ifndef DISABLEASYNCHIMAGING
    int tag;
#endif
    char *fileName;
    char *appName;
} RepresentationInfo;

extern BOOL _NXAllocateImageCache (NXZone *zone,
			BOOL unique, float width, float height,
			int bps, int numColors, BOOL alpha, BOOL forceDepth,
			CacheWindowInfo **windowInfo, CacheRect *rect);
extern BOOL _NXResizeImageCache (BOOL unique, float width, float height,
			int bps, int numColors, BOOL alpha, BOOL forceDepth,
			CacheWindowInfo **windowInfo, CacheRect *rect);
extern void _NXFreeImageCache (CacheWindowInfo *windowInfo, CacheRect *rect);

/*
 * Zone where we allocate all shared NXImage specific data.
 */
#define SHAREDIMAGEZONE [NXApp zone]


@interface NXImage(Private)

+ _imageNamed:(const char *)aString;
+ _findSystemImageNamed:(const char *)aString;
+ _findExistingBitmapNamed:(const char *)aString;
+ _searchForImageNamed:(const char *)aString;
+ _createImageFromBitmap:bm name:(const char *)aString builtIn:(BOOL)flag;

- _freeRepresentation:(RepresentationInfo *)rep;
- _freeCache:(RepresentationInfo *)rep;
- _resizeAllCaches;
- _forgetData:(RepresentationInfo *)rep;
- _getCacheGState:(int *)gState andRect:(NXRect *)rect forRep:(RepresentationInfo *)rep;

- (NXImage *)_errorHandler;
- _handleError:(const NXRect *)rect :(const NXPoint *)point;

- (BOOL)_focusOnCache:(RepresentationInfo *)rep;
- (BOOL)_cacheRepresentation:(RepresentationInfo *)rep;
- (BOOL)_cacheRepresentation:(RepresentationInfo *)rep stayFocused:(BOOL)flag;
- (BOOL)_drawRepresentation:(RepresentationInfo *)rep;
- (BOOL)_printRepresentation:(RepresentationInfo *)rep op:(int)op;
- (BOOL)_getGlobalWindowNumber:(unsigned int *)winNumber
	andRect:(NXRect *)rect 
	forRepresentation:(NXImageRep *)imageRepresentation;
- _drawDone:(RepresentationInfo *)rep success:(BOOL)success;

- (BOOL)_useCacheGState:(Window *)window rect:(const NXRect *)rect;
- (BOOL)_useIconNamed:(const char *)iconName from:(const char *)appName;

- (BOOL)_lockFocusOnRep:(RepresentationInfo *)rep;

- (BOOL)_sizeSet;

- _setNeedsToExpand:(BOOL)flag;
- _expand;
- (BOOL)_expandRep:(RepresentationInfo *)rep;
- (BOOL)_addRepsFrom:imageList toRep:(RepresentationInfo *)rep;
- (RepresentationInfo *)_bestRepresentation:(BOOL)allScreens 
	checkFlag:(BOOL)checkFlag;

- (BOOL)_composite:(int)op delta:(float)delta fromRect:(const NXRect *)rect toPoint:(const NXPoint *)point;

- (BOOL)_asIconHasAlpha;

@end
