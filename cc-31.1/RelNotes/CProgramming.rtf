{\rtf0\ansi{\fonttbl\f0\froman Times;\f1\fmodern Courier;\f2\fswiss Helvetica;\f3\fmodern Ohlfs;}
\paperw12220
\paperh13840
\margl400
\margr660
{\colortbl\red0\green0\blue0;}
\pard\tx0\tx2520\tx2880\tx3240\f0\b0\i0\ul0\fs48\li1440 \
Preliminary 2.0 Release Notes: \
C Programming\

\pard\tx1800\tx2160\tx2520\fs28\li1440 \
\
\
This file contains information about the following topics:\

\b \

\pard\tx1800\tx2160\tx2520\tx2880\b0\fi-360\li1800 ·	GNU C Compiler\
·	Link Editor, Shared Libraries, and Tools\

\pard\tx2160\tx2520\tx2880\fi-380\li1800 \
For more about these and related topics, see the following chapters in 
\fi0\li1440 the 
\i NeXT Development Tool
\i0 s manual:\
\

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	Chapter 1:  ªPutting Together a NeXT Applicationº\
·	Chapter 6:  ªThe GNU C Compilerº\
·	Chapter 7:  ªThe GNU C Preprocessorº\
·	Chapter 8:  ªThe GNU C Source-Level Debuggerº\
·	Chapter 9:  ªMach Object Filesº\
\

\pard\tx2160\tx2520\tx2880\li1440 Also see the following UNIX manual pages:\
\

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	ld(1)\
·	nm(1)\
·	ranlib(1)\
·	strip(1)\
·	ebadexec(1)\
·	get_end(3)\
·	rld(3)\
·	Mach-O(5)\
·	cmpshlib(local)\
·	indr(local)\
·	mkshlib(local)\

\pard\tx2160\tx2520\tx2880\fi-380\li1800 \
\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2520\tx2880\tx3240\b\fs36 GNU C Compiler \

\pard\tx1800\tx2160\tx2520\fs28\li1440 \

\b0 The Release 2.0 compiler is based on version 1.36 of the GNU Compiler (the Release 1.0 compiler was based on version 1.34).  Version 1.36 incorporates many minor bug fixes, provides additional warnings, and has numerous internal enhancements.  The new compiler doesn't provide many new user-visible features, but a few incompatible changes and new features are discussed below.\

\b \
\
\

\pard\tx0\tx2520\tx2880\tx3240\li720 Incompatible Changes\

\pard\tx1800\tx2160\tx2520\li1440 \
\
Changed Objective-C Symbol Names
\b0 \
\
The compiler now produces better symbol names for Objective-C methods.  The symbol names are of the form ª+[ClassName(CategoryName) MethodName:]º\
rather than ª__MethodNumber_ClassOrCategoryNameº, where the method number could be interpretted only by examining the Objective-C symbol-table segment.  In Release 1.0, tools such as 
\b nm
\b0  and 
\b gprof
\b0  translated symbol names to the human readable form, so this change should not be directly visible.  Programs which directly manipulate symbol table names may have to be modified.\
\
Also, symbols generated by the Objective-C compiler to communicate with the Objective-C runtime environment are now prefixed with ªLº.  Such symbols are local to the assembler, and do not appear in object files.  This reduces the number of symbols for the loader to process, and simplifies symbol listings generated with 
\b nm
\b0 .\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 \
\
\
Unnamed Bit-Field Initialization Bug Fix\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 A compiler bug relating to the initialization of unnamed bit-fields in structures has been fixed which may cause source incompatibilities.  ANSI C specifies that unnamed bit-fields cannot be initialized, so the initializer list for a structure shouldn't contain an element corresponding to an unnamed bit-field (unnamed bit-fields aren't even considered members of the structure).  The Release 1.0 compiler incorrectly used elements from the structure initializer list to initialize the unnamed bit-field components, thus shifting the remaining initializers out of place.\
\
Unfortunately, some programs have come to rely on the incorrect behavior of the Release 1.0 compiler even though these programs are technically in error.  The Mach type 
\b message_header_t
\b0  (declared in <
\b sys/message.h
\b0 >) contained an unnamed bit-field in the 1.0 Release, and some programs initialized a 
\b message_header_t
\b0  structure, including the unnamed bit-field.\
\
To solve this problem, a name (
\pard\tx1040\tx2100\tx3160\tx4220\tx5280\tx6320\tx7380\tx8440\tx9500\tx10560\b msg_unused
\pard\tx1800\tx2160\tx2520\li1440 ) was added to the unnamed bit-field in msg_header_t
\b0 .  With this change, the Relase 1.0 and Release 2.0 compilers generate the same code, and the existing programs become correct.  No other instance of this problem are known, but a program which initializes structures which contain unnamed bit-fields, will have to be modified either by adding a name to the bit-field or by changing the initializer list.\
\
In most cases the warning ªexcess elements in aggregate initializerº is generated by the Release 2.0 compiler, because there will be more initializers than the structure has members which may be initialized.  C, however, allows fewer initializers than there are members of the structure (the rest default to zero), and if the programmer has taken advantage of this fact there will be no warning.\
\
In summary, the change to <
\b sys/message.h
\b0 > resolves all known instances of this problem, but this is an incompatible change which could conceivably require users to correct their code in order to recompile it.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Only gprof Profiling Supported\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 Berkeley Unix systems traditionally support two sets of profiling options and tools:\

\b -p
\b0  for 
\b prof
\b0 , and 
\b -pg
\b0  for 
\b gprof
\b0 .  The 
\b gprof
\b0  profiling is essentially a superset of the 
\b prof
\b0  profiling.  With Release 2.0, NeXT supports only the 
\b gprof
\b0  profiling options.  The compiler driver will issue a warning whenever the 
\b -p
\b0  option is used:\
\

\f1\fs26 	
\pard\tx1040\tx2100\tx3160\tx4220\tx5280\tx6320\tx7380\tx8440\tx9500\tx10560\f0\fs28 cc: -p profiling is no longer supported.  Use -pg instead.
\pard\tx1800\tx2160\tx2520\f1\fs26\li1440 \

\f0\fs28 \
These changes were implemented to support additional profiling features which are discussed below.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 New Format for Dependency Information\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The new compiler generates dependency information in a new (and better) format.  The output generated by the
\b  ±M
\b0 , 
\b ±MM
\b0 , 
\b ±MD
\b0 , and 
\b ±MMD
\b0  compiler options consists of a single Makefile rule containing all dependencies of the file being compiled.  The dependencies are uniqued by the compiler, and the Makefile rule is continued with backslashes in order to fit within 80 columns.  The Mach 
\b md
\b0  program had to be modified to recognize this new format.\
\
\
\

\pard\tx0\tx2520\tx2880\tx3240\b\li720 New Features\

\pard\tx1800\tx2160\tx2520\li1440 \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 New Mach-O Sections\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The compiler now produces object files with more Mach-O sections than the traditional 
\b text
\b0 , 
\b data
\b0 , and 
\b bss
\b0  sections of the BSD 
\b a.out
\b0  format.  The standard sections of the 
\b __TEXT
\b0  segment are:\
\
	
\b __text
\b0 :  The machine instructions of the program.\
	
\b __const
\b0 :  Constant data.\
	
\b __cstring
\b0 :  Literal strings to be uniqued by 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 .\
	
\b __literal4
\b0 :  4-byte literal constants (floats) to be uniqued by the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 .\
	
\b __literal8
\b0 :  8-byte literal constants (doubles) to be uniqued by the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 .\
\
The 
\b __text
\b0  section is free of data and solely contains machine instructions.  Branch tables for switch statements are now located in the 
\b __const
\b0  section.\
\
Literal strings generally go in the 
\b __cstring
\b0  section, with two exceptions.  Strings which contain a null character (\\0) other than at the end are placed in the 
\b __const
\b0  section, since the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440  breaks strings in the 
\b __cstring
\b0  section at nulls to unique them.  A literal string which is the initializer of an array of characters which is not declared const is placed in the 
\b __data
\b0  section of the 
\b __DATA
\b0  segment (as before).\
\
The 
\b __literal4
\b0  and 
\b __literal8
\b0  sections contain unnamed literal constants which are uniqued by the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 .  These sections are present only when optimizing is not enabled in the compiler, since immediate constants are always more efficient with the Motorola 68000 family processors.\
\
The standard sections of the 
\b __DATA
\b0  segment are:\
\
	
\b __data
\b0 :  Initialized data.\
	
\b __bss
\b0 :  Uninitialized data.\
	
\b __common
\b0 :  Common symbols which are created by the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 .\
\
The standard sections of the 
\b __OBJC
\b0  segment are:\
\
	
\b __class
\b0 :  Class objects.\
	
\b __meta_class
\b0 :  Metaclass objects.\
	
\b __cat_cls_meth
\b0 :  Category class method descriptors.\
	
\b __cat_inst_meth
\b0 :  Category instance method descriptors.\
	
\b __cls_meth
\b0 :  Class method descriptors.\
	
\b __inst_meth
\b0 :  Instance method descriptors.\
	
\b __message_refs
\b0 :  Selector references. (uniqued by the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 )\
	
\b __symbols
\b0 :  Objective-C symbol index.\
	
\b __category
\b0 :  Category descriptors.\
	
\b __class_vars
\b0 :  Class variable descriptors (present only in the Object Class).\
	
\b __instance_vars
\b0 :  Instance variable descriptors.\
	
\b __module_info
\b0 :  Module information.\
	
\b __selector_strings
\b0 :  Objective-C strings (uniqued by the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440 ).\
\
The class objects and category method descriptors are always modified by the Objective-C runtime at startup.  The remaining method descriptors and the selector references are modified for all but the largest Mach-O in the program (usually libNeXT).  All other sections are never modified by the Objective-C runtime.\
\
\
\

\b Code generation changes for 68040
\b0 \
\
The compiler no longer emits any instructions which are emulated in software on the 68040.  Specifically, the 
\b fmovecr
\b0  instruction is no longer used for immediate floating-point values, and the 
\b fintrz
\b0  instruction is no longer used for casting floating-point values to signed integers (a fuction call to 
\b _fixdfsi
\b0  is generated instead).\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 \
\
\
Improved Communication of Source Information from Preprocessor\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The preprocessor now communicates additional source information to the compiler to enable improved error diagnostics.  In addition to indicating the line and file where an error occurred, the compiler also specifies how that file was included in your program.  For example:\
\
	In file included from foo.c:1:\
	/usr/include/nfs/nfs.h:36: `EPERM' undeclared, outside of functions\
\

\b \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 Warnings of Potential Selector Conflicts\

\pard\tx1800\tx2160\tx2520\li1440 \
The -Wselector
\b0  compiler option has been added to warn about possible selector conflicts between Objective-C interfaces.  This option directs the compiler to print a list of all methods seen which use the same selector as another method, but which have different return or argument types.  For example, when used on a file which imports both <
\b appkit/appkit.h
\b0 > and <
\b soundkit/soundkit.h
\b0 >, the 
\b ±Wselector
\b0  option reports the following conflict (among others):\
\
	/usr/include/appkit/Slider.h:60: potential selector conflict for method\
		`-(double )minValue'\
	/usr/include/soundkit/SoundMeter.h:107: also found `-(float )minValue'\
\
If a user wishes to use both the appkit and the soundkit, and wishes to use the 
\b minValue
\b0  method of either kit, then static typing must be used to resolve the ambiguity; otherwise, a warning message will be generated and the compiler will use the first method prototype seen (which may or may not be correct).\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Suppression of Common Symbols\

\pard\tx1800\tx2160\tx2520\li1440 \
The -fno-common
\b0  compiler option has been added to suppress the generation of UNIX common symbols.  This option enforces the ªref-defº linkage model specified by ANSI C.  In this model, each declaration of a symbol is either a definition of that symbol or a reference to it.  Each reference must be satisfied by a definition in exactly one other module.  This corresponds to the modern practice of declaring all symbol references 
\b extern
\b0 .  To write the most portable code, developers are encouraged to declare all references 
\b extern
\b0 , and to use an initializer for all definitions.  (See 
\i C: A Reference Manual
\i0 , second edition, by Harbisson and Steele, pp. 79-80.)\
\
UNIX systems traditionally support common symbols which allow each module to simply declare that a symbol exists, and the 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fc0 link editor
\pard\tx1800\tx2160\tx2520\li1440  actually defines global symbols which don't have explicit definitions in any module.  Such symbols go into the 
\b __common
\b0  section of the 
\b __DATA
\b0  segment.\
\
Common symbols aren't a part of ANSI C, are error prone, and are a frequent source of confusion among developers.  Support of common symbols is provided for full BSD compatibility, but their use is discouraged in new programs.\
\
(Once this option has been properly tested, we may eventually make it the default behavior of the compiler.
\pard\tx2160\tx2520\tx2880\li1440    <<NeXT-internal>>)
\pard\tx1800\tx2160\tx2520\li1440 \
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Improved Compiler Crash Message\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The message printed when the compiler crashes explicitly states that an internal compiler error has occurred.  The old message was somewhat confusing.\
\

\b \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 Support for 64-Bit Integers\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 Support for 64-bit integers has been enabled.  Variables declared to be of type 
\b long long
\b0  are implemented as 64-bit integers.  All arithmetic operations are supported by compiler-generated library calls.  Debugging support isn't provided.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Improved Type-Checking for Class Methods\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 When a method is sent to a Class object (for example, [View new]), the class method is more rigorously checked against the definition of the receiver class.  This extra checking also permits multiple class methods to return different types even though they use the same selector, just as can be done for instance methods when static typing is used.\
\

\b \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 Improved Categories\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 Various bugs relating to Objective-C categories have been fixed.  Category implementations are now checked for completeness, just as class implementations are.  Categories may now have the same name as an existing class, and categories of different classes may have the same name.  This last feature is useful for grouping methods by function.  For example, a category named ªPrintingº could be created for each of several classes, and the implementations of these categories could be placed in a single source file, if desired.\
\
This additional flexibility allows source files to be organized more freely, and also permits methods which are known to be used in conjunction with one another to be placed in their own object file, which may increase locality of reference, thereby improving performance.\
\

\b \
\

\pard\tx2520\tx2880\tx3240\fs36 Objective-C++ \

\pard\tx1800\tx2160\tx2520\fs28\li1440 \

\b0 Release-2.0 includes a port of the GNU G++ compiler which has been extended to recognize Objective-C constructs.  The compiler is based on G++ version 1.36.4, which implements version 2.0 of the C++ language, as specified by AT&T.\

\b \
\
\

\pard\tx0\tx2520\tx2880\tx3240\li720 New Tools\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The Objective-C++ compiler consists of the compiler driver (/bin/cc++), the compiler proper (/lib/cc1++), a post-linker (/lib/collect), a symbol ªdemanglerº (/bin/g++-filt), an enhanced symbol table tool (/bin/nm++), and an enhanced profiler (
\pard\tx1040\tx2100\tx3160\tx4220\tx5280\tx6320\tx7380\tx8440\tx9500\tx10560 /usr/ucb/gprof++
\pard\tx1800\tx2160\tx2520\li1440 ).  In addition, the debugger provides support for debugging C++ (see the Debugger release notes).\
\

\b \
\

\pard\tx2520\tx2880\tx3240\fs36 GNU Assembler\
\

\pard\tx1800\tx2160\tx2520\b0\fs28\li1440 The assembler now allows double-quotes around symbol names and takes everything inside the double-quotes as the symbol name.  This feature is what enables the compiler to produce symbol table names of the form ª+[ClassName(CategoryName) MethodName:]º for objective-C methods.\

\b \
\
\

\pard\tx2520\tx2880\tx3240\fs36 Profiler\
\

\pard\tx1800\tx2160\tx2520\b0\fs28\li1440 The profiler, gprof(1), now knows about objective-C categories and prints the category name with the method name where appropriate.\

\b \
\
\

\pard\tx2520\tx2880\tx3240\fs36 Link Editor, Shared Libraries, and Tools \

\pard\tx1800\tx2160\tx2520\fs28\li1440 \
\

\pard\tx0\tx2520\tx2880\tx3240\li720 Major Changes\

\pard\tx1800\tx2160\tx2520\li1440 \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 New Link Editor\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The 
\b ld
\b0  link editor has been completely rewritten.  It's much more efficient, a bit faster, and now fully supports the Mach-O format.  It's fully upward compatibleÐthat is, it will link old objects.  It's not downward compatibleÐthat is, the old link editor 
\i won't
\i0  link objects created by the new link editor (it will most likely core dump the old link editor).  See the new 
\b ld
\b0 (1) man page for more information, including a description of the new options to fully support the Mach-O format.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 New Host Shared Libraries and crt0.o\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 Shared library initialization has changed.  This means that the host shared libraries (for example,
\b  /lib/libsys_s.a
\b0 )and the runtime start-off (
\b /lib/crt0.o
\b0 ) have changed.  These two items must be used as a pair from the new or old release and must be used only with the link editor from the same release.  The target shared libraries, however, remain compatible when rebuilt with the new tools, so that binaries built with new or old tools will run on both the new and old systems using whichever target shared library is installed.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 No More Mixed Static and Global Data in Shared Library Objects\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 There's a new requirement for objects that make up shared libraries:  No object can contain both global and static data.  When creating a shared library, the old link editor used to split the data section of objects into the part that contained global data and the part that contained static data.  This required that all the object's global data follow its static data.  In Release 1.0 this affects only one source file, libc's 
\b ctime_data.c
\b0 .  A set of changes has been made to the sources to keep the resulting target shared libraries compatible. 
\pard\tx2160\tx2520\tx2880\li1440   <<NeXT-internal>>
\pard\tx1800\tx2160\tx2520\li1440 \
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Symbols _end, _etext, and _edata No Longer Exist\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The standard UNIX link-editor-defined symbols specific to 
\b a.out
\b0  files, 
\b _end
\b0 ,
\b  _etext
\b0 , and 
\b _edata
\b0 , are no longer defined.  This change is reflected in the versions of the system libraries, 
\b libc.a
\b0 , 
\b libsys_s.a
\b0 , and 
\b libsys_p.a
\b0 , that are included in 
\b cc-17
\b0 .  If you encounter a program that uses these symbols (they will be undefined and the program will fail to link) you must change something.  If the program's output file format is the default MH_EXECUTE, most likely the program is making the incorrect assumption that it's running under a UNIX system and not a Mach systemÐsuch a program needs to be rethought and fixed.  If the program's output file format is MH_PRELOAD (linked with the option 
\b -p
\b0  or 
\b -preload
\b0 ), then the program should be changed to use the link-editor-defined symbols for the preload format (see the ªLink Editor Defined Symbolsº section of the 
\b ld
\b0 (1) man page).  There are routines that get simulated values for these symbols, but their use is strongly discouraged (see 
\b get_end
\b0 (3)).\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 The Link Edit Segment Gets Created by Default\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The link edit segment gets created by default for the output formats that can have it.  To not create this segment the -noseglinkedit option must be specified.\

\b \
\
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 A New Tool to Dignose EBADEXEC Errors\
\

\pard\tx1800\tx2160\tx2520\b0\li1440 The program 
\b ebadexec
\b0 (1) takes a program as it's argument and trys to determine why it can't be executed.\

\b \
\
\
Procedure Reordering with ld(1)B\
\

\b0 Procedure reordering with 
\b ld
\b0 (1), also referred to as "scatter loading" or "scattered loading," is now working correctly.  The 
\b ld
\b0 (1) option "
\b ±sectorder 
\b0\i segname sectname orderfile
\i0 " has been added to allow a section to be loaded in the order specified.  The serious limitation caused by the way the relocation entries worked has been fixed, and use of this feature produces correct programs.  A complete description of procedure reordering, with step-by-step instructions, is included in the note 
\b NextLibrary/Documentation/NextDev/Notes/LinkOptimization.rtf
\b0 .   \
\
<<Information from the following section should all be contained in the 
\b LinkOptimization.rtf
\b0  file referred to in the preceding paragraph.  The following section will be removed from the 2.0 release notes once it's determined that all the information has been put into the Note file.>>\
\
\
\

\pard\tx0\tx2520\tx2880\tx3240\b\li720 The Ability to Do "Scattered Loading" with ld(1) is Now Possible\

\pard\tx180\tx2520\tx2880\tx3240\li1440 \

\pard\tx1800\b0\li1440 The ability to do "scattered loading" with 
\b ld
\b0 (1) is now working correctly.  The 
\b ld
\b0 (1) option "
\b -sectorder
\b0  
\i segname
\i0  
\i sectname
\i0  
\i orderfile
\i0 " has been added to allow a section to be loaded in the order specified.  The serious limitation caused by the way the relocation entries worked has been fixed, and use of this feature produces correct programs.\
\
\

\b Current Limitations\

\b0 \
1.  In part to implement scattered loading, a new type of relocation entry is now used (see the comments in <reloc.h>).  To use the 
\b -sectorder
\b0  feature, all object files must be recompiled so the resulting program will work correctly.  Unfortunately, if this is not the case the new link editor can't detect that an object file wasn't compiled with the correct compiler, and will produce a program that will not execute correctly if (and only if) the 
\b -sectorder
\b0  feature is used.  Also by the same token, objects compiled with the new compiler are not backward compatible with previous Warp
\i X
\i0  (or 1.0) releases of the link editor.  If such an object file were linked with an old Warp
\i X
\i0  link editor it would result in an error message like the following:\
\

\f1\fs26 ld: hello.o r_address (0xa000005e) field of relocation entry 4 in\
section (__TEXT,__text) out of range\

\f0\fs28 \
The key here to notice is that the high bit of the 
\b r_address
\b0  field, bit 0x80000000, is set (which means it is one of the new scattered relocation entries).\
\
2.  For hand-coded assembly code, there is only one minor limitation that will result in an incorrect program (not linked correctly and will fail to execute correctly).  This is, if there is a branch to a temporary label (a d: label where d is a digit or a label that starts with 'L') that branches over a non-temporary label.  For example:\
\

\f1\fs26 	foo: bra 1f\
	     ...\
	bar: ...\
	1:   ...\

\f0\fs28 \
The problem here is that there is no relocation entry generated for the instruction "bra 1f".  Only the symbols foo and bar make it into the object file's symbol table, and if the link editor does not place the block associated with the symbol bar directly after the block for foo, the branch to 1f will not go the the correct place (since their is no relocation entry and thus the link editor does not know to fix up the branch).  The source code change to fix this problem is to change the label 1: to a non-temporary label (call it anything, like bar1).  To make this work automatically, the assembler would have to make all branch displacements long (32 bits) to allow arbitrary motion by the link editor and generate relocation entries for all of them.  Since this never happens in compiler-generated code and since it would bloat the code, it was chosen to live with this limitation.  
\fc0 The best way to avoid this problem is to use the pseudo-symbol .section_all for assembly source objects (described below).\
\
\

\b General Description of Scattered Loading\

\b0 \
Any section can be ordered in the output file by specifying the following option to 
\b ld
\b0 (1):\
\
    -sectorder 
\i SEGMENT_NAME
\i0  
\i section_name
\i0  
\i order_file
\i0 \
\
Here (
\i SEGMENT_NAME
\i0  
\i section_name
\i0 ) specifies the section to be ordered.  For non-literal sections the 
\i order_file
\i0  contains lines of object name and symbol name pairs (exactly one per line separated by a single ':').  The link editor then constructs the output file so that the contents of the specified section in the output file is constructed from blocks of the input file's sections.  For each input file that has the specified section, the link editor breaks up the contents of the section into blocks at the values of the symbols defined in that section and associates the symbol name with the block.  Then the link editor arranges the blocks in the output file in the order listed in the 
\i order_file
\i0 .  These blocks are aligned to the output file's section alignment for the specific section (see the 
\b ld
\b0 (1) man page for more information).  This can make the resulting section slightly larger than if linked normally.\
\
Object-file/symbol-name pairs found in the loaded objects not listed in the 
\i order_file
\i0  appear last in the output file's section ordered by object file (as they appear on the command line), and then by symbol in that object file ordered by increasing symbol value.  By default, the link editor prints a summary of number of symbol names in the loaded objects not in the 
\i order_file
\i0 , the number of symbol names listed in the 
\i order_file
\i0  not in the loaded objects if both values are not zero, and the number of symbol names that are ambiguous. To produce a detailed list of these symbols, the 
\b -sectorder_detail
\b0  flag can be specified.  Object-file/symbol-name pairs listed multiple times always generate a warning, and the first occurrence is used.\
\
For literal sections, the 
\i order_file
\i0  is specific for each type of literal section:\
\

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	For 'C' string literal sections, the 
\i order_file
\i0  format is one literal 'C' string per line (with ANSI 'C' escape sequences allowed in the 'C' string).  For example a line 
\fc0 might look like:\

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\li1440 		
\f1\fs26 Hello world\\n
\f0\fs28 \

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	For 4 byte literal sections, the 
\i order_file
\i0  format is one 32 bit hex number with a leading 0x per line with the rest of the line treated as a comment. For example a line 
\fc0 might look like:\

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\li1440 		
\f1\fs26\fc0 0x3f8ccccd (1.10000002384185790000e+00)
\f0\fs28 \

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	For 8 byte literal sections, the 
\i order_file
\i0  is two 32 bit hex numbers per line separated by white space each with a leading 0x, with the rest of the line treated as a comment. For example a line 
\fc0 might look like:\

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\li1440 		
\f1\fs26\fc0 0x3ff00000 0x00000000 (1.00000000000000000000e+00)
\f0\fs28 \

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	For literal pointer sections, the format of the order file are lines representing the pointers one per line.  A literal pointer is represented by the segment name and section name the literal it is pointing at is in and the literal. Each of these three are separated by a ':' with no extra white space. For example a line 
\fc0 might look like:\

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\li1440 		
\f1\fs26\fc0 __OBJC:__selector_strs:new
\f0\fs28 \

\pard\tx1800\li1440 \

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	For all the literal sections, each line in the the order file is simply entered into the literal section and will appear in the output file in the order of the order file.  There is no check to see if the literal is in the loaded objects.\

\pard\tx1800\li1440 \
The lines in the 
\i order_file
\i0  for literal sections can most easily be produced with with 
\b ld
\b0 (1) and 
\b otool
\b0 (1).  For example using the a file created from 
\b ld
\b0 (1)'s -whatsloaded option as above, run otool(1) with the following options section name -- in this example (__TEXT,__cstring) -- to produce what would be the default load order:\
\

\pard\tx1800\tx2160\li1440  	
\f1\fs26 otool -X -v -s __TEXT __cstring `cat whatsloaded` > 		cstring_order
\f0\fs28 \

\pard\tx1800\li1440 \
Then the lines of cstring_order can be reordered to produce the desired load order using the following command line:\
\

\pard\tx1800\tx2160\li1440     
\f1\fs26 cc -o hello hello.o -sectorder __TEXT __cstring 		cstring_order\

\pard\tx1800\f0\fs28\li1440\fc0 \
The lines in the 
\i order_file
\i0  for non-literal sections can most easily be produced with 
\b ld
\b0 (1) and 
\b nm
\b0 (1).  For an executable, first run the link editor with the 
\b -whatsloaded
\b0  option.  For example:\
\

\f1\fs26 	cc -o hello hello.o -whatsloaded > whatsloaded\

\f0\fs28 \
Then with the file produced above, run 
\b nm
\b0 (1) with the following options using the section name -- in this example (__TEXT,__text) -- to produce what would be the default load order:\
\

\f1\fs26     nm -onjls __TEXT __text `cat whatsloaded` > text_order\

\f0\fs28 \
Then the lines of text_order can be reordered to produce the desired load order using the following command line:\
	\

\f1\fs26 cc -o hello hello.o -sectorder __TEXT __text text_order -e start\

\f0\fs28 \
With executables, the entry point must be preserved.  The best way to do this is use the 
\b ld
\b0 (1) option "
\b -e start
\b0 ".  The symbol "
\b start
\b0 " (no leading '_') is in 
\b crt0.o
\b0  and is the first text address in your program when you link normally.  Thus the default entry point for 
\b ld
\b0 (1) (the first address in the first section) works fine.  With scattered loading you have to make sure to get this right.  The other way to do this is to put the line 
\b /lib/crt0.o:start
\b0  or 
\b /lib/crt0.o:.section_all
\b0  as the first line in your text_order file.\
\
\

\b The Pseudo-Symbol .section_start\

\b0 \
If the specified section in any input file has a non-zero size and there is not a symbol with the value of the beginning of its section, the pseudo symbol 
\b .section_start
\b0  is used by the link editor as the symbol name it associates with the first block in the section. 
\f2\fs24   
\f0\fs28 This should never be needed with the cc-26 and later compilers for 'C' code.  This is because the main need for this symbol was due to literal constants who's symbols did not persist into the object  file. Since literal strings and floating-point constants are now in literal sections and not in sections that can be ordered this is no longer a problem.  But for assembly source code and non-NeXT compilers this may be needed.  But even in those cases it is suggested that code from these sources not be ordered and the pseudo symbol .section_all be used not to order the object's section. \
\
\

\b The Pseudo-Symbol .section_all\
\

\b0 If  the cases where you do not want the contents of a section from an object file to be scattered but rather link edited normalily (as an entire section) the pseudo-symbol 
\b .section_all 
\b0 can be used.  This directs the link editor to place the entire contents of that object file in the output file as a block and not to break it up.  This would be used for object files from assembly source and for object files that you don't have the source to and are unsure they have been recompiled with a NeXT 2.0 compiler.\

\f2\fs24 \
\

\f0\b\fs28 Ordering Other Sections Besides the (__TEXT,__text) Section\

\b0 \
This same process can be used to order the blocks in any section.  The sections for the objective-C runtime are automaticly ordered by the compiler and should not be ordered by the user.  \
\
One of the other sections that can be ordered is the (__DATA,__data) section.  There currently are no tools to measure references to data symbols.  The programmer may, however, know the patterns of how the program uses its data and could provide some savings if the data that is used to support a seldom used feature is separated from other data.  One thing to try is to sort the data by size so that all of the small things end up on as few pages so if any large data item is not used it does not cause two small things to reside on different pages.  Since this data is private per-process and would have to be written to the swap file, this could be a major savings in some programs.\
\
\

\b Special Notes for Shared Libraries 
\pard\tx2160\tx2520\tx2880\li1440 <<NeXT-internal>>
\pard\tx1800\li1440 \

\b0 \
Since the shared libraries use fixed virtual addresses some of the addresses must not change after they have been scatter loaded.  These addresses include all branch table slots global const data and global data.  Since all of these items are in a very few files this is not difficult.  To do this, I suggest you create a file that contains the list of the objects that contain the symbols that must remain fixed.  For example, for libNeXT this list is:\
\

\f1\fs26     branch.o:.section_all\
    libappkit/shlib_obj/appkit_globals.o:.section_all\
    libdpsclient/shlib_obj/globals.o:.section_all\
    libsoundkit/shlib_obj/soundkit_globals.o:.section_all\
    pointers.o:.section_all\

\f0\fs28 \
(Basically the thist objects in the #objects list in the spec_NeXT file).  The first file, 
\b branch.o
\b0 , is created by 
\b mkshlib
\b0 (1) and contains the branch table and other associated shlib symbols created by 
\b mkshlib
\b0 (1).  
\fc0  So if any section of libNeXT is to be ordered and the above lines are allways the first lines in the order file.\
\
Since the cc-26 and later compilers  now puts const data in the (__TEXT,__const) section you need to add the following line to all of these files that contain global const data:\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\f2\fs24\fc0 \

\pard\tx1800\f1\fs26\li1440\fc0 	#pragma CC_NO_MACH_TEXT_SECTIONS\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\f2\fs24\fc0 \

\pard\tx1800\f0\fs28\li1440\fc0 to force their const data in to the (__TEXT,__text) section so it will remain at the same addresses.\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\f2\fs24\fc0 \

\pard\tx1800\f0\b\fs28\li1440 Cmpshlib
\b0  has be enhanced to check that the global const symbol address also have not changed.  To do this it takes the 
\b spec_*
\b0  file as input and checks that all 
\b #nobranch_text
\b0  symbols that are not 
\b #private_externs
\b0  have not changed in address.  With this change it points out bugs in the 
\b spec_*
\b0  file for symbols that are 
\b #nobranch_text
\b0  which should have been 
\b #private_externs
\b0 . It also correctly does not check data symbols that are 
\b #private_externs
\b0 .  
\pard\tx2160\tx2520\tx2880\li1440 <<NeXT-internal>>
\pard\tx1800\tx2160\tx2520\li1440 \
\
\
\

\pard\tx0\tx2520\tx2880\tx3240\b\li720 Minor Changes\

\pard\tx1800\tx2160\tx2520\li1440 \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 Changed Table of Contents Produced by ranlib(1)\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 To make link editing faster, the table of contents of libraries can be produced in sorted order with the new 
\b -s
\b0  option to the program 
\b ranlib
\b0 (1) (the default).  The one case in which this option can't be used is when an archive is to contain multiple members that define the same symbol.  In this case, the table of contents produced by 
\b ranlib
\b0 (1) won't be sorted, even if the 
\b -s
\b0  option is given.  Furthermore, if the 
\b -s
\b0  option is given in this situation, 
\b ranlib
\b0 (1) will list the symbols and the members that define them for symbols defined in multiple members.\
\
The original behavior of 
\b ranlib
\b0 (1) was to consider common symbols to be a definition as far as the table of contents is concerned.  This typically isn't what's wanted, so the default now is not to do this.  If this behavior is needed, the 
\b -c
\b0  option can be used to cause common symbols to be considered a definition.\
\
There are currently no libraries released by NeXT that have the same symbol defined by multiple members or that require common symbols to be considered a definition as far as the table of contents is concerned.  The new link editor does link from archives with non-sorted tables of contents, and correctly loads members in the order of the table of contents as they resolve undefined symbols.  Therefore, archives which have multiple members defining the same symbol still work correctly.  If the table of contents isn't sorted, a message will be printed suggesting the use of the 
\b ranlib
\b0 (1) 
\b -s
\b0  option; this message can be ignored.\
\
The 1.0 version of 
\b ranlib
\b0 (1) doesn't correctly place the table of contents member (ª__.SYMDEFº) at the beginning of the archive if the archive has had its table of contents built with the new 
\b ranlib
\b0 (1) 
\b -s
\b0  option.  What happens is the table of contents built by 
\b ranlib
\b0 (1) 
\b -s
\b0  isn't replaced by the member ª__.SYMDEFº because its name is ª__.SYMDEF SORTEDº and it uses a different algorithm than 
\b ar
\b0 (1), which it calls to do the replacement.  This is only a backwards compatibility problem.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Faster mkshlib(l)\

\pard\tx1800\tx2160\tx2520\li1440 \
The program mkshlib
\b0 (l) is now a great deal faster.  The half of the program that creates the host shared library was mostly rewritten.  It no longer uses the 
\b as
\b0 (1) assembler, the 
\b ar
\b0 (1) archiver, or 
\b ranlib
\b0 (1) to produce the host shared library.  
\b Mkshlib
\b0 (l) writes the entire host shared library archive itself now, which accounts for the bulk of the speed up.  This may remove the need for the 
\b -f
\b0  (fast) option, which doesn't build the host library in cases where a compatible library is being built and the host library isn't needed anyway.
\pard\tx2160\tx2520\tx2880\li1440   <<NeXT-internal>>
\pard\tx1800\tx2160\tx2520\li1440 \
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 New -minor_version Option to mkshlib(l)\

\pard\tx1800\tx2160\tx2520\li1440 \
The new -minor_version
\b0  option may be used instead of the 
\b #minor_version
\b0  directive in the specification file.  This allows the minor version to be set on the command line, making the release process less error prone.
\pard\tx2160\tx2520\tx2880\li1440   <<NeXT-internal>>
\pard\tx1800\tx2160\tx2520\li1440 \
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Deleted options to mkshlib(l)\

\pard\tx2160\tx2520\tx2880\li1440 \
Flags relating to the specification of a.out
\b0  or Mach-O file formats, as well as flags related to the Objective-C translator, have been deleted.  These include: 
\b -Mach
\b0 , 
\b -m
\b0 , 
\b -u
\b0 , and 
\b -I
\b0 .  <<NeXT-internal>>\

\pard\tx1800\tx2160\tx2520\li1440 \
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Possible Debugger Problems\

\fs30 \

\pard\tx2160\tx2520\tx2880\b0\fs28\li1440 The debugger has trouble without the
\b  
\b0\i file
\b\i0 .o 
\b0 local text symbols normally generated by a UNIX 
\b a.out
\b0 -style link editor.  To solve this problem the compiler now generates a new SO stab at the end of the text of the module.  This requires all programs linked with the new link editor to be recompiled if they are to be debugged.  The debugger generates a warning about this when it sees this condition. For now any non-NeXT compiler, namely Fortran, will not be debugable unless it is linked with the "-segobjectsymbols __TEXT __text" option.  Also the debugger may have trouble with the fact that common symbols are now allocated in the (__DATA,__common) section instead of the (__DATA,__bss) section (which will cause the section numbers no longer to be constant as in the 1.0 release). \
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Change in the Rounding of the Preload Format's Segment Size\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 The preload format now has a default segment alignment of the target pagesize (not 4 as in Release 1.0).  This change will require users to use the
\b  -segalign 4
\b0  option to get the old result (the kernel and standalone programs will need their Makefiles changed).\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 The
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320  addition of the -w flag to ld(1) to inhibit warnings\
\

\pard\tx1800\tx2160\tx2520\b0\li1440 This is intended for use with IB and Makefiles it generates for custom pallets project types to avoid a warning message when 
\b ld
\b0 (1) is used only with -sectcreate options and no object files.  This should be set in the Makefile's LDFLAGS and both the LDFLAGS and the CFLAGS should be present in the command line for building the pallet.  This way 
\b -Wall
\b0  in the CFLAGS macro can still be used for compliations.\

\b \
\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320 \

\pard\tx180\tx2520\tx2880\tx3240\li1440 The
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320  addition of the -A flag and removal of the -a flag to strip\
\

\pard\tx1800\tx2160\tx2520\b0\li1440 This is intended for use when installing IB to reduce the size of the release image.  IB currently uses the 
\b -x
\b0  level of stripping which leaves many unneeded symbols and strings in the image wasting disk space.  This will be used via the
\b  install
\b0 (1)
\b  -sA 
\b0 option that calls
\b  strip
\b0 (1)
\b  
\b0 with the
\b  -A 
\b0 option.\

\b \
\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320 \

\pard\tx180\tx2520\tx2880\tx3240\li1440 The
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320  addition of one argument to the function argument of rld_address_func\
\

\pard\tx1800\tx2160\tx2520\b0\li1440 The new prototype for the function
\b  rld_address_func 
\b0 is:\
\
		
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320 unsigned long (*func)(unsigned long size, unsigned long headers_size));\
		\

\pard\tx1800\tx2160\tx2520\li1440 which includes the new argument headers_size.  This argument has the value of the size of the headers the resulting object will have which is included in the size argument.  This is intended for use by the kern loader which can subtract the headers_size from the size to determine the exact size of the memory it needs to allocate in the kernel for the resulting object since the kernel does not need the resulting object's header.\

\b \
\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320 \

\pard\tx180\tx2520\tx2880\tx3240\li1440 The
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320  installation of rld.h in /usr/include\
\

\pard\tx1800\tx2160\tx2520\b0\li1440 All the functions described on rld(3) have their proper prototype in 
\b /usr/include/rld.h
\b0 .\

\b \
\
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 Changes Related to cc-19\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2160\tx2520\tx2880\b0\li1440 The functions
\b  rld_load()
\b0 , 
\b rld_unload()
\b0 , and 
\b rld_lookup()
\b0  have been added to 
\b libsys
\b0 .  These do the real work of dynamic linking for custom pallets in IB.  This can be use in place of most uses of the 
\b ld
\b0 (1) 
\b -A
\b0  option.  These functions are documented in the UNIX manual page for 
\b rld
\b0 (3).\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Changes Related to libsys-21\

\pard\tx2160\tx2520\tx2880\li1440 \

\b0 A program that was linked for profiling and linked with the shared version of 
\b libsys
\b0  on a 1.0 system will core dump with a ªFloating exceptionº at pc 0x050020ea (the address of __setminbrk+6) because the function _
\b setminbrk()
\b0 , used in the profiling runtime startoff 
\b /lib/gcrt0.o
\b0 , was removed from the shared library.  Note that this is part of the 
\b brk
\b0  and 
\b sbrk
\b0  packages which according to the 1.0 man page are not supported on the NeXT system.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Changes Related to mk-1.0.76\

\pard\tx2160\tx2520\tx2880\li1440 \

\b0 The
\b  cpp
\b0  macros from <sys/machine.h> used for the 
\b cputype
\b0  and 
\b cpusubtype
\b0  fields of the 
\b mach_header
\b0  structure have changed.  What was CPU_TYPE_MC68030 is now CPU_TYPE_MC680x0 and what was CPU_SUBTYPE_NeXT is now CPU_SUBTYPE_MC68030.  The values of these macros remain the same; only their names have changed.  This means that any program that wrote a Mach-O file for the NeXT machine will have to be changed when recompiled.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Changes Related to objc-19 and streams-15\

\pard\tx2160\tx2520\tx2880\li1440 \

\b0 The include file
\b  
\b0 <
\b streams/error.h
\b0 >
\b  
\b0 has been move to <objc/error.h>, which will cause the following error for any file that's recompiled using it:\
\
	x.c:1: streams/error.h: No such file or directory
\b  \
\
\
\

\pard\tx0\tx2520\tx2880\tx3240\li720 Object File Format Changes\

\pard\tx1800\tx2160\tx2520\li1440 \
\

\pard\tx180\tx2520\tx2880\tx3240\li1440 Small Binaries Can Now be Small\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 MH_OBJECT format produced by the link editor with the
\b  -object
\b0  option now has a thread and can be executed.  This is used for very small programs, in order to save disk space.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Common Symbols No Longer Allocated in the bss Section\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 Common symbols are no longer allocated in the (__DATA,__bss) section; now they're allocated in the (__DATA,__common) section instead.  This shouldn't cause any problems, and should make it easier to detect which symbols are truly allocated by the link editor.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Flag to Prevent Relinking of an Incrementally Linked File\

\pard\tx1800\tx2160\tx2520\li1440 \

\b0 To prevent a problem of the link editor incorrectly relocating symbols from the base file in a file that had been previously produced by the output of
\b  ld -A
\b0 , a new flag in the 
\b mach_header
\b0  was added.  It's MH_INCRLINK and is set in the output of all 
\b ld -A
\b0  output files.  The link editor will refuse to link a file with this flag set.\
\
\
\

\pard\tx0\tx2520\tx2880\tx3240\b\li720 Link Editor Notes\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx180\tx2520\tx2880\tx3240\b0\li1440 The 
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320 Default Output Format of
\b  ld
\b0 (1)
\b  -A 
\b0 is now MH_OBJECT
\b \

\pard\tx180\tx2520\tx2880\tx3240\b0\li1440 \

\pard\tx1800\tx2160\tx2520\li1440 The default output format of 
\b ld
\b0 (1) 
\b -A
\b0  is now MH_OBJECT and previouly was the MH_EXECUTE format.  This was done because the __PAGEZERO segment of the output file will typically overlap with the __PAGEZERO segment of the base file if both file's formats are the default MH_EXECUTE.  There now is a new option, 
\b -b
\b0 , used when using 
\b -A
\b0  to strip the base file symbols from the output file which can greatly reduce the size for the output.\
\
\

\pard\tx180\tx2520\tx2880\tx3240\fs30\li1440 \

\b\fs28 Load Map Changes\

\pard\tx1800\tx2160\tx2520\b0\li1440 \
The load map printed with 
\b -M
\b0  has changed a great deal:\
\

\pard\tx1800\fi-360\li1800 ·	
\pard\tx1800\tx2160\tx2520\li1440 Information about why an archive member is loaded is no longer printed with 
\b\fi-380\li1800 -M
\b0 . This information is now printed with the 
\b -whyload
\b0  option.\
\

\pard\tx1800\fi-360\li1800 ·	
\pard\tx1800\tx2160\tx2520\fi-380\li1800 The values of global and local symbols are also not printed; this information can be printed by running the 
\b nm
\b0 (1) command on the output file.\
\

\pard\tx1800\fi-360\li1800 ·	
\pard\tx1800\tx2160\tx2520\fi-380\li1800 The new load map is more useful in telling where a section from an input file appears in the output file.\
\
\
\

\pard\tx180\tx2520\tx2880\tx3240\b\li1440 Changes to Command-Line Options\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2160\tx2520\tx2880\b0\li1440 All the options to the link editor must be specified as in the man page.  No longer is the treatment of arguments 
\b -lx
\b0  and 
\b -l x
\b0 ,
\b  
\b0 or 
\b -u sym
\b0  and  
\b -usym
\b0 , considered to be the same.  This is disallowed in order to simplify the parsing of multi-character options and options with multiple arguments.\

\pard\tx1800\tx2160\tx2520\li1440 \
In rewriting the link editor, a number of options specific to UNIX link editors that no longer apply have been removed or changed; also, several obsolete options that were previously created by NeXT were removed.  The old options are either translated to appropriate new options or ignored.  In either case, a warning message is printed stating what was done with the old option.\
\

\pard\tx2000\tx2520\b\fi-560\li1980 -D
\i 	
\b0\i0 The old 
\b -D
\b0  option took the next argument as a hexadecimal number and padded the data section with zero bytes to the indicated length.  The padded area appeared after the data section and before the bss section.  This was used as a way to allocate area in front of the 
\b sbrk()
\b0  arena on a traditional UNIX system.  Typically, this area would be addressed by a kludgeÐtaking the address of the last data symbol and using the symbol 
\b _edata
\b0 .  This is used on a UNIX system to get at an area of VM that isn't possible otherwise. On a Mach system, this would be done easily with 
\b vm_allocate()
\b0 .\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2000\tx2520\b\fi-560\li1980 -G
\b0 , 
\b -g\
	
\b0 These old options dealt with the now obsolete symbol segments produced by the obsolete 
\b -gg
\b0  compiler option.  These have simply been removed; if they are used, a warning is printed saying that they are being ignored.\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2000\tx2520\b\fi-560\li1980 -ident\

\b0 	The 
\b -ident
\b0  option was added for internal use, but was never used.  This option created an 
\b ident
\b0  command in the resulting object file and added 
\i string
\i0  (the following argument) to that command.  More than one such option could be specified, but only one ident command was created. The strings from ident commands of the loaded object files were always discarded.  If something similar were wanted now, it would be done by creating a section and placing the strings in that section with the 
\b -sectcreate
\b0  option.\

\pard\tx1800\tx2160\tx2520\li1440 \

\b -T
\b0 \

\b -Ttext
\b0 \

\pard\tx2000\tx2520\b\fi-560\li1980 -Tdata
\b0 \
	These options specified the start of the __TEXT and __DATA segments; they're automatically translated to use the 
\b -segaddr
\b0  option, and a warning is printed. This automatic translation will be supported for one release, after which the options will no longer be recognized.\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2000\tx2520\b\fi-560\li1980 -v
\b0 	The 
\b -v
\b0  option never did anything. It's now ignored, and a warning is printed.\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2000\tx2520\b\fi-560\li1980 -a
\b0 	The 
\b -a
\b0  option now uses 
\b -i
\b0 , which is slightly different.  It's cleaner in functionality than 
\b -a
\b0  and can be used in the two places at NeXT where the 
\b -a
\b0  flag is used.  The difference between these two is that the original symbol name is no longer removed from the output's symbol table.  It simply takes on the value and type of the symbol it was being aliased to.  See the 
\b ld
\b0 (1) man page for a description of the 
\b -i
\b0  option.\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2000\tx2520\b\fi-560\li1980 -Mach\

\b0 	The old 
\b -Mach
\b0  option has been renamed to 
\b -execute
\b0  to be consistent with all the options that specify the output file format; the old name is still recognized, and works the same.\

\pard\tx1800\tx2160\tx2520\li1440 \

\pard\tx2000\tx2520\b\fi-560\li1980 -segcreate\

\b0 	The old 
\b -segcreate
\b0  option has been renamed to 
\b -sectcreate
\b0  to be more accurateÐwhat it's creating really is a section.  The old name is still recognized, and works the same.\

\pard\tx1800\tx2160\tx2520\li1440 \
\
\

\pard\tx0\tx2520\tx2880\tx3240\b\li720 Known Problems
\pard\tx1800\tx2160\tx2520\li1440 \
\

\pard\tx2160\tx2520\tx2880\b0\li1440 ·	Apps linked for profiling using -lNeXT_p and -lsys_p won't run.   A workaround for Interface Builder applications is described in the Interface Builder release note.   \
\
\
 \

\pard\tx2520\tx2880\tx3240\b\fs36 Man Pages \

\pard\tx1800\tx2160\tx2520\fs28\li1440 \
\

\pard\tx0\tx2520\tx2880\tx3240\li720 New Man Pages\

\pard\tx2160\tx2520\tx2880\b0\li1440 \
The following new man pages will be in the next release of the man page project:\
\

\pard\tx1800\tx2160\tx2520\tx2880\fi-360\li1800 ·	
\b rld
\b0 (3)\
·	
\b ebadexec
\b0 (1)\

\pard\tx2160\tx2520\tx2880\fi-360\li1800 \
\
\

\pard\tx0\tx2520\tx2880\tx3240\b\li720 Updated Man Pages\

\pard\tx2160\tx2520\tx2880\b0\li1440 \
The following UNIX manual pages have been updated to provide additional information.  Updated manual pages will be included in the next release of the man-page project.\
\

\pard\tx1800\tx2680\b\fi-1260\li2680 ld
\b0 (1)	Added missing 
\b -whyload
\b0  description; added a note about how old flags are handled; 
\fc0 updated the description of the 
\b -sectorder
\b0  flag;  added descriptions of 
\b -b
\b0 , 
\b -w
\b0 , 
\b -whatsloaded
\b0 , 
\b -sectobjectsymbols
\b0 , and 
\b -headerpad
\b0 \
\

\b nm
\b0 (1)	Added to the description that categories are printed as well as the 
\b libx.a
\b0 (
\b x.o
\b0 ) syntax for file names and the new 
\b -j
\b0 , 
\b -l
\b0  and 
\b -s
\b0  options.\
\

\b ranlib
\b0 (1)	Cleaned up the description under the BUGS section.\
\

\b otool
\b0 (l)	Removed the option 
\b -g
\b0  from the man page; added note about the minor version number to the 
\b -L
\b0  option; documented 
\b -s
\b0  
\i segname
\i0  
\i sectname
\i0  and
\b  -X
\b0 .\
\

\b strip
\b0 (1)	Updated 
\b -S
\b0  description.\
\

\b rld
\b0 (3)	Documented 
\b rld_load_from_memory
\b0 ().\
\

\b cmpshlib
\b0 (l)	Added a note about 
\b #private_externs
\b0  being reported.\
\

\b mkshlib
\b0 (l)	Added the 
\b -sectcreate
\b0 , 
\b -segprot
\b0 , and 
\b -seglinkedit
\b0  descriptions.\
\
\
\
\

}
