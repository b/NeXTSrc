Changes for the Warp ?? release (the -27 compiler release):
- Changed the name of the the section generated by the .objc_selector_refs
  directive from __selector_refs to __message_refs and set the flags field of
  this section to S_LITERAL_POINTERS.  This change requires a link editor that
  knows how to handle a S_LITERAL_POINTERS section.
- Changed m68k.c to use the reguar atof (actually strtod) instead of using
  atof-m68k.c and atof-m68k-assist.s, since these instructions will be
  emulated on th '040.
Changes for the Warp ?? release (the -26 compiler release):
- Added the file Mach-O.c and the ablity to have a subset of a fixed number of
  sections.  All changes ifdef'ed MACH_O.  This removes atom.c (ifdef'ed out).
  New sections include const, literal4, literal8, 11 new objc sections, etc.
  Basicly a lot of changes.

Changes for the Warp 3 (OS update) release (the -25 compiler release):
- Added scattered relocation entries to the assembler in emit_relocation() in
  write.c (see extensive comments in there and in <reloc.h>).
- Changed fixup_segment() in write.c and md_estimate_size_before_relax() in
  m68k.c to make branches to lables that persist on output to be long in length
  and have a relocation entry (to make scattered loading in the link editor
  work).  This was done by using the value of 3 in fx_pcrel (see the comment in
  write.h) for force this to happen.

Changes for the Warp ?? release (the -24 compiler release):
- Fixed the bug that would not assemble the following instruction:
	L2:movl #1,@(_down:l,d7:l:4)
  The fix was a bug in the macro use in m68k.c for add_fix() which the macro
  did not put ()'s around it's arguments (bugs 5207 and 5270).
- Fixed the bug with cpp processed assembler files (bug 4280).  The new syntax
  of the cpp output now includes an optional number after the file name, for
  example: `# 1 "x.c" 2' the 2 is the new number.  This was done by changing
  the routine s_file() in read.c which recognizes the .file directive (that the
  assembler's preprecessor inserts) to optionally recognize this new number.
- Changed the section alignment of the text section to 2 byte alignment so that
  scattered loading will work (the branch table of the shlibs will not move).

Changes for the 2.0 impulse X.X release (the -23 compiler release):
- Now is linked with libsys.

Changes for the 2.0 impulse X.X release (the -22 compiler release):
- Allow symbol names to appear in ""'s .  This is so that the symbol names for
  methods can be "+[Class(category) method:name:]" and tools will not have to
  go through the objective-C section to get these names. Changes how
  get_symbol_end() works and how the callers of it use it.

Changes for the 2.0 impulse X.X release (the -19 compiler release):
- as is no longer installed as as-<version_number> to match the rest of the
  project.
- Updated atom.c to the changes to CPU_TYPE and CPU_SUBTYPE with the changes to
  <sys/machine.h>

Changes for the 0.91 release (the -10 compiler release):
* s.stone fixed a bug in `#APP', `#NO_APP' that affected read.c & strstr.c.
+ Fixed a bug in converting to Mach-O object files with the new sections
  for the objective-C runtime.  The bug was if a local relocation item refered
  to a symbol plus an offset the incorrect section number could be assigned if
  the value of the symbol plus offset was in a different section than the value
  of the symbol.  This is an un fixable bug in atom(1) but fixed in here by
  moving the assignment of the section number into the r_symbolnum field into
  the assembler and using just the symbol's value (not plus the offset) to pick
  the section number.  The fix is in write.c in emit_relocation() (plus a call
  to a new function get_objc_section_bounds() before calling emit_relocation).
+ Fixed a bug where a file had no symbols and the result was a Mach-O file.
  What would happen was a 4 (the size of the string table) was written at offset
  0 in the output file (overwriting the magic number).  Also did some major
  clean up of atom.c and removed all the garbage that did not apply (about half
  of what was there).
+ Added the .reference pseudo op to read.c.  This was added for the new
  objective-C runtime to use so that archive semantaic could be maintained but
  no globals (that 'C' could use) are created.
+ Fixed the exponent overflow handling in atof-m68k.c to not print a warning
  (ifdef NeXT) and to get the right answer (a bzero of the 'words' as added,
  and corrected the reversed sign for infinities).
+ Fixed m68_ip() to handle hex immediate operands to floating point insn's.
  Now fadds #0xffffffff,fp0 works correctly.  The fix only works for .s, not
  for .d or .x.  This orignally worked, but was broken by NeXT's mods to
  atof-m68k.c.
+ Added new 68040 floating-point instructions to m68k-opcode.h
