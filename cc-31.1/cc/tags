ADD_BENEFIT		loop.c	/^#define ADD_BENEFIT   1/ ;" macro 1 { general_induction_var strength_reduce }	{ }
ADD_PARM_SIZE		expr.h	/^#define ADD_PARM_SIZE(TO, INC)	\\/ ;" macro 1 { assign_parms expand_call store_one_arg }	{ TREE_CODE TREE_INT_CST_LOW genop tree }
ALLOCNO_LIVE_P		global-alloc.c	/^#define ALLOCNO_LIVE_P(I) \\/ ;" macro 1 { record_one_conflict }	{ INT_BITS allocnos_live }
AND_COMPL_HARD_REG_SET		hard-reg-set.h	/^#define AND_COMPL_HARD_REG_SET(TO, FROM) ((TO) &= / ;" macro 1 { find_reg post_mark_life }	{ }
AND_HARD_REG_SET		hard-reg-set.h	/^#define AND_HARD_REG_SET(TO, FROM) ((TO) &= (FROM)/ ;" macro 1 { }	{ }
ARGS_SIZE_RTX		expr.h	/^#define ARGS_SIZE_RTX(SIZE)						\\/ ;" macro 1 { assign_parms expand_call store_one_arg target_for_arg }	{ expand_expr gen_rtx plus_constant }
ASM_IDENTIFY_GCC		tm.h	/^#define ASM_IDENTIFY_GCC(asm_out_file)/ ;" macro 1 { compile_file }	{ asm_out_file }
ASM_OPERANDS_INPUT		rtl.h	/^#define ASM_OPERANDS_INPUT(RTX, N) XVECEXP ((RTX),/ ;" macro 1 { }	{ XVECEXP }
ASM_OPERANDS_INPUT_CONSTRAINT		rtl.h	/^#define ASM_OPERANDS_INPUT_CONSTRAINT(RTX, N) XSTR/ ;" macro 1 { }	{ XSTR XVECEXP }
ASM_OPERANDS_INPUT_CONSTRAINT_VEC		rtl.h	/^#define ASM_OPERANDS_INPUT_CONSTRAINT_VEC(RTX) XVE/ ;" macro 1 { }	{ XVEC }
ASM_OPERANDS_INPUT_MODE		rtl.h	/^#define ASM_OPERANDS_INPUT_MODE(RTX, N) GET_MODE (/ ;" macro 1 { }	{ GET_MODE XVECEXP }
ASM_OPERANDS_INPUT_VEC		rtl.h	/^#define ASM_OPERANDS_INPUT_VEC(RTX) XVEC ((RTX), 3/ ;" macro 1 { }	{ XVEC }
ASM_OPERANDS_OUTPUT_CONSTRAINT		rtl.h	/^#define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XSTR (/ ;" macro 1 { }	{ XSTR }
ASM_OPERANDS_OUTPUT_IDX		rtl.h	/^#define ASM_OPERANDS_OUTPUT_IDX(RTX) XINT ((RTX), / ;" macro 1 { }	{ XINT }
ASM_OPERANDS_SOURCE_FILE		rtl.h	/^#define ASM_OPERANDS_SOURCE_FILE(RTX) XSTR ((RTX),/ ;" macro 1 { error_for_asm }	{ XSTR }
ASM_OPERANDS_SOURCE_LINE		rtl.h	/^#define ASM_OPERANDS_SOURCE_LINE(RTX) XINT ((RTX),/ ;" macro 1 { error_for_asm }	{ XINT }
ASM_OPERANDS_TEMPLATE		rtl.h	/^#define ASM_OPERANDS_TEMPLATE(RTX) XSTR ((RTX), 0)/ ;" macro 1 { }	{ XSTR }
ASM_OUTPUT_DOUBLE		tm.h	/^#define ASM_OUTPUT_DOUBLE(FILE,VALUE)					\\/ ;" macro 1 { force_const_mem output_constant }	{ }
ASM_OUTPUT_DOUBLE_OPERAND		tm.h	/^#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)				\\/ ;" macro 1 { }	{ }
ASM_OUTPUT_FLOAT		tm.h	/^#define ASM_OUTPUT_FLOAT(FILE,VALUE)					\\/ ;" macro 1 { force_const_mem output_constant }	{ }
ASM_OUTPUT_FLOAT_OPERAND		tm.h	/^#define ASM_OUTPUT_FLOAT_OPERAND(FILE,VALUE)				\\/ ;" macro 1 { }	{ }
ATTR_ALLOC_LIST_SIZE		objc-actions.c	/^#define ATTR_ALLOC_LIST_SIZE	170/ ;" macro 1 { hash_add_attr }	{ }
AUTO_INC_DEC		flow.c	/^#define AUTO_INC_DEC/ ;" macro 1 { }	{ }
BASE		fold-const.c	/^#define BASE 256/ ;" macro 1 { div_and_round_double }	{ }
BLOCK_NUM		flow.c	/^#define BLOCK_NUM(INSN)  uid_block_number[INSN_UID/ ;" macro 1 { dump_flow_info find_basic_blocks life_analysis mark_set_1 mark_used_regs try_pre_increment_1 }	{ INSN_UID uid_block_number }
BUFSIZE		objc-actions.c	/^#define BUFSIZE		512/ ;" macro 1 { build_dispatch_table_initializer build_encode_expr build_ivar_list_initializer build_message_expr error_with_ivar error_with_method genPrototype init_objc objc_debug warn_with_method }	{ }
CALLER_SAVE_PROFITABLE		regs.h	/^#define CALLER_SAVE_PROFITABLE(REFS, CALLS)  (4 * / ;" macro 1 { find_free_reg find_reg }	{ }
CALL_EXPR_RTL		tree.h	/^#define CALL_EXPR_RTL(NODE) (*(struct rtx_def **) / ;" macro 1 { expand_expr preexpand_calls }	{ rtx_def }
CC_NOT_NEGATIVE		conditions.h	/^#define CC_NOT_NEGATIVE 4/ ;" macro 1 { alter_cond output_btst }	{ }
CC_NOT_POSITIVE		conditions.h	/^#define CC_NOT_POSITIVE 2/ ;" macro 1 { alter_cond output_btst }	{ }
CC_NO_OVERFLOW		conditions.h	/^#define CC_NO_OVERFLOW 010/ ;" macro 1 { alter_cond }	{ }
CC_REVERSED		conditions.h	/^#define CC_REVERSED 1/ ;" macro 1 { alter_cond }	{ }
CC_STATUS		conditions.h	/^typedef struct {int flags; rtx value1, value2; CC_/ ;" typedef 1 { }	{ }
CC_STATUS_INIT		conditions.h	/^#define CC_STATUS_INIT  \\/ ;" macro 1 { final final_scan_insn }	{ CC_STATUS_MDEP_INIT cc_status }
CC_STATUS_MDEP		conditions.h	/^#define CC_STATUS_MDEP int/ ;" macro 1 { }	{ }
CC_STATUS_MDEP_INIT		conditions.h	/^#define CC_STATUS_MDEP_INIT 0/ ;" macro 1 { CC_STATUS_INIT }	{ }
CC_Z_IN_N		conditions.h	/^#define CC_Z_IN_N 040/ ;" macro 1 { alter_cond }	{ }
CC_Z_IN_NOT_N		conditions.h	/^#define CC_Z_IN_NOT_N 020/ ;" macro 1 { alter_cond output_btst }	{ }
CEIL		stor-layout.c	/^#define CEIL(x,y) (((x) + (y) - 1) \/ (y))/ ;" macro 1 { layout_record layout_union }	{ }
CHARS		dbxout.c	/^#define CHARS(N) (current_sym_nchars += (N))/ ;" macro 1 { dbxout_args dbxout_type dbxout_type_name }	{ current_sym_nchars }
CHAR_TYPE_SIZE		c-decl.c	/^#define CHAR_TYPE_SIZE BITS_PER_UNIT/ ;" macro 1 { init_decl_processing }	{ }
CHEAPER		cse.c	/^#define CHEAPER(X,Y)	\\/ ;" macro 1 { insert }	{ GET_CODE REGNO cse_basic_block_end cse_basic_block_start regno_first_uid regno_last_uid uid_cuid }
CLEAR		local-alloc.c	/^#define CLEAR(vector)  \\/ ;" macro 1 { local_alloc }	{ }
CLEAR_ALLOCNO_LIVE		global-alloc.c	/^#define CLEAR_ALLOCNO_LIVE(I) \\/ ;" macro 1 { mark_reg_death }	{ INT_BITS allocnos_live }
CLEAR_HARD_REG_BIT		hard-reg-set.h	/^#define CLEAR_HARD_REG_BIT(SET, BIT)  \\/ ;" macro 1 { clear_reg_live mark_life mark_reg_death }	{ }
CLEAR_HARD_REG_SET		hard-reg-set.h	/^#define CLEAR_HARD_REG_SET(TO) ((TO) = 0)/ ;" macro 1 { find_reg global_alloc init_reg_sets_1 post_mark_life stupid_find_reg }	{ }
CODE_LABEL_NUMBER		rtl.h	/^#define CODE_LABEL_NUMBER(INSN)	((INSN)->fld[3].rt/ ;" macro 1 { final_scan_insn output_addr_const output_asm_label }	{ }
COMPL_HARD_REG_SET		hard-reg-set.h	/^#define COMPL_HARD_REG_SET(TO, FROM) ((TO) = ~(FRO/ ;" macro 1 { }	{ }
CONFLICTP		global-alloc.c	/^#define CONFLICTP(I, J) \\/ ;" macro 1 { dump_conflicts find_reg }	{ INT_BITS allocno_row_words conflicts }
CONST0_RTX		rtl.h	/^#define CONST0_RTX(MODE) \\/ ;" macro 1 { compare compare1 do_jump emit_cmp_insn }	{ GET_MODE_CLASS NULL_RTX const0_rtx dconst0_rtx fconst0_rtx }
CONSTANT_P		rtl.h	/^#define CONSTANT_P(X)   \\/ ;" macro 1 { access_parm_map block_alloc choose_reload_regs constrain_operands convert_move cse_insn decompose emit_library_call emit_move_insn equiv_constant expand_builtin expand_call expand_expr expand_inline_function find_addr_reg find_constant_term_loc find_equiv_reg find_reloads fold_rtx force_operand force_reg general_operand immediate_operand immune_p insert make_safe_from may_trap_p memory_address move_by_pieces move_movables nonimmediate_operand nonmemory_operand output_move_double plus_constant push_block push_reload regclass store_bit_field store_expr store_split_bit_field strength_reduce subst subst_indexed_address try_fold_cc0 }	{ GET_CODE }
CONSTANT_POOL_ADDRESS_P		rtl.h	/^#define CONSTANT_POOL_ADDRESS_P(RTX) ((RTX)->uncha/ ;" macro 1 { force_const_mem invariant_p }	{ }
CONSTRUCTOR_ELTS		tree.h	/^#define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND (NODE,/ ;" macro 1 { compare_constant_1 complete_array_type const_hash digest_init expand_expr output_addressed_constants output_constructor process_init_constructor record_constant_1 store_constructor }	{ TREE_OPERAND }
CONST_DOUBLE_CHAIN		real.h	/^#define CONST_DOUBLE_CHAIN(r) XEXP (r, 1)/ ;" macro 1 { clear_const_double_mem force_const_double_mem force_const_mem immed_double_const immed_real_const_1 }	{ XEXP }
CONST_DOUBLE_HIGH		real.h	/^#define CONST_DOUBLE_HIGH(r) XINT (r, 3)/ ;" macro 1 { immed_double_const output_addr_const output_move_double standard_68881_constant_p standard_sun_fpa_constant_p }	{ XINT }
CONST_DOUBLE_LOW		real.h	/^#define CONST_DOUBLE_LOW(r) XINT (r, 2)/ ;" macro 1 { decode_rtx_const fold_cc0 fold_rtx force_const_mem gen_lowpart immed_double_const immed_real_const_1 init_emit_once output_addr_const output_move_double standard_68881_constant_p standard_sun_fpa_constant_p }	{ XINT }
CONST_DOUBLE_MEM		real.h	/^#define CONST_DOUBLE_MEM(r) XEXP (r, 0)/ ;" macro 1 { clear_const_double_mem force_const_double_mem force_const_mem immed_double_const immed_real_const_1 init_emit_once }	{ XEXP }
CONTAINING_INSN		rtl.h	/^#define CONTAINING_INSN(RTX) ((RTX)->fld[2].rtx)/ ;" macro 1 { dump_flow_info life_analysis mark_label_ref verify_loop }	{ rtx }
CONTIN		dbxout.c	/^#define CONTIN  \\/ ;" macro 1 { dbxout_type sdbout_one_type }	{ DBX_CONTIN_LENGTH current_sym_nchars dbxout_continue }
COPY_HARD_REG_SET		hard-reg-set.h	/^#define COPY_HARD_REG_SET(TO, FROM) ((TO) = (FROM)/ ;" macro 1 { block_alloc find_free_reg find_reg global_conflicts init_reg_sets save_call_clobbered_regs stupid_find_reg }	{ }
COPY_PENALTY		loop.c	/^#define COPY_PENALTY  2/ ;" macro 1 { strength_reduce }	{ }
CPLUSPLUS		tm.h	/^#define CPLUSPLUS/ ;" macro 1 { }	{ }
CPP_PREDEFINES		tm.h	/^#define CPP_PREDEFINES "-Dmc68000 -DNeXT -Dunix -D/ ;" macro 1 { }	{ }
CPP_SPEC		tm.h	/^#define CPP_SPEC "%{bsd:-D__STRICT_BSD__} %{MD:-MD/ ;" macro 1 { }	{ }
C_TYPE_FIELDS_READONLY		c-tree.h	/^#define C_TYPE_FIELDS_READONLY(type) TYPE_SEP_UNIT/ ;" macro 1 { build_modify_expr c_expand_asm_operands finish_struct }	{ TYPE_SEP_UNIT type }
DBX_CONTIN_LENGTH		tm.h	/^#define DBX_CONTIN_LENGTH 0/ ;" macro 1 { CONTIN }	{ }
DBX_DEBUGGING_INFO		tm.h	/^#define DBX_DEBUGGING_INFO/ ;" macro 1 { }	{ }
DECL_ALIGN		tree.h	/^#define DECL_ALIGN(NODE) ((NODE)->decl.align)/ ;" macro 1 { assemble_variable expand_decl finish_struct layout_decl layout_record layout_union make_node prdeclmodeinfo }	{ decl }
DECL_ARGUMENTS		tree.h	/^#define DECL_ARGUMENTS(NODE) ((NODE)->decl.argumen/ ;" macro 1 { INTEGRATE_THRESHOLD assign_parms build_decl dbxout_function dump duplicate_decls expand_function_end expand_inline_function expand_return finish_function function_cannot_inline_p rest_of_compilation save_for_inline sdbout_begin_block sdbout_begin_function store_parm_decls }	{ decl }
DECL_ARG_TYPE		tree.h	/^#define DECL_ARG_TYPE(NODE) ((NODE)->decl.argument/ ;" macro 1 { assign_parms dbxout_parms dbxout_reg_parms expand_inline_function get_parm_info grokdeclarator sdbout_parms sdbout_reg_parms store_parm_decls }	{ decl }
DECL_ASSEMBLER_NAME		tree.h	/^#define DECL_ASSEMBLER_NAME(NODE) ((NODE)->decl.as/ ;" macro 1 { build_decl make_decl_rtl make_function_rtl }	{ decl }
DECL_BLOCK_SYMTAB_ADDRESS		tree.h	/^#define DECL_BLOCK_SYMTAB_ADDRESS(NODE) ((NODE)->d/ ;" macro 1 { duplicate_decls rest_of_compilation symout_block_symbols }	{ decl }
DECL_CONTEXT		tree.h	/^#define DECL_CONTEXT(NODE) ((NODE)->decl.context)/ ;" macro 1 { dump finish_function finish_struct init_function_start poplevel store_parm_decls }	{ decl }
DECL_FIELD_CONTEXT		tree.h	/^#define DECL_FIELD_CONTEXT(NODE) ((NODE)->decl.con/ ;" macro 1 { layout_record }	{ decl }
DECL_FRAME_SIZE		tree.h	/^#define DECL_FRAME_SIZE(NODE) ((NODE)->decl.frame_/ ;" macro 1 { expand_inline_function output_inline_function save_for_inline }	{ decl }
DECL_FUNCTION_CODE		tree.h	/^#define DECL_FUNCTION_CODE(NODE) ((enum built_in_f/ ;" macro 1 { build_function_call duplicate_decls expand_builtin expand_expr preexpand_calls pushdecl }	{ built_in_function decl }
DECL_INITIAL		tree.h	/^#define DECL_INITIAL(NODE) ((NODE)->decl.initial)/ ;" macro 1 { assemble_variable build_decl build_enumerator compile_file dbxout_function dbxout_symbol decl_constant_value default_conversion dump duplicate_decls expand_decl expand_decl_init expand_expr expand_inline_function finish_decl finish_function finish_struct fold grokfield make_decl_rtl objc_copy_list objc_debug poplevel redeclaration_error_message rest_of_compilation rest_of_decl_compilation sdbout_begin_block start_decl start_function store_init_value symout_block_symbols }	{ decl }
DECL_LANG_SPECIFIC		tree.h	/^#define DECL_LANG_SPECIFIC(NODE) ((NODE)->decl.lan/ ;" macro 1 { }	{ decl }
DECL_MODE		tree.h	/^#define DECL_MODE(NODE) ((NODE)->decl.mode)/ ;" macro 1 { build_conditional_expr build_decl decl_constant_value expand_assignment expand_decl expand_expr expand_function_start expand_increment expand_inline_function get_narrower get_unwidened layout_decl lookup_label make_decl_rtl make_function_rtl output_constructor prdeclmodeinfo store_constructor tail_recursion_args }	{ decl }
DECL_NAME		tree.h	/^#define DECL_NAME(NODE) ((NODE)->decl.name)/ ;" macro 1 { assemble_variable assign_parms build_component_ref build_decl build_function_call build_ivar_list_initializer build_unary_op check_for_full_enumeration_handling check_ivars copy_decl_tree copy_parm_decls dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_type dbxout_type_name dump duplicate_decls error_with_decl expand_call expand_goto_internal finish_struct genDeclaration generate_shared_structures grokparms incomplete_type_error is_ivar layout_record lookup_name_current_level mark_addressable output_constructor poplevel process_init_constructor pushdecl readonly_warning rest_of_compilation sdbout_end_epilogue sdbout_one_type sdbout_parms sdbout_record_type_name sdbout_reg_parms sdbout_symbol start_decl start_function store_parm_decls symout_block_symbols symout_record_field_names symout_record_fields symout_types warning_with_decl }	{ decl }
DECL_OFFSET		tree.h	/^#define DECL_OFFSET(NODE) ((NODE)->decl.offset)/ ;" macro 1 { assign_parms build_ivar_list_initializer build_unary_op dbxout_parms dbxout_reg_parms dbxout_type decode_addr_const dump expand_assignment expand_expr expand_inline_function layout_record layout_union output_constructor sdbout_one_type sdbout_parms sdbout_reg_parms store_constructor symout_block_symbols symout_record_fields }	{ decl }
DECL_PRINT_NAME		tree.h	/^#define DECL_PRINT_NAME(NODE) ((NODE)->decl.print_/ ;" macro 1 { announce_function build_decl error_with_decl init_function_start report_error_function warning_with_decl }	{ decl }
DECL_RESULT		tree.h	/^#define DECL_RESULT(NODE) ((NODE)->decl.result)/ ;" macro 1 { assign_parms c_expand_return dump duplicate_decls expand_function_end expand_function_start expand_inline_function expand_return finish_function init_function_start start_function }	{ decl }
DECL_RESULT_TYPE		tree.h	/^#define DECL_RESULT_TYPE(NODE) ((NODE)->decl.voffs/ ;" macro 1 { duplicate_decls expand_function_start expand_inline_function start_function }	{ decl }
DECL_RTL		tree.h	/^#define DECL_RTL(NODE) ((NODE)->decl.rtl)/ ;" macro 1 { assemble_external assemble_function assemble_variable assign_parms build_conditional_expr copy_decl_tree copy_parm_decls dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_type decode_addr_const duplicate_decls expand_anon_union_decl expand_call expand_decl expand_end_bindings expand_expr expand_function_end expand_function_start expand_inline_function expand_return function_cannot_inline_p label_rtx make_decl_rtl make_function_rtl put_var_into_stack rest_of_decl_compilation save_for_inline sdbout_parms sdbout_reg_parms sdbout_symbol setjmp_protect start_decl symout_block_symbols tail_recursion_args uninitialized_vars_warning validate_subtarget }	{ decl }
DECL_SAVED_INSNS		tree.h	/^#define DECL_SAVED_INSNS(NODE) ((NODE)->decl.saved/ ;" macro 1 { duplicate_decls expand_call expand_inline_function finish_function output_inline_function rest_of_compilation save_for_inline }	{ decl }
DECL_SET_FUNCTION_CODE		tree.h	/^#define DECL_SET_FUNCTION_CODE(NODE,VAL) ((NODE)->/ ;" macro 1 { builtin_function duplicate_decls }	{ decl }
DECL_SIZE		tree.h	/^#define DECL_SIZE(NODE) ((NODE)->decl.size)/ ;" macro 1 { assemble_variable build_conditional_expr dbxout_type dump duplicate_decls expand_assignment expand_decl expand_expr finish_decl finish_struct get_narrower get_unwidened layout_decl layout_record layout_union output_constructor prdeclmodeinfo sdbout_one_type store_constructor symout_record_fields truthvalue_conversion }	{ decl }
DECL_SIZE_UNIT		tree.h	/^#define DECL_SIZE_UNIT(NODE) ((NODE)->decl.size_un/ ;" macro 1 { assemble_variable build_conditional_expr build_ivar_list_initializer dbxout_type duplicate_decls encode_field_decl expand_assignment expand_decl expand_expr finish_struct get_narrower get_unwidened layout_decl layout_record layout_union make_node objc_copy_list output_constructor prdeclmodeinfo sdbout_one_type store_constructor symout_record_fields truthvalue_conversion }	{ decl }
DECL_SOURCE_FILE		tree.h	/^#define DECL_SOURCE_FILE(NODE) ((NODE)->decl.filen/ ;" macro 1 { assemble_variable copy_decl_tree dbxout_symbol define_label dump error_with_decl error_with_ivar expand_decl_init expand_inline_function init_function_start make_node output_inline_function pushdecl store_parm_decls warning_with_decl }	{ decl }
DECL_SOURCE_LINE		tree.h	/^#define DECL_SOURCE_LINE(NODE) ((NODE)->decl.linen/ ;" macro 1 { assemble_variable copy_decl_tree dbxout_symbol define_label dump error_with_decl error_with_ivar expand_decl_init expand_inline_function init_function_start lookup_label make_node output_inline_function poplevel pushdecl store_parm_decls warning_with_decl }	{ decl }
DECL_SYMTAB_INDEX		tree.h	/^#define DECL_SYMTAB_INDEX(NODE) ((NODE)->decl.bloc/ ;" macro 1 { }	{ decl }
DECL_VOFFSET		tree.h	/^#define DECL_VOFFSET(NODE) ((NODE)->decl.voffset) / ;" macro 1 { dump layout_record layout_union staticp }	{ decl }
DECL_VOFFSET_UNIT		tree.h	/^#define DECL_VOFFSET_UNIT(NODE) ((NODE)->decl.voff/ ;" macro 1 { dump layout_record layout_union make_node }	{ decl }
DEFTREECODE		tree.c	/^#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,/ ;" macro 1 { }	{ }
DEF_MACHMODE		rtl.c	/^#define DEF_MACHMODE(SYM, NAME, CLASS, SIZE, UNIT,/ ;" macro 1 { }	{ }
DEF_RTL_EXPR		rtl.c	/^#define DEF_RTL_EXPR(ENUM, NAME, FORMAT)   NAME ,/ ;" macro 1 { }	{ }
DOLLARS_IN_IDENTIFIERS		tm.h	/^#define DOLLARS_IN_IDENTIFIERS 1/ ;" macro 1 { }	{ }
DOUBLE_TYPE_SIZE		c-decl.c	/^#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)/ ;" macro 1 { init_decl_processing }	{ }
D_E		aux-output.c	/^#define D_E (2.718281828459045091)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_LOG10of2		aux-output.c	/^#define D_LOG10of2 (0.3010299956639811980)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_LOG10ofE		aux-output.c	/^#define D_LOG10ofE (0.4342944819032518167)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_LOG2of10		aux-output.c	/^#define D_LOG2of10 (3.321928024887362182)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_LOG2ofE		aux-output.c	/^#define D_LOG2ofE (1.442695040888963387)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_LOGEof10		aux-output.c	/^#define D_LOGEof10 (2.302585092994045901)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_LOGEof2		aux-output.c	/^#define D_LOGEof2 (0.6931471805599452862)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_PI		aux-output.c	/^#define D_PI (3.141592653589793116)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
D_SQRT2		aux-output.c	/^#define D_SQRT2 (1.414213562373095145)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
ENDFILE		objc-parse.y	/^#define ENDFILE -1  \/* token that represents end-o/ ;" macro 1 { yylex }	{ }
EXCHANGE		local-alloc.c	/^#define EXCHANGE(I1, I2)  \\/ ;" macro 1 { block_alloc }	{ }
FAKE_EXTEND_SAFE_P		combine.c	/^#define FAKE_EXTEND_SAFE_P(MODE, FROM) \\/ ;" macro 1 { simplify_and_const_int subst }	{ GET_CODE GET_MODE_SIZE }
FALSE		config.h	/^#define FALSE 0/ ;" macro 1 { }	{ }
FATAL_EXIT_CODE		config.h	/^#define FATAL_EXIT_CODE 33/ ;" macro 1 { Mtoplev }	{ }
FIRST_FUNCTION_INSN		rtl.h	/^#define FIRST_FUNCTION_INSN(RTX) ((RTX)->fld[2].rt/ ;" macro 1 { expand_inline_function }	{ rtx }
FIRST_LABELNO		rtl.h	/^#define FIRST_LABELNO(RTX) ((RTX)->fld[4].rtint)/ ;" macro 1 { expand_inline_function }	{ }
FIRST_PARM_INSN		rtl.h	/^#define FIRST_PARM_INSN(RTX) ((RTX)->fld[3].rtx)/ ;" macro 1 { output_inline_function save_for_inline }	{ rtx }
FIXED_BASE_PLUS_P		cse.c	/^#define FIXED_BASE_PLUS_P(X)					\\/ ;" macro 1 { fold_cc0 insert }	{ GET_CODE XEXP arg_pointer_rtx frame_pointer_rtx }
FLOAT_TYPE_SIZE		c-decl.c	/^#define FLOAT_TYPE_SIZE BITS_PER_WORD/ ;" macro 1 { init_decl_processing }	{ }
FORCE_TEXT		dbxout.c	/^#define FORCE_TEXT text_section ();/ ;" macro 1 { dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags }	{ text_section }
FUNCTION_ARGS_SIZE		rtl.h	/^#define FUNCTION_ARGS_SIZE(RTX) ((RTX)->fld[8].rti/ ;" macro 1 { expand_inline_function }	{ }
FUNCTION_ARG_PADDING		expr.h	/^#define FUNCTION_ARG_PADDING(mode, size)				\\/ ;" macro 1 { assign_parms emit_push_insn expand_call store_one_arg }	{ GET_CODE GET_MODE_BITSIZE INTVAL }
GEN_FCN		expr.h	/^#define GEN_FCN(CODE) (*insn_gen_function[(int) (C/ ;" macro 1 { emit_cmp_insn emit_move_insn emit_unop_insn expand_binop expand_increment expand_twoval_binop expand_unop gen_add2_insn gen_extend_insn gen_move_insn gen_sub2_insn store_bit_field }	{ }
GET_CODE		rtl.h	/^#define GET_CODE(RTX)		((enum rtx_code) ((RTX)->co/ ;" macro 1 { CONSTANT_P REG_P compare compare1 convert_move convert_to_mode copy_rtx dead_or_set_p do_jump do_jump_if_equal do_store_flag drop_through_at_end_p emit_block_move emit_jump_if_reachable emit_library_call emit_move_insn emit_nop emit_push_insn error_for_asm expand_builtin expand_call expand_decl expand_end_case expand_end_loop expand_expr expand_goto_internal expand_increment expand_return find_addr_reg force_operand may_trap_p move_block_from_reg move_block_to_reg move_by_pieces no_labels_between note_stores output_btst output_move_double prepare_call_address print_rtl print_rtx protect_from_queue push_block put_var_into_stack queued_subexp_p read_rtx refers_to_regno_p reg_mentioned_p reg_set_between_p reg_used_between_p rtx_addr_varies_p rtx_equal_p rtx_unstable_p rtx_varies_p store_constructor store_expr store_field store_one_arg tail_recursion_args target_for_arg (etc) }	{ rtx_code }
GET_MODE		rtl.h	/^#define GET_MODE(RTX)		((RTX)->mode)/ ;" macro 1 { ASM_OPERANDS_INPUT_MODE REG_NOTE_KIND assign_parms clear_storage compare convert_move convert_to_mode copy_rtx copy_to_mode_reg copy_to_reg copy_to_suggested_reg do_jump do_store_flag eliminate_constant_term emit_block_move emit_cmp_insn emit_library_call emit_move_insn emit_push_insn emit_unop_insn enqueue_insn expand_anon_union_decl expand_binop expand_builtin expand_call expand_dec expand_divmod expand_end_case expand_expr expand_float expand_inc expand_twoval_binop expand_unop extract_bit_field extract_fixed_bit_field fixup_memory_subreg fixup_stack_1 fixup_var_refs_1 force_not_mem force_operand gen_move_insn may_trap_p negate_rtx optimize_bit_field plus_constant prepare_call_address print_rtx protect_from_queue put_var_into_stack refers_to_regno_p reg_overlap_mentioned_p rtx_addr_varies_p rtx_equal_p stabilize standard_68881_constant_p standard_sun_fpa_constant_p store_bit_field store_constructor store_expr store_fixed_bit_field (etc) }	{ }
GET_MODE_ALIGNMENT		stor-layout.c	/^#define GET_MODE_ALIGNMENT(MODE)   \\/ ;" macro 1 { layout_decl layout_type }	{ GET_MODE_UNIT_SIZE MAX MIN }
GET_MODE_BITSIZE		rtl.h	/^#define GET_MODE_BITSIZE(MODE)  (BITS_PER_UNIT * m/ ;" macro 1 { FUNCTION_ARG_PADDING GET_MODE_MASK MAX_FIXED_MODE_SIZE assign_parms compare compare1 convert_move do_store_flag emit_block_move emit_cmp_insn emit_push_insn equiv_constant expand_assignment expand_call expand_end_case expand_expr expand_fix expand_float expand_mult_add expand_shift extract_bit_field extract_fixed_bit_field find_reloads_toplev fixup_var_refs_1 fold_cc0 fold_rtx layout_decl layout_type move_movables negate_rtx optimize_bit_field simplify_and_const_int simplify_set_cc0_and store_bit_field store_constructor store_fixed_bit_field subst }	{ mode_size }
GET_MODE_CLASS		rtl.h	/^#define GET_MODE_CLASS(MODE)		(mode_class[(int)(MO/ ;" macro 1 { CONST0_RTX agg_mode combine_movables compare compare1 convert_move emit_cmp_insn expand_binop expand_twoval_binop expand_unop fold_cc0 fold_rtx jump_back_p layout_type may_trap_p }	{ mode_class }
GET_MODE_MASK		rtl.h	/^#define GET_MODE_MASK(MODE)  \\/ ;" macro 1 { fold_rtx gen_lowpart simplify_and_const_int subst }	{ GET_MODE_BITSIZE HOST_BITS_PER_INT }
GET_MODE_NAME		rtl.h	/^#define GET_MODE_NAME(MODE)		(mode_name[(int)(MODE/ ;" macro 1 { print_rtx read_rtx }	{ mode_name }
GET_MODE_SIZE		rtl.h	/^#define GET_MODE_SIZE(MODE)		(mode_size[(int)(MODE/ ;" macro 1 { FAKE_EXTEND_SAFE_P access_parm_map agg_mode alter_reg assign_parms assign_stack_local choose_reload_regs convert_to_mode cse_insn dbxout_parms dbxout_reg_parms decompose do_store_flag do_tablejump eliminate_frame_pointer emit_library_call emit_move_insn emit_push_insn equiv_constant expand_call expand_float expand_inline_function expand_shift extract_bit_field extract_fixed_bit_field find_dummy_reload find_inc_amount find_reloads find_reloads_toplev fixup_memory_subreg fold_rtx force_const_mem gen_highpart gen_lowpart gen_lowpart_for_combine insert_regs invalidate layout_decl layout_type mark_used_regs move_block_from_reg move_block_to_reg move_by_pieces move_by_pieces_1 move_by_pieces_ninsns note_addr_stored optimize_bit_field push_reload put_var_into_stack refers_to_mem_p reload sdbout_parms sdbout_reg_parms simplify_and_const_int store_bit_field store_fixed_bit_field store_one_arg store_split_bit_field subreg_lowpart_p subst (etc) }	{ mode_size }
GET_MODE_UNIT_SIZE		rtl.h	/^#define GET_MODE_UNIT_SIZE(MODE)	(mode_unit_size[(/ ;" macro 1 { GET_MODE_ALIGNMENT gen_lowpart insert_call_saves }	{ mode_unit_size }
GET_MODE_WIDER_MODE		rtl.h	/^#define GET_MODE_WIDER_MODE(MODE)	(mode_wider_mode/ ;" macro 1 { expand_expr extract_bit_field store_bit_field }	{ mode_wider_mode }
GET_NOTE_INSN_NAME		rtl.h	/^#define GET_NOTE_INSN_NAME(NOTE_CODE) (note_insn_n/ ;" macro 1 { print_rtx }	{ note_insn_name }
GET_NUM_ELEM		rtl.h	/^#define GET_NUM_ELEM(RTVEC)		((RTVEC)->num_elem)/ ;" macro 1 { }	{ }
GET_REG_NOTE_NAME		rtl.h	/^#define GET_REG_NOTE_NAME(MODE) (reg_note_name[(in/ ;" macro 1 { print_rtx }	{ reg_note_name }
GET_RTX_FORMAT		rtl.h	/^#define GET_RTX_FORMAT(CODE)		(rtx_format[(int)(CO/ ;" macro 1 { alter_frame_pointer_addresses block_alloc can_jump_into_range_p canon_hash canon_reg copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared count_nonfixed_reads count_occurrences exp_equiv_p find_inc_amount find_mem_givs find_reloads_address_1 find_reloads_toplev find_use_as_address fixup_stack_1 fixup_var_refs_1 fold_rtx forget_volatility gen_rtx inequality_comparisons_p invariant_p invert_exp mark_jump_label mark_label_ref mark_used_regs may_trap_p mention_regs move_deaths move_deaths_2 only_reg_use_p operands_match_p print_rtx read_rtx record_address_regs redirect_exp refers_to_mem_p refers_to_p refers_to_regno_p reg_mentioned_p reg_scan_mark_refs replace_call_address replace_regs restore_reg_data_1 rtx_addr_varies_p rtx_cost rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p rtx_unstable_p rtx_varies_p set_preference stupid_mark_refs subst subst_reg_equivs use_crosses_set_p volatile_refs_p (etc) }	{ rtx_format }
GET_RTX_LENGTH		rtl.h	/^#define GET_RTX_LENGTH(CODE)		(rtx_length[(int)(CO/ ;" macro 1 { alter_frame_pointer_addresses can_jump_into_range_p canon_hash canon_reg copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared count_nonfixed_reads count_occurrences exp_equiv_p find_inc_amount find_mem_givs find_reloads_address_1 find_reloads_toplev find_use_as_address fixup_stack_1 fixup_var_refs_1 fold_rtx forget_volatility gen_rtx invariant_p invert_exp mark_jump_label mark_label_ref mark_used_regs may_trap_p mention_regs move_deaths move_deaths_2 only_reg_use_p operands_match_p print_rtx read_rtx record_address_regs redirect_exp refers_to_mem_p refers_to_p refers_to_regno_p reg_mentioned_p reg_scan_mark_refs replace_call_address replace_regs restore_reg_data_1 rtx_addr_varies_p rtx_alloc rtx_cost rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p rtx_unstable_p rtx_varies_p save_for_inline stupid_mark_refs subst subst_reg_equivs try_fold_cc0 use_crosses_set_p volatile_refs_p (etc) }	{ rtx_length }
GET_RTX_NAME		rtl.h	/^#define GET_RTX_NAME(CODE)		(rtx_name[(int)(CODE)]/ ;" macro 1 { print_rtx read_rtx }	{ rtx_name }
GO_IF_HARD_REG_SUBSET		hard-reg-set.h	/^#define GO_IF_HARD_REG_SUBSET(X,Y,TO) if (0 == ((X/ ;" macro 1 { init_reg_sets reg_class_subset_p }	{ }
HARD_REG_SET		hard-reg-set.h	/^typedef long HARD_REG_SET[HARD_REG_SET_LONGS];/ ;" typedef 1 { block_alloc check_frame_pointer_required find_free_reg find_reg global_alloc init_reg_sets post_mark_life stupid_find_reg stupid_life_analysis }	{ }
HARD_REG_SET_LONGS		hard-reg-set.h	/^#define HARD_REG_SET_LONGS \\/ ;" macro 1 { AND_COMPL_HARD_REG_SET AND_HARD_REG_SET CLEAR_HARD_REG_SET COMPL_HARD_REG_SET COPY_HARD_REG_SET GO_IF_HARD_REG_SUBSET IOR_COMPL_HARD_REG_SET IOR_HARD_REG_SET SET_HARD_REG_SET }	{ HOST_BITS_PER_LONG }
HASH		cse.c	/^#define HASH(x, m) (canon_hash (x, m) % NBUCKETS)/ ;" macro 1 { cse_insn invalidate }	{ NBUCKETS canon_hash }
HASHBITS		tree.c	/^#define HASHBITS 30/ ;" macro 1 { canon_hash const_hash const_hash_rtx get_identifier }	{ }
HASHFUNCTION		objc-actions.c	/^#define HASHFUNCTION(key)	((int)key >> 2) 	\/* divi/ ;" macro 1 { hash_enter }	{ }
HASHREG		cse.c	/^#define HASHREG(RTX) \\/ ;" macro 1 { cse_insn }	{ NBUCKETS REGNO reg_qty }
HASH_ALLOC_LIST_SIZE		objc-actions.c	/^#define HASH_ALLOC_LIST_SIZE	170/ ;" macro 1 { hash_enter }	{ }
HAVE_MACHINE_MODES		rtl.h	/^#define HAVE_MACHINE_MODES/ ;" macro 1 { }	{ }
HOST_BITS_PER_CHAR		config.h	/^#define HOST_BITS_PER_CHAR 8/ ;" macro 1 { }	{ }
HOST_BITS_PER_INT		config.h	/^#define HOST_BITS_PER_INT 32/ ;" macro 1 { GET_MODE_MASK INT_BITS REGSET_ELT_BITS compare_constants cse_insn equiv_constant exact_log2 expand_expr expand_fix extract_fixed_bit_field fixup_unsigned_type floor_log2 fold fold_cc0 fold_convert fold_rtx force_fit_type global_conflicts integer_all_onesp make_signed_type negate_rtx output_constructor real_value_from_int_cst save_call_clobbered_regs store_fixed_bit_field subrange_p subst try_combine try_distrib yylex }	{ }
HOST_BITS_PER_LONG		config.h	/^#define HOST_BITS_PER_LONG 32/ ;" macro 1 { CLEAR_HARD_REG_BIT HARD_REG_SET_LONGS SET_HARD_REG_BIT TEST_HARD_REG_BIT }	{ }
HOST_BITS_PER_SHORT		config.h	/^#define HOST_BITS_PER_SHORT 16/ ;" macro 1 { }	{ }
IDENTIFIER_ERROR_LOCUS		c-tree.h	/^#define IDENTIFIER_ERROR_LOCUS(NODE)	\\/ ;" macro 1 { }	{ lang_identifier }
IDENTIFIER_GLOBAL_VALUE		c-tree.h	/^#define IDENTIFIER_GLOBAL_VALUE(NODE)	\\/ ;" macro 1 { lookup_name lookup_name_current_level pushdecl }	{ lang_identifier }
IDENTIFIER_IMPLICIT_DECL		c-tree.h	/^#define IDENTIFIER_IMPLICIT_DECL(NODE)	\\/ ;" macro 1 { duplicate_decls implicitly_declare pushdecl }	{ lang_identifier }
IDENTIFIER_LABEL_VALUE		c-tree.h	/^#define IDENTIFIER_LABEL_VALUE(NODE)	\\/ ;" macro 1 { lookup_label poplevel }	{ lang_identifier }
IDENTIFIER_LENGTH		tree.h	/^#define IDENTIFIER_LENGTH(NODE) ((NODE)->identifie/ ;" macro 1 { add_objc_string build_keyword_selector build_message_selector_pool build_selector_translation_table dbxout_reg_parms dbxout_symbol dbxout_tags dbxout_type dbxout_type_name get_class_reference get_identifier get_super_receiver objc_debug symout_block_symbols symout_block_tags symout_enum_value_names symout_enum_values symout_record_field_names symout_record_fields }	{ identifier }
IDENTIFIER_LOCAL_VALUE		c-tree.h	/^#define IDENTIFIER_LOCAL_VALUE(NODE)	\\/ ;" macro 1 { lookup_name lookup_name_current_level poplevel pushdecl }	{ lang_identifier }
IDENTIFIER_POINTER		tree.h	/^#define IDENTIFIER_POINTER(NODE) ((NODE)->identifi/ ;" macro 1 { actualparameterlist add_class_method add_instance_method assemble_variable assign_parms build_component_ref build_decl build_enumerator build_ivar_chain build_keyword_selector build_message_expr build_message_selector_pool build_unary_op check_duplicates check_for_full_enumeration_handling check_methods compiling_a_method dbxout_type dump dump_interface encode_aggregate encode_pointer error_with_decl expand_call expand_goto_internal finish_class finish_objc genDeclaration genDeclarator genMethodDecl gen_declspecs get_class_reference get_identifier get_super_receiver grokdeclarator grokparms implicitly_declare incomplete_type_error is_public lookup_tag mark_addressable objc_debug output_constructor parmlist_tags_warning poplevel pushdecl readonly_warning reallyStartMethod rest_of_compilation start_class start_decl start_enum start_struct store_parm_decls symout_block_symbols symout_block_tags symout_enum_value_names symout_record_field_names symout_types synth_id_with_class_suffix (etc) }	{ identifier }
INC_MODE		optabs.c	/^#define INC_MODE(MODE) (enum machine_mode) ((int)(/ ;" macro 1 { emit_cmp_insn expand_binop expand_twoval_binop expand_unop }	{ machine_mode }
INIT_PRAGMA_BUF_SIZE		objc-parse.y	/^#define INIT_PRAGMA_BUF_SIZE	80/ ;" macro 1 { do_pragma }	{ }
INSN_CODE		rtl.h	/^#define INSN_CODE(INSN) ((INSN)->fld[4].rtint)/ ;" macro 1 { do_cross_jump eliminate_frame_pointer final_scan_insn invert_jump jump_optimize make_insn_raw make_jump_insn_raw optimize_bit_field recog_memoized redirect_jump save_for_inline try_combine try_distrib }	{ }
INSN_CUID		cse.c	/^#define INSN_CUID(INSN) (uid_cuid[INSN_UID (INSN)]/ ;" macro 1 { combine_instructions cse_main move_deaths move_deaths_2 record_dead_and_set_regs try_combine try_distrib use_crosses_set_p }	{ INSN_UID uid_cuid }
INSN_DELETED_P		rtl.h	/^#define INSN_DELETED_P(INSN) ((INSN)->volatil)/ ;" macro 1 { delete_for_peephole delete_insn final_scan_insn jump_optimize next_nondeleted_insn propagate_block }	{ }
INSN_LUID		loop.c	/^#define INSN_LUID(INSN) (uid_luid[INSN_UID (INSN)]/ ;" macro 1 { can_jump_into_range_p ignore_some_movables labels_in_range_p loop_optimize loop_reg_used_before_p move_movables record_giv scan_loop strength_reduce verify_loop }	{ INSN_UID uid_luid }
INSN_SUID		stupid.c	/^#define INSN_SUID(INSN) (uid_suid[INSN_UID (INSN)]/ ;" macro 1 { MARK_LIVE_AFTER stupid_life_analysis stupid_mark_refs }	{ INSN_UID uid_suid }
INSN_UID		rtl.h	/^#define INSN_UID(INSN)	((INSN)->fld[0].rtint)/ ;" macro 1 { BLOCK_NUM INSN_CUID INSN_LUID INSN_SUID INSN_VOLATILE can_eliminate_biv_p check_dbra_loop check_eliminate_biv combine_instructions cse_end_of_basic_block cse_main dump_flow_info emit_barrier emit_barrier_after emit_label emit_label_after emit_note emit_note_after expand_goto_internal expand_inline_function find_basic_blocks find_equiv_reg fixup_gotos flow_analysis force_movables jump_optimize last_use_this_basic_block loop_optimize make_insn_raw make_jump_insn_raw mark_label_ref move_movables print_rtx record_giv reg_scan restore_reg_data save_for_inline scan_loop strength_reduce stupid_life_analysis verify_loop }	{ }
INSN_VOLATILE		flow.c	/^#define INSN_VOLATILE(INSN) uid_volatile[INSN_UID / ;" macro 1 { life_analysis mark_used_regs propagate_block }	{ INSN_UID uid_volatile }
INTEGRATE_THRESHOLD		integrate.c	/^#define INTEGRATE_THRESHOLD(DECL) \\/ ;" macro 1 { function_cannot_inline_p }	{ DECL_ARGUMENTS list_length }
INTVAL		rtl.h	/^#define INTVAL(RTX) ((RTX)->fld[0].rtint)/ ;" macro 1 { addr_overlap_p basic_induction_var canon_hash check_dbra_loop compare compare1 copy_rtx_and_substitute cse_insn dbxout_parms dbxout_reg_parms dbxout_symbol decode_rtx_const do_jump do_jump_if_equal eliminate_biv eliminate_constant_term emit_block_move emit_cmp_insn emit_push_insn equiv_constant expand_divmod expand_end_case expand_expr expand_increment expand_mult expand_shift find_use_as_address fixup_var_refs_1 fold_cc0 fold_out_const_cc0 fold_rtx force_operand gen_lowpart gen_rtx general_induction_var get_integer_term get_structure_value_addr init_emit_once invalidate make_tree mark_used_regs negate_rtx optimize_bit_field output_btst plus_constant product_cheap_p record_giv refers_to_mem_p reg_mentioned_p round_push sdbout_parms sdbout_reg_parms sdbout_symbol store_fixed_bit_field store_one_arg store_split_bit_field strength_reduce subst symout_block_symbols target_for_arg (etc) }	{ }
INT_BITS		global-alloc.c	/^#define INT_BITS HOST_BITS_PER_INT/ ;" macro 1 { ALLOCNO_LIVE_P CLEAR_ALLOCNO_LIVE CONFLICTP SET_ALLOCNO_LIVE SET_CONFLICT global_alloc }	{ HOST_BITS_PER_INT }
INT_CST_LT		tree.h	/^#define INT_CST_LT(A, B)  \\/ ;" macro 1 { expand_end_case fold grokdeclarator int_fits_type_p shorten_compare tree_int_cst_lt }	{ TREE_INT_CST_HIGH TREE_INT_CST_LOW }
INT_CST_LT_UNSIGNED		tree.h	/^#define INT_CST_LT_UNSIGNED(A, B)  \\/ ;" macro 1 { fold int_fits_type_p shorten_compare tree_int_cst_lt }	{ TREE_INT_CST_HIGH TREE_INT_CST_LOW }
INT_TYPE_SIZE		c-decl.c	/^#define INT_TYPE_SIZE BITS_PER_WORD/ ;" macro 1 { init_decl_processing }	{ }
IOR_COMPL_HARD_REG_SET		hard-reg-set.h	/^#define IOR_COMPL_HARD_REG_SET(TO, FROM) ((TO) |= / ;" macro 1 { find_free_reg find_reg stupid_find_reg }	{ }
IOR_HARD_REG_SET		hard-reg-set.h	/^#define IOR_HARD_REG_SET(TO, FROM) ((TO) |= (FROM)/ ;" macro 1 { block_alloc find_free_reg find_reg init_reg_sets post_mark_life record_conflicts record_one_conflict stupid_find_reg stupid_life_analysis }	{ }
JUMP_LABEL		rtl.h	/^#define JUMP_LABEL(INSN)   ((INSN)->fld[7].rtx)/ ;" macro 1 { check_dbra_loop cse_insn delete_insn do_cross_jump eliminate_frame_pointer find_cross_jump follow_jumps invert_jump jump_back_p jump_optimize loop_skip_over make_jump_insn_raw mark_jump_label redirect_jump }	{ rtx }
KNOWN_TYPE_TAG		sdbout.c	/^#define KNOWN_TYPE_TAG(type) (char *)(TYPE_SYMTAB_/ ;" macro 1 { plain_type_1 sdbout_one_type sdbout_record_type_name }	{ TYPE_SYMTAB_ADDRESS type }
LABEL_NEXTREF		rtl.h	/^#define LABEL_NEXTREF(REF) ((REF)->fld[1].rtx)/ ;" macro 1 { dump_flow_info life_analysis mark_label_ref verify_loop }	{ rtx }
LABEL_NUSES		rtl.h	/^#define LABEL_NUSES(LABEL) ((LABEL)->fld[4].rtint)/ ;" macro 1 { check_dbra_loop cse_basic_block cse_insn delete_insn do_cross_jump gen_label_rtx invert_jump jump_optimize loop_skip_over mark_jump_label redirect_jump tension_vector_labels }	{ }
LABEL_REFS		rtl.h	/^#define LABEL_REFS(LABEL) ((LABEL)->fld[4].rtx)/ ;" macro 1 { dump_flow_info find_basic_blocks life_analysis mark_label_ref verify_loop }	{ rtx }
LAST_LABELNO		rtl.h	/^#define LAST_LABELNO(RTX) ((RTX)->fld[5].rtint)/ ;" macro 1 { expand_inline_function }	{ }
LIBCALL_BENEFIT		loop.c	/^#define LIBCALL_BENEFIT 15/ ;" macro 1 { strength_reduce }	{ }
LIB_SPEC		tm.h	/^#define LIB_SPEC "%{!p:%{!pg:-lc}}%{p:-lsys_p}%{pg/ ;" macro 1 { }	{ }
LINE_NUMBER		rtl.h	/^#define LINE_NUMBER NOTE/ ;" macro 1 { }	{ }
LINK_SPEC		tm.h	/^#define LINK_SPEC "%{Z} %{M} \\/ ;" macro 1 { }	{ }
LOG_LINKS		rtl.h	/^#define LOG_LINKS(INSN)		((INSN)->fld[5].rtx)/ ;" macro 1 { add_links combine_instructions make_insn_raw make_jump_insn_raw mark_set_1 remove_links save_for_inline try_combine unshare_all_rtl }	{ rtx }
LONG_DOUBLE_TYPE_SIZE		c-decl.c	/^#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)/ ;" macro 1 { init_decl_processing }	{ }
LONG_LONG_TYPE_SIZE		c-decl.c	/^#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)/ ;" macro 1 { init_decl_processing }	{ }
LONG_TYPE_SIZE		c-decl.c	/^#define LONG_TYPE_SIZE BITS_PER_WORD/ ;" macro 1 { init_decl_processing }	{ }
MACH_MAKE_DEPEND		tm.h	/^#define MACH_MAKE_DEPEND/ ;" macro 1 { }	{ }
MARK_LIVE_AFTER		stupid.c	/^#define MARK_LIVE_AFTER(INSN,REGNO)  \\/ ;" macro 1 { stupid_mark_refs }	{ INSN_SUID REGNO SET_HARD_REG_BIT after_insn_hard_regs }
MATCHES		reload.c	/^#define MATCHES(x, y) (x == y || (x != 0 && GET_CO/ ;" macro 1 { push_reload }	{ GET_CODE rtx_equal_p }
MAX		c-decl.c	/^#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))/ ;" macro 1 { GET_MODE_ALIGNMENT finish_struct layout_decl layout_record layout_type layout_union }	{ }
MAXNAMLEN		symout.c	/^#define MAXNAMLEN 1024/ ;" macro 1 { symout_finish }	{ }
MAX_FIXED_MODE_SIZE		stor-layout.c	/^#define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (DImo/ ;" macro 1 { agg_mode }	{ GET_MODE_BITSIZE }
MAX_HASH_TABLE		tree.c	/^#define MAX_HASH_TABLE 1009/ ;" macro 1 { const_hash get_identifier get_or_assign_label }	{ }
MAX_HASH_VALUE		objc-parse.y	/^#define MAX_HASH_VALUE      95     \/* for the perf/ ;" macro 1 { is_reserved_word }	{ }
MAX_PARMREG		rtl.h	/^#define MAX_PARMREG(RTX) ((RTX)->fld[6].rtint)/ ;" macro 1 { }	{ }
MAX_REGNUM		rtl.h	/^#define MAX_REGNUM(RTX) ((RTX)->fld[7].rtint)/ ;" macro 1 { expand_inline_function }	{ }
MAX_RELOADS		reload.h	/^#define MAX_RELOADS (2 * MAX_RECOG_OPERANDS * (MAX/ ;" macro 1 { choose_reload_regs }	{ }
MAX_RTX_HASH_TABLE		varasm.c	/^#define MAX_RTX_HASH_TABLE 61/ ;" macro 1 { const_hash_rtx }	{ }
MAX_UNDO		combine.c	/^#define MAX_UNDO 10/ ;" macro 1 { SUBST SUBST_INT simplify_set_cc0_and undo_all }	{ }
MAX_WORD_LENGTH		objc-parse.y	/^#define MAX_WORD_LENGTH     15     \/* maximum size/ ;" macro 1 { is_reserved_word }	{ }
MEM_IN_STRUCT_P		rtl.h	/^#define MEM_IN_STRUCT_P(RTX) ((RTX)->in_struct)/ ;" macro 1 { assign_parms canon_hash change_address cse_insn expand_decl expand_expr invariant_p make_decl_rtl note_addr_stored note_mem_written put_var_into_stack stabilize store_field }	{ }
MEM_VOLATILE_P		rtl.h	/^#define MEM_VOLATILE_P(RTX) ((RTX)->volatil)/ ;" macro 1 { alter_frame_pointer_addresses alter_subreg assign_parms canon_hash change_address convert_move convert_to_mode cse_insn expand_asm_operands expand_decl expand_expr find_equiv_reg gen_lowpart_for_combine general_operand invariant_p jump_optimize make_decl_rtl volatile_refs_p }	{ }
METHOD_DEF		objc-actions.c	/^#define METHOD_DEF 0/ ;" macro 1 { comp_method_with_proto getArgTypeList }	{ }
METHOD_REF		objc-actions.c	/^#define METHOD_REF 1/ ;" macro 1 { build_message_expr comp_proto_with_proto }	{ }
MIN		c-decl.c	/^#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))/ ;" macro 1 { GET_MODE_ALIGNMENT SHORT_TYPE_SIZE dump fixup_memory_subreg layout_record layout_union optimize_bit_field output_constructor skip }	{ }
MIN_HASH_VALUE		objc-parse.y	/^#define MIN_HASH_VALUE      9      \/* range of the/ ;" macro 1 { }	{ }
MIN_WORD_LENGTH		objc-parse.y	/^#define MIN_WORD_LENGTH     2      \/* minimum size/ ;" macro 1 { is_reserved_word }	{ }
MOVE_RATIO		expr.c	/^#define MOVE_RATIO 2/ ;" macro 1 { emit_block_move emit_push_insn }	{ }
MULT_BENEFIT		loop.c	/^#define MULT_BENEFIT  4/ ;" macro 1 { general_induction_var }	{ }
Mtoplev		toplev.c	/^main (argc, argv, envp)/ ;" function 367 { }	{ FATAL_EXIT_CODE NUM_TREE_CODES OVERRIDE_OPTIONS SUCCESS_EXIT_CODE __VERSION__ asm_file_name combine_dump compile_file cse_dump dbr_sched_dump doing_objc_thang dump_base_name error errorcount extra_warnings f_options fix_register flag_short_enums flag_signed_char float_signal flow_dump gen_declaration get_obstack_code global_reg_dump id_clash_len inhibit_warnings init_reg_sets init_reg_sets_1 initial_optimize_flag jump2_opt_dump jump_opt_dump lang_decode_option language_string local_reg_dump loop_dump maybepermanent_obstack momentary_obstack obey_regdecls obstack_code_name optimize pedantic permanent_obstack pipe_closed print_target_switch_defaults profile_block_flag profile_flag progname quiet_flag rtl_dump save_argc save_argv set_target_switch sorrycount string sym_file_name target_flags temporary_obstack tree_code_name tree_node_count tree_node_counter (etc) }
NBUCKETS		cse.c	/^#define NBUCKETS 31/ ;" macro 1 { HASH HASHREG cse_insn insert invalidate invalidate_memory lookup_as_function new_basic_block remove_invalid_refs use_related_value }	{ }
NEXT_INSN		rtl.h	/^#define NEXT_INSN(INSN)	((INSN)->fld[2].rtx)/ ;" macro 1 { add_insn add_insn_after all_sets_invariant_p combine_movables consec_sets_invariant_p count_loop_regs_set cse_basic_block cse_end_of_basic_block cse_insn cse_main delete_for_peephole delete_insn delete_insn_forces delete_insns_since do_cross_jump emit_insn_after emit_insn_before emit_insns emit_jump_insn_before expand_binop expand_builtin expand_call expand_end_case expand_end_loop expand_inline_function expand_unop fixup_cleanups fixup_stack_slots fixup_var_refs_insns follow_jumps function_cannot_inline_p gen_sequence get_first_nonparm_insn jump_optimize labels_in_range_p loop_optimize loop_skip_over mark_jump_label move_movables next_insn next_label next_nondeleted_insn next_real_insn no_labels_between_p optimize_bit_field output_inline_function predecide_loop_entry print_rtl push_to_sequence reg_set_between_p reg_used_between_p reorder_insns restore_reg_data save_for_inline scan_loop set_last_insn skip_consec_insns strength_reduce try_fold_cc0 unshare_all_rtl (etc) }	{ rtx }
NORID		objc-parse.y	/^#define NORID RID_UNUSED/ ;" macro 1 { is_reserved_word }	{ }
NOTE_DECL_CODE		rtl.h	/^#define NOTE_DECL_CODE(INSN) ((INSN)->fld[4].rtint/ ;" macro 1 { }	{ }
NOTE_DECL_IDENTIFIER		rtl.h	/^#define NOTE_DECL_IDENTIFIER(INSN) ((INSN)->fld[6]/ ;" macro 1 { }	{ }
NOTE_DECL_NAME		rtl.h	/^#define NOTE_DECL_NAME(INSN) ((INSN)->fld[3].rtstr/ ;" macro 1 { }	{ }
NOTE_DECL_RTL		rtl.h	/^#define NOTE_DECL_RTL(INSN) ((INSN)->fld[5].rtx)/ ;" macro 1 { }	{ rtx }
NOTE_DECL_TYPE		rtl.h	/^#define NOTE_DECL_TYPE(INSN) ((INSN)->fld[7].rtint/ ;" macro 1 { }	{ }
NOTE_INSN_BLOCK_BEG		rtl.h	/^#define NOTE_INSN_BLOCK_BEG -2/ ;" macro 1 { expand_start_bindings final_scan_insn }	{ }
NOTE_INSN_BLOCK_END		rtl.h	/^#define NOTE_INSN_BLOCK_END -3/ ;" macro 1 { expand_end_bindings final_scan_insn }	{ }
NOTE_INSN_DELETED		rtl.h	/^#define NOTE_INSN_DELETED -1/ ;" macro 1 { alter_reg cse_insn expand_end_bindings expand_function_start expand_start_case final_scan_insn final_start_function find_basic_blocks init_function_start life_analysis propagate_block reload save_for_inline try_combine try_distrib try_pre_increment_1 }	{ }
NOTE_INSN_FUNCTION_BEG		rtl.h	/^#define NOTE_INSN_FUNCTION_BEG 0/ ;" macro 1 { expand_inline_function final_scan_insn init_function_start }	{ }
NOTE_INSN_FUNCTION_END		rtl.h	/^#define NOTE_INSN_FUNCTION_END -6/ ;" macro 1 { delete_insn expand_function_end expand_inline_function jump_optimize mark_jump_label save_for_inline }	{ }
NOTE_INSN_LOOP_BEG		rtl.h	/^#define NOTE_INSN_LOOP_BEG -4/ ;" macro 1 { cse_basic_block expand_start_loop final_scan_insn find_basic_blocks follow_jumps loop_optimize mark_jump_label verify_loop }	{ }
NOTE_INSN_LOOP_CONT		rtl.h	/^#define NOTE_INSN_LOOP_CONT -8/ ;" macro 1 { expand_loop_continue_here verify_loop }	{ }
NOTE_INSN_LOOP_END		rtl.h	/^#define NOTE_INSN_LOOP_END -5/ ;" macro 1 { cse_end_of_basic_block expand_end_loop final_scan_insn find_basic_blocks predecide_loop_entry verify_loop }	{ }
NOTE_INSN_SETJMP		rtl.h	/^#define NOTE_INSN_SETJMP -7/ ;" macro 1 { cse_end_of_basic_block expand_call propagate_block verify_loop }	{ }
NOTE_LINE_NUMBER		rtl.h	/^#define NOTE_LINE_NUMBER(INSN) ((INSN)->fld[4].rti/ ;" macro 1 { alter_reg cse_basic_block cse_end_of_basic_block cse_insn cse_main delete_insn expand_end_bindings expand_inline_function final_scan_insn final_start_function find_basic_blocks follow_jumps jump_optimize life_analysis loop_optimize mark_jump_label output_source_line predecide_loop_entry propagate_block save_for_inline try_combine try_distrib try_pre_increment_1 verify_loop }	{ }
NOTE_SOURCE_FILE		rtl.h	/^#define NOTE_SOURCE_FILE(INSN)  ((INSN)->fld[3].rt/ ;" macro 1 { alter_reg cse_insn expand_inline_function final_scan_insn find_basic_blocks life_analysis output_source_line propagate_block save_for_inline try_combine try_distrib try_pre_increment_1 }	{ }
NO_BENEFIT		loop.c	/^#define NO_BENEFIT    0/ ;" macro 1 { }	{ }
NO_DEFER_POP		expr.h	/^#define NO_DEFER_POP (inhibit_defer_pop += 1)/ ;" macro 1 { convert_move emit_library_call emit_push_insn expand_call expand_expr expand_start_stmt_expr store_one_arg }	{ inhibit_defer_pop }
NULL		c-decl.c	/^#define NULL 0/ ;" macro 1 { NULL_BINDING_LEVEL NULL_TREE actualparameterlist add_insn assign_parms build_binary_op_nodefault build_component_ref build_conditional_expr build_enumerator build_method_type build_unary_op copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared count_occurrences cpart cwalk dump emit_call_insn emit_insn emit_jump_insn expand_exit_loop_if_false expand_inline_function expand_start_cond finish_function finish_struct gen_inline_header_rtx gen_sequence grokfield init_decl_processing init_emit layout_record layout_union make_insn_raw make_jump_insn_raw print_rtl print_rtx process_init_constructor read_rtx report_error_function restore_reg_data_1 rtvec_alloc save_expr save_for_inline store_parm_decls walk wruid }	{ }
NULLT		objc-actions.c	/^#define NULLT	(tree) 0/ ;" macro 1 { add_class_reference add_objc_decls add_objc_string add_selector_reference build_category_initializer build_category_template build_class_template build_dispatch_table_initializer build_ivar_list_initializer build_ivar_list_template build_ivar_template build_keyword_decl build_message_expr build_message_selector_pool build_method_decl build_method_list_template build_method_template build_module_descriptor build_msg_pool_reference build_objc_selector_template build_objc_symtab_template build_private_template build_selector_translation_table build_shared_structure_initializer build_super_template check_duplicates continue_class define_decl finish_class finish_method_def forward_declare_categories genDeclaration genDeclarator generate_category generate_dispatch_table generate_dispatch_tables generate_forward_declaration_to_string_table generate_ivar_lists generate_ivars_list generate_objc_symtab_decl generate_shared_structures getArgTypeList get_class_reference get_super_receiver init_def_list init_module_descriptor init_objc_symtab lookup_class_method_static lookup_instance_method_static lookup_interface lookup_method reallyStartMethod start_method_def synth_forward_declarations synth_module_prologue }	{ tree }
NULL_BINDING_LEVEL		c-decl.c	/^#define NULL_BINDING_LEVEL (struct binding_level */ ;" macro 1 { init_decl_processing pushlevel }	{ NULL binding_level }
NULL_RTVEC		rtl.h	/^#define NULL_RTVEC (rtvec) 0/ ;" macro 1 { gen_rtvec gen_rtvec_v }	{ rtvec }
NULL_RTX		rtl.h	/^#define NULL_RTX (rtx) 0/ ;" macro 1 { CONST0_RTX }	{ rtx }
NULL_TREE		tree.h	/^#define NULL_TREE (tree) NULL/ ;" macro 1 { actualparameterlist build_conditional_expr build_decl build_function_call compile_file complete_array_type emit_case_nodes expand_asm_operands expand_decl expand_end_case expand_end_stmt_expr expand_return expand_start_bindings finish_decl finish_struct fold function_cannot_inline_p get_parm_info get_super_receiver grokdeclarator init_decl_processing is_ivar layout_record lookup_label lookup_tag lookup_tag_reverse objc_copy_list process_init_constructor push_parm_decl start_decl store_parm_decls }	{ NULL tree }
NUM_MACHINE_MODES		rtl.h	/^#define NUM_MACHINE_MODES (int) MAX_MACHINE_MODE/ ;" macro 1 { init_optab read_rtx }	{ }
NUM_RTX_CODE		rtl.h	/^#define NUM_RTX_CODE ((int)LAST_AND_UNUSED_RTX_COD/ ;" macro 1 { init_rtl read_rtx }	{ }
NUM_STORES		loop.c	/^#define NUM_STORES 10/ ;" macro 1 { note_addr_stored }	{ }
NUM_TREE_CODES		tree.h	/^#define NUM_TREE_CODES ((int)LAST_AND_UNUSED_TREE_/ ;" macro 1 { Mtoplev }	{ }
N_SLINE		final.c	/^#define	N_SLINE	0x44/ ;" macro 1 { output_source_line }	{ }
N_SO		symout.c	/^#define	N_SO 0x64/ ;" macro 1 { dbxout_init symout_init }	{ }
N_SOL		final.c	/^#define	N_SOL 0x84/ ;" macro 1 { dbxout_symbol output_source_line }	{ }
NeXT_ENCODE_DONT_INLINE_DEFS		objc-actions.c	/^#define NeXT_ENCODE_DONT_INLINE_DEFS	1/ ;" macro 1 { build_dispatch_table_initializer build_ivar_list_initializer }	{ }
NeXT_ENCODE_INLINE_DEFS		objc-actions.c	/^#define NeXT_ENCODE_INLINE_DEFS 	0/ ;" macro 1 { build_encode_expr encode_aggregate }	{ }
NeXT_OBJC		tm.h	/^#define NeXT_OBJC/ ;" macro 1 { }	{ }
NeXT_SELS_R_STRUCT_PTRS		objc-actions.c	/^#define NeXT_SELS_R_STRUCT_PTRS/ ;" macro 1 { }	{ }
OBJC_VERSION		objc-actions.c	/^#define OBJC_VERSION	1/ ;" macro 1 { init_module_descriptor }	{ }
OK_DEFER_POP		expr.h	/^#define OK_DEFER_POP (inhibit_defer_pop -= 1)/ ;" macro 1 { convert_move emit_library_call emit_push_insn expand_call expand_end_stmt_expr expand_expr }	{ inhibit_defer_pop }
OPT_STRCMP		objc-parse.y	/^#define OPT_STRCMP(opt) (!strncmp(opt, p, sizeof(o/ ;" macro 1 { do_pragma }	{ }
OVERRIDE_OPTIONS		tm.h	/^#define OVERRIDE_OPTIONS		\\/ ;" macro 1 { Mtoplev }	{ target_flags use_gdb_dbx_extensions warning write_symbols }
PATTERN		rtl.h	/^#define PATTERN(INSN)	((INSN)->fld[3].rtx)/ ;" macro 1 { add_links all_sets_invariant_p can_eliminate_biv_p check_dbra_loop check_eliminate_biv combine_instructions combine_movables condjump_p consec_sets_giv consec_sets_invariant_p constant_high_bytes count_loop_regs_set cse_end_of_basic_block cse_insn dead_or_set_p delete_insn delete_jump do_cross_jump do_jump eliminate_biv error_for_asm expand_end_loop expand_inline_function find_basic_blocks find_cross_jump fixup_stack_slots fixup_var_refs_insns force_movables gen_sequence invert_jump jump_back_p jump_optimize life_analysis loop_reg_used_before_p loop_skip_over make_insn_raw make_jump_insn_raw mark_used_regs move_movables predecide_loop_entry propagate_block record_dead_and_set_regs record_giv redirect_jump reg_set_between_p reg_used_between_p restore_reg_data save_for_inline scan_loop simplejump_p simplify_set_cc0_and strength_reduce stupid_life_analysis subst try_combine try_distrib try_fold_cc0 try_pre_increment try_pre_increment_1 unshare_all_rtl (etc) }	{ rtx }
POPSTACK		stmt.c	/^#define POPSTACK(STACK)					\\/ ;" macro 1 { expand_end_bindings expand_end_case expand_end_case_dummy expand_end_cond expand_end_else expand_end_loop }	{ nesting nesting_depth nesting_stack }
PRAGMA_BUF_SIZE_INCR		objc-parse.y	/^#define PRAGMA_BUF_SIZE_INCR	40/ ;" macro 1 { do_pragma }	{ }
PREV_INSN		rtl.h	/^#define PREV_INSN(INSN)	((INSN)->fld[1].rtx)/ ;" macro 1 { add_insn add_insn_after block_alloc check_dbra_loop cse_insn delete_for_peephole delete_insn delete_insn_forces delete_jump delete_output_reload do_cross_jump drop_through_at_end_p emit_insn_before emit_jump_insn_before emit_reload_insns emit_unop_insn expand_end_loop expand_goto_internal final_scan_insn find_basic_blocks find_cross_jump find_equiv_reg fixup_gotos fixup_var_refs_insns gen_input_reload jump_optimize life_analysis loop_optimize loop_skip_over no_labels_between optimize_bit_field prev_real_insn previous_insn propagate_block reorder_insns save_for_inline scan_loop strength_reduce stupid_life_analysis try_combine try_fold_cc0 }	{ rtx }
PSEUDO_REGNO_BYTES		regs.h	/^#define PSEUDO_REGNO_BYTES(N) \\/ ;" macro 1 { alter_reg dump_flow_info }	{ GET_MODE_SIZE PSEUDO_REGNO_MODE }
PSEUDO_REGNO_MODE		regs.h	/^#define PSEUDO_REGNO_MODE(N) GET_MODE (regno_reg_r/ ;" macro 1 { PSEUDO_REGNO_BYTES PSEUDO_REGNO_SIZE find_reg global_conflicts mark_home_live spill_hard_reg stupid_life_analysis }	{ GET_MODE regno_reg_rtx }
PSEUDO_REGNO_SIZE		regs.h	/^#define PSEUDO_REGNO_SIZE(N) \\/ ;" macro 1 { global_alloc reg_is_born }	{ GET_MODE_SIZE PSEUDO_REGNO_MODE }
PUSH_ARGS_REVERSED		expr.c	/^#define PUSH_ARGS_REVERSED	\/* If it's last to firs/ ;" macro 1 { }	{ }
PUSH_DERIVED_LEVEL		sdbout.c	/^#define PUSH_DERIVED_LEVEL(DT_type,PREV) \\/ ;" macro 1 { plain_type_1 }	{ }
PUT_CODE		rtl.h	/^#define PUT_CODE(RTX, CODE)	((RTX)->code = ((short/ ;" macro 1 { alter_cond alter_reg alter_subreg cse_insn emit_call_insn emit_call_insn_before final_scan_insn find_basic_blocks life_analysis propagate_block put_var_into_stack reload rtx_alloc try_combine try_distrib try_pre_increment_1 }	{ }
PUT_MODE		rtl.h	/^#define PUT_MODE(RTX, MODE)	((RTX)->mode = (MODE))/ ;" macro 1 { convert_move copy_address copy_rtx copy_rtx_and_substitute fixup_var_refs_1 fold_rtx immed_real_const_1 init_emit_once read_rtx reload store_bit_field }	{ }
PUT_NUM_ELEM		rtl.h	/^#define PUT_NUM_ELEM(RTVEC, NUM)	((RTVEC)->num_ele/ ;" macro 1 { rtvec_alloc }	{ }
PUT_SDB_BLOCK_END		sdbout.c	/^#define PUT_SDB_BLOCK_END(LINE)			\\/ ;" macro 1 { sdbout_end_block }	{ asm_out_file }
PUT_SDB_BLOCK_START		sdbout.c	/^#define PUT_SDB_BLOCK_START(LINE)		\\/ ;" macro 1 { sdbout_begin_block }	{ asm_out_file }
PUT_SDB_DEF		sdbout.c	/^#define PUT_SDB_DEF(a)				\\/ ;" macro 1 { sdbout_one_type sdbout_parms sdbout_reg_parms sdbout_symbol }	{ asm_out_file }
PUT_SDB_DIM		sdbout.c	/^#define PUT_SDB_DIM(a) fprintf(asm_out_file, "\\t.d/ ;" macro 1 { plain_type_1 }	{ asm_out_file }
PUT_SDB_ENDEF		sdbout.c	/^#define PUT_SDB_ENDEF fputs("\\t.endef\\n", asm_out_/ ;" macro 1 { sdbout_one_type sdbout_parms sdbout_reg_parms sdbout_symbol }	{ asm_out_file }
PUT_SDB_EPILOGUE_END		sdbout.c	/^#define PUT_SDB_EPILOGUE_END(NAME)		\\/ ;" macro 1 { sdbout_end_epilogue }	{ asm_out_file }
PUT_SDB_FUNCTION_END		sdbout.c	/^#define PUT_SDB_FUNCTION_END(LINE)		\\/ ;" macro 1 { sdbout_end_function }	{ asm_out_file }
PUT_SDB_FUNCTION_START		sdbout.c	/^#define PUT_SDB_FUNCTION_START(LINE)		\\/ ;" macro 1 { sdbout_begin_function }	{ asm_out_file }
PUT_SDB_INT_VAL		sdbout.c	/^#define PUT_SDB_INT_VAL(a) fprintf (asm_out_file, / ;" macro 1 { sdbout_one_type sdbout_parms sdbout_reg_parms sdbout_symbol }	{ asm_out_file }
PUT_SDB_PLAIN_DEF		sdbout.c	/^#define PUT_SDB_PLAIN_DEF(a) fprintf(asm_out_file,/ ;" macro 1 { sdbout_one_type }	{ asm_out_file }
PUT_SDB_SCL		sdbout.c	/^#define PUT_SDB_SCL(a) fprintf(asm_out_file, "\\t.s/ ;" macro 1 { sdbout_one_type sdbout_parms sdbout_reg_parms sdbout_symbol }	{ asm_out_file }
PUT_SDB_SIZE		sdbout.c	/^#define PUT_SDB_SIZE(a) fprintf(asm_out_file, "\\t./ ;" macro 1 { plain_type plain_type_1 sdbout_one_type }	{ asm_out_file }
PUT_SDB_TAG		sdbout.c	/^#define PUT_SDB_TAG(a)				\\/ ;" macro 1 { plain_type_1 sdbout_one_type }	{ asm_out_file }
PUT_SDB_TYPE		sdbout.c	/^#define PUT_SDB_TYPE(a) fprintf(asm_out_file, "\\t./ ;" macro 1 { sdbout_one_type sdbout_parms sdbout_reg_parms sdbout_symbol sdbout_type }	{ asm_out_file }
PUT_SDB_VAL		sdbout.c	/^#define PUT_SDB_VAL(a)				\\/ ;" macro 1 { sdbout_symbol }	{ asm_out_file output_addr_const }
QUEUED_BODY		expr.h	/^#define QUEUED_BODY(P) XEXP (P, 3)/ ;" macro 1 { emit_queue }	{ XEXP }
QUEUED_COPY		expr.h	/^#define QUEUED_COPY(P) XEXP (P, 2)/ ;" macro 1 { protect_from_queue }	{ XEXP }
QUEUED_INSN		expr.h	/^#define QUEUED_INSN(P) XEXP (P, 1)/ ;" macro 1 { emit_queue protect_from_queue }	{ XEXP }
QUEUED_NEXT		expr.h	/^#define QUEUED_NEXT(P) XEXP (P, 4)/ ;" macro 1 { emit_queue }	{ XEXP }
QUEUED_VAR		expr.h	/^#define QUEUED_VAR(P) XEXP (P, 0)/ ;" macro 1 { memory_address protect_from_queue }	{ XEXP }
RAW_TYPESPEC		objc-actions.c	/^#define RAW_TYPESPEC(meth) (TREE_VALUE(TREE_PURPOS/ ;" macro 1 { genMethodDecl }	{ TREE_PURPOSE TREE_TYPE TREE_VALUE }
REAL_H_INCLUDED		real.h	/^#define REAL_H_INCLUDED/ ;" macro 1 { }	{ }
REAL_IS_NOT_DOUBLE		real.h	/^#define REAL_IS_NOT_DOUBLE/ ;" macro 1 { }	{ }
REAL_VALUES_EQUAL		real.h	/^#define REAL_VALUES_EQUAL(x,y) ((x) == (y))/ ;" macro 1 { fold immed_real_const_1 real_zerop simple_cst_equal }	{ }
REAL_VALUES_LESS		real.h	/^#define REAL_VALUES_LESS(x,y) ((x) < (y))/ ;" macro 1 { fold fold_cc0 fold_convert }	{ }
REAL_VALUE_ATOF		real.h	/^#define REAL_VALUE_ATOF(x) atof (x)/ ;" macro 1 { convert_to_real fold init_emit_once yylex }	{ }
REAL_VALUE_LDEXP		real.h	/^#define REAL_VALUE_LDEXP(x,y) ldexp (x, y)/ ;" macro 1 { expand_fix expand_float }	{ }
REAL_VALUE_NEGATE		real.h	/^#define REAL_VALUE_NEGATE(x) (- (x))/ ;" macro 1 { fold fold_rtx immed_real_const_1 }	{ }
REAL_VALUE_TRUNCATE		real.h	/^#define REAL_VALUE_TRUNCATE(x) ((float) (x))/ ;" macro 1 { }	{ }
REAL_VALUE_TYPE		real.h	/^#define REAL_VALUE_TYPE double/ ;" macro 1 { build_real_from_int_cst combine expand_fix expand_float fold_convert fold_rtx immed_real_const_1 init_rtl real_value_from_int_cst yylex }	{ }
REGBITP		global-alloc.c	/^#define REGBITP(TABLE, I, J)     TEST_HARD_REG_BIT/ ;" macro 1 { }	{ TEST_HARD_REG_BIT }
REGNO		rtl.h	/^#define REGNO(RTX) ((RTX)->fld[0].rtint)/ ;" macro 1 { CHEAPER HASHREG all_sets_invariant_p assign_parms basic_induction_var can_eliminate_biv_p canon_hash canon_reg consec_sets_giv consec_sets_invariant_p copy_address copy_all_regs copy_for_inline copy_rtx_and_substitute count_loop_regs_set cse_insn dbxout_parms dbxout_reg_parms dbxout_symbol dead_or_set_p eliminate_biv emit_push_insn expand_call expand_expr expand_function_end find_regno_note general_induction_var insert insert_regs invalidate life_analysis lookup_for_remove make_safe_from mark_reg_pointer mention_regs note_mem_written only_reg_use_p output_move_double parm_stack_loc refers_to_regno_p reg_mentioned_p reg_overlap_mentioned_p regs_match_p replace_regs restore_reg_data_1 rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p rtx_unstable_p rtx_varies_p scan_loop sdbout_parms sdbout_reg_parms sdbout_symbol store_constructor store_expr store_one_arg strength_reduce symout_block_symbols true_regnum (etc) }	{ }
REGNO_POINTER_FLAG		regs.h	/^#define REGNO_POINTER_FLAG(REGNO) regno_pointer_fl/ ;" macro 1 { dump_flow_info mark_reg_pointer record_address_regs }	{ REGNO regno_pointer_flag }
REGSET_ELT_BITS		basic-block.h	/^#define REGSET_ELT_BITS HOST_BITS_PER_INT/ ;" macro 1 { allocate_for_life_analysis dump_flow_info insn_dead_p libcall_dead_p life_analysis mark_set_1 mark_used_regs propagate_block regno_clobbered_at_setjmp regno_uninitialized }	{ HOST_BITS_PER_INT }
REG_BLOCK_GLOBAL		basic-block.h	/^#define REG_BLOCK_GLOBAL -2/ ;" macro 1 { block_alloc life_analysis mark_set_1 mark_used_regs propagate_block }	{ }
REG_BLOCK_UNKNOWN		basic-block.h	/^#define REG_BLOCK_UNKNOWN -1/ ;" macro 1 { allocate_for_life_analysis mark_set_1 mark_used_regs }	{ }
REG_BYTES		regs.h	/^#define REG_BYTES(R) mode_size[(int) GET_MODE (R)]/ ;" macro 1 { }	{ GET_MODE mode_size }
REG_FUNCTION_VALUE_P		rtl.h	/^#define REG_FUNCTION_VALUE_P(RTX) ((RTX)->integrat/ ;" macro 1 { copy_rtx_and_substitute expand_divmod expand_function_end expand_function_start expand_inline_function expand_mult extract_fixed_bit_field rtx_equal_for_loop_p rtx_equal_p }	{ }
REG_NOTES		rtl.h	/^#define REG_NOTES(INSN)	((INSN)->fld[6].rtx)/ ;" macro 1 { add_incs assign_parms block_alloc check_dbra_loop combine_movables cse_insn dead_or_set_p emit_reload_insns emit_unop_insn expand_binop expand_call expand_inline_function expand_unop find_equiv_reg find_reg_note find_regno_note find_reloads_address_1 fixup_var_refs_insns force_reg global_conflicts make_insn_raw make_jump_insn_raw mark_set_1 mark_used_regs move_deaths move_deaths_2 move_movables record_dead_and_set_regs regno_dead_p reload_as_needed remove_death save_call_clobbered_regs save_for_inline try_combine try_pre_increment unshare_all_rtl }	{ rtx }
REG_NOTE_KIND		rtl.h	/^#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_M/ ;" macro 1 { add_incs block_alloc combine_movables cse_insn dead_or_set_p emit_reload_insns find_equiv_reg find_reg_note find_regno_note find_reloads_address_1 global_conflicts record_dead_and_set_regs regno_dead_p reload_as_needed remove_death save_call_clobbered_regs try_combine }	{ GET_MODE reg_note }
REG_OK_STRICT		reload.c	/^#define REG_OK_STRICT/ ;" macro 1 { }	{ }
REG_P		rtl.h	/^#define REG_P(X) (GET_CODE (X) == REG)/ ;" macro 1 { expand_call expand_divmod expand_mult output_move_double }	{ GET_CODE }
REG_SIZE		regs.h	/^#define REG_SIZE(R) \\/ ;" macro 1 { combine_regs mark_set_1 mark_used_regs wipe_dead_reg }	{ GET_MODE mode_size }
REG_USERVAR_P		rtl.h	/^#define REG_USERVAR_P(RTX) ((RTX)->volatil)/ ;" macro 1 { assign_parms expand_decl life_analysis put_var_into_stack reload }	{ }
RETURN_IN_MEMORY		expr.h	/^#define RETURN_IN_MEMORY(type) 0/ ;" macro 1 { aggregate_value_p expand_call function_cannot_inline_p preexpand_calls }	{ type }
RID_FIRST_MODIFIER		c-parse.h	/^#define RID_FIRST_MODIFIER RID_UNSIGNED/ ;" macro 1 { grokdeclarator }	{ }
RTL_EXPR_RTL		tree.h	/^#define RTL_EXPR_RTL(NODE) (*(struct rtx_def **) &/ ;" macro 1 { expand_end_stmt_expr expand_expr expand_start_stmt_expr make_tree save_noncopied_parts }	{ rtx_def }
RTL_EXPR_SEQUENCE		tree.h	/^#define RTL_EXPR_SEQUENCE(NODE) (*(struct rtx_def / ;" macro 1 { expand_end_stmt_expr expand_expr fixup_var_refs make_tree }	{ rtx_def }
RTX_CODE		rtl.h	/^#define RTX_CODE	enum rtx_code/ ;" macro 1 { copy_address copy_rtx copy_rtx_and_substitute delete_insn find_basic_blocks find_reloads find_reloads_address_1 find_reloads_toplev fixup_stack_1 fixup_var_refs_1 flow_analysis global_conflicts insn_dead_p invert_exp libcall_dead_p mark_jump_label mark_label_ref mark_set_regs mark_used_regs next_real_insn operands_match_p plus_constant prev_real_insn protect_from_queue read_rtx redirect_exp refers_to_regno_p reg_set_between_p reg_used_between_p rtx_renumbered_equal_p rtx_unstable_p rtx_varies_p save_call_clobbered_regs stupid_mark_refs subst_reg_equivs volatile_refs_p }	{ rtx_code }
RTX_INTEGRATED_P		rtl.h	/^#define RTX_INTEGRATED_P(RTX) ((RTX)->integrated)/ ;" macro 1 { expand_inline_function save_for_inline }	{ }
RTX_UNCHANGING_P		rtl.h	/^#define RTX_UNCHANGING_P(RTX) ((RTX)->unchanging)/ ;" macro 1 { assign_parms canon_hash change_address expand_decl expand_expr force_const_mem invariant_p make_decl_rtl output_constant_def rtx_unstable_p }	{ }
SAVE_EXPR_RTL		tree.h	/^#define SAVE_EXPR_RTL(NODE) (*(struct rtx_def **) / ;" macro 1 { expand_expr preexpand_calls }	{ rtx_def }
SCCS_DIRECTIVE		tm.h	/^#define SCCS_DIRECTIVE/ ;" macro 1 { }	{ }
SDB_GENERATE_FAKE		sdbout.c	/^#define SDB_GENERATE_FAKE(BUFFER, NUMBER) \\/ ;" macro 1 { gen_fake_label }	{ }
SET_ALLOCNO_LIVE		global-alloc.c	/^#define SET_ALLOCNO_LIVE(I) \\/ ;" macro 1 { global_conflicts mark_reg_clobber mark_reg_store }	{ INT_BITS allocnos_live }
SET_CONFLICT		global-alloc.c	/^#define SET_CONFLICT(I, J) \\/ ;" macro 1 { }	{ INT_BITS allocno_row_words conflicts }
SET_DEST		rtl.h	/^#define SET_DEST(RTX) ((RTX)->fld[0].rtx)/ ;" macro 1 { add_links all_sets_invariant_p block_alloc can_eliminate_biv_p check_dbra_loop check_eliminate_biv classify_insn combine_instructions combine_movables condjump_p consec_sets_giv consec_sets_invariant_p constant_high_bytes copy_for_inline count_loop_regs_set cse_insn dead_or_set_p decode_asm_operands delete_jump delete_output_reload eliminate_frame_pointer emit_reload_insns expand_end_loop expand_inline_function final_scan_insn find_equiv_reg find_reloads fixup_var_refs_1 fixup_var_refs_insns force_movables hard_reg_set_here_p insn_dead_p jump_back_p jump_optimize life_analysis loop_reg_used_before_p mark_set_1 mark_used_regs move_movables next_insns_test_no_inequality note_stores optimize_bit_field predecide_loop_entry propagate_block record_giv refers_to_regno_p reload scan_loop sets_cc0_p simplejump_p strength_reduce stupid_mark_refs subst try_combine try_distrib try_fold_cc0 try_pre_increment_1 }	{ rtx }
SET_HARD_REG_BIT		hard-reg-set.h	/^#define SET_HARD_REG_BIT(SET, BIT)  \\/ ;" macro 1 { MARK_LIVE_AFTER SET_REGBIT find_free_reg find_reg global_alloc init_reg_sets_1 mark_life mark_reg_clobber mark_reg_live_nc mark_reg_store post_mark_life record_one_conflict reg_is_set save_call_clobbered_regs set_preference set_reg_live stupid_find_reg stupid_life_analysis stupid_mark_refs }	{ }
SET_HARD_REG_SET		hard-reg-set.h	/^#define SET_HARD_REG_SET(TO) ((TO) = -1)/ ;" macro 1 { }	{ }
SET_KNOWN_TYPE_TAG		sdbout.c	/^#define SET_KNOWN_TYPE_TAG(TYPE, NAME) \\/ ;" macro 1 { sdbout_record_type_name }	{ TYPE_SYMTAB_ADDRESS }
SET_REGBIT		global-alloc.c	/^#define SET_REGBIT(TABLE, I, J)  SET_HARD_REG_BIT / ;" macro 1 { set_preference }	{ SET_HARD_REG_BIT }
SET_SRC		rtl.h	/^#define SET_SRC(RTX) ((RTX)->fld[1].rtx)/ ;" macro 1 { all_sets_invariant_p asm_noperands block_alloc can_eliminate_biv_p check_dbra_loop classify_insn combine_instructions combine_movables condjump_p consec_sets_giv consec_sets_invariant_p constant_high_bytes count_loop_regs_set cse_insn decode_asm_operands eliminate_biv eliminate_frame_pointer emit_reload_insns error_for_asm expand_asm_operands expand_end_loop expand_inline_function final_scan_insn find_basic_blocks find_equiv_reg find_reloads fixup_var_refs_1 fixup_var_refs_insns insn_dead_p jump_back_p jump_optimize libcall_dead_p life_analysis mark_reg_store mark_used_regs move_movables optimize_bit_field predecide_loop_entry product_cheap_p propagate_block refers_to_regno_p reload scan_loop simplejump_p strength_reduce stupid_mark_refs subst try_combine try_distrib try_fold_cc0 try_pre_increment_1 }	{ rtx }
SHIFT_BENEFIT		loop.c	/^#define SHIFT_BENEFIT 2/ ;" macro 1 { general_induction_var }	{ }
SHORT_TYPE_SIZE		c-decl.c	/^#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNI/ ;" macro 1 { init_decl_processing }	{ MIN }
SIZEHASHTABLE		objc-actions.c	/^#define SIZEHASHTABLE 		257/ ;" macro 1 { finish_objc hash_enter hash_init objc_debug }	{ }
STACK_BYTES		expr.c	/^#define STACK_BYTES (STACK_BOUNDARY \/ BITS_PER_UNI/ ;" macro 1 { emit_library_call expand_builtin expand_call }	{ }
STARTFILE_SPEC		tm.h	/^#define STARTFILE_SPEC  \\/ ;" macro 1 { }	{ }
STMT_BIND_SIZE		tree.h	/^#define STMT_BIND_SIZE(NODE) ((NODE)->bind_stmt.bi/ ;" macro 1 { build_let dump }	{ }
STMT_BODY		tree.h	/^#define STMT_BODY(NODE) ((NODE)->stmt.body)/ ;" macro 1 { build_asm_stmt build_compound build_exit build_expr_stmt build_goto build_loop build_return dbxout_block dump expand_expr sdbout_block symout_function }	{ stmt }
STMT_CASE_INDEX		tree.h	/^#define STMT_CASE_INDEX(NODE) ((NODE)->case_stmt.i/ ;" macro 1 { build_case dump }	{ }
STMT_CASE_LIST		tree.h	/^#define STMT_CASE_LIST(NODE) ((NODE)->case_stmt.ca/ ;" macro 1 { build_case dump }	{ }
STMT_COND		tree.h	/^#define STMT_COND(NODE) ((NODE)->if_stmt.cond)/ ;" macro 1 { build_if dump }	{ }
STMT_ELSE		tree.h	/^#define STMT_ELSE(NODE) ((NODE)->if_stmt.elsepart)/ ;" macro 1 { build_if dbxout_block dump sdbout_block symout_function }	{ }
STMT_SOURCE_FILE		tree.h	/^#define STMT_SOURCE_FILE(NODE) ((NODE)->stmt.filen/ ;" macro 1 { build_asm_stmt build_case build_compound build_exit build_expr_stmt build_goto build_if build_let build_loop build_return dump }	{ stmt }
STMT_SOURCE_LINE		tree.h	/^#define STMT_SOURCE_LINE(NODE) ((NODE)->stmt.linen/ ;" macro 1 { build_asm_stmt build_case build_compound build_exit build_expr_stmt build_goto build_if build_let build_loop build_return dump }	{ stmt }
STMT_SUBBLOCKS		tree.h	/^#define STMT_SUBBLOCKS(NODE) ((NODE)->bind_stmt.su/ ;" macro 1 { build_let copy_decl_tree dbxout_block dump sdbout_block setjmp_protect symout_function uninitialized_vars_warning }	{ }
STMT_SUPERCONTEXT		tree.h	/^#define STMT_SUPERCONTEXT(NODE) ((NODE)->bind_stmt/ ;" macro 1 { build_let dump poplevel }	{ }
STMT_THEN		tree.h	/^#define STMT_THEN(NODE) ((NODE)->if_stmt.thenpart)/ ;" macro 1 { build_if dbxout_block dump sdbout_block symout_function }	{ }
STMT_TYPE_TAGS		tree.h	/^#define STMT_TYPE_TAGS(NODE) ((NODE)->bind_stmt.ty/ ;" macro 1 { build_let dbxout_block dump sdbout_block symout_function }	{ }
STMT_VARS		tree.h	/^#define STMT_VARS(NODE) ((NODE)->bind_stmt.vars)/ ;" macro 1 { build_let copy_decl_tree dbxout_block dump poplevel sdbout_block setjmp_protect symout_function uninitialized_vars_warning }	{ }
STRUCTURE_SIZE_BOUNDARY		tm.h	/^#define STRUCTURE_SIZE_BOUNDARY 16/ ;" macro 1 { layout_record layout_union }	{ }
SUBREG_REG		rtl.h	/^#define SUBREG_REG(RTX) ((RTX)->fld[0].rtx)/ ;" macro 1 { access_parm_map alter_subreg block_alloc choose_reload_regs combine_regs copy_rtx_and_substitute cse_insn delete_output_reload emit_reload_insns equiv_constant extract_bit_field extract_split_bit_field find_dummy_reload find_reloads find_reloads_toplev fixup_memory_subreg fixup_var_refs_1 gen_lowpart general_operand hard_reg_set_here_p insert_regs insn_dead_p invalidate make_safe_from mark_reg_clobber mark_reg_store mark_set_1 mark_used_regs memory_operand nonmemory_operand operands_match_p optimize_bit_field push_reload record_address_regs reg_class_record register_operand rtx_renumbered_equal_p scan_loop set_preference set_reg_live simplify_set_cc0_and store_bit_field store_split_bit_field subreg_lowpart_p subst true_regnum try_combine try_distrib walk_fixup_memory_subreg }	{ rtx }
SUBREG_WORD		rtl.h	/^#define SUBREG_WORD(RTX) ((RTX)->fld[1].rtint)/ ;" macro 1 { access_parm_map alter_subreg choose_reload_regs combine_regs copy_rtx_and_substitute emit_reload_insns equiv_constant extract_bit_field extract_split_bit_field find_reloads find_reloads_toplev fixup_memory_subreg gen_lowpart mark_reg_clobber mark_reg_store operands_match_p optimize_bit_field rtx_renumbered_equal_p set_preference set_reg_live simplify_set_cc0_and store_bit_field store_split_bit_field subreg_lowpart_p subst true_regnum try_distrib }	{ }
SUBST		combine.c	/^#define SUBST(INTO, NEWVAL)  \\/ ;" macro 1 { simplify_and_const_int subst }	{ MAX_UNDO undo undobuf }
SUBST_INT		combine.c	/^#define SUBST_INT(INTO, NEWVAL)  \\/ ;" macro 1 { subst }	{ MAX_UNDO undo undo_int undobuf }
SUB_PARM_SIZE		expr.h	/^#define SUB_PARM_SIZE(TO, DEC)	\\/ ;" macro 1 { assign_parms store_one_arg }	{ TREE_CODE TREE_INT_CST_LOW genop integer_zero_node tree }
SUCCESS_EXIT_CODE		config.h	/^#define SUCCESS_EXIT_CODE 0/ ;" macro 1 { Mtoplev }	{ }
S_E		aux-output.c	/^#define S_E (2.718281745910644531)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_LOG10of2		aux-output.c	/^#define S_LOG10of2 (0.3010300099849700928)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_LOG10ofE		aux-output.c	/^#define S_LOG10ofE (0.4342944920063018799)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_LOG2of10		aux-output.c	/^#define S_LOG2of10 (3.321928024291992188)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_LOG2ofE		aux-output.c	/^#define S_LOG2ofE (1.442695021629333496)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_LOGEof10		aux-output.c	/^#define S_LOGEof10 (2.302585124969482442)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_LOGEof2		aux-output.c	/^#define S_LOGEof2 (0.6931471824645996094)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_PI		aux-output.c	/^#define S_PI (3.141592741012573242)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
S_SQRT2		aux-output.c	/^#define S_SQRT2 (1.414213538169860840)/ ;" macro 1 { standard_sun_fpa_constant_p }	{ }
TAG_CLASS		objc-actions.c	/^#define TAG_CLASS		"objc_class"/ ;" macro 1 { encode_pointer synth_module_prologue }	{ }
TAG_NAME		sdbout.c	/^#define TAG_NAME(link) \\/ ;" macro 1 { }	{ IDENTIFIER_POINTER TREE_PURPOSE }
TAG_OBJECT		objc-actions.c	/^#define TAG_OBJECT		"objc_object"/ ;" macro 1 { encode_pointer synth_module_prologue }	{ }
TAG_SELECTOR		objc-actions.c	/^#define TAG_SELECTOR		"objc_selector"/ ;" macro 1 { build_method_template build_objc_selector_template build_objc_symtab_template build_selector_translation_table encode_pointer start_method_def synth_module_prologue }	{ }
TAG_SUPER		objc-actions.c	/^#define TAG_SUPER		"objc_super"/ ;" macro 1 { synth_module_prologue }	{ }
TARGET_DEFAULT		tm.h	/^#define TARGET_DEFAULT 7/ ;" macro 1 { print_target_switch_defaults }	{ }
TEST_HARD_REG_BIT		hard-reg-set.h	/^#define TEST_HARD_REG_BIT(SET, BIT)  \\/ ;" macro 1 { REGBITP choose_reload_regs constraint_accepts_reg_p dump_conflicts find_dummy_reload find_equiv_reg find_free_reg find_reg init_reg_sets insert_call_saves modes_equiv_for_class_p reg_fits_class_p reload stupid_find_reg }	{ }
TIMEVAR		toplev.c	/^#define TIMEVAR(VAR, BODY)    \\/ ;" macro 1 { compile_file rest_of_compilation rest_of_decl_compilation }	{ gettime }
TREE_ADDRESSABLE		tree.h	/^#define TREE_ADDRESSABLE(NODE) ((NODE)->common.add/ ;" macro 1 { assign_parms compile_file copy_decl_tree expand_call expand_decl expand_end_bindings expand_goto_internal expand_inline_function finish_decl fixup_gotos function_cannot_inline_p layout_decl mark_addressable prtypeinfo pushdecl rest_of_compilation start_function }	{ }
TREE_ASM_WRITTEN		tree.h	/^#define TREE_ASM_WRITTEN(NODE) ((NODE)->common.asm/ ;" macro 1 { assemble_variable compile_file dbxout_symbol dbxout_tags dbxout_types plain_type_1 prtypeinfo rest_of_compilation sdbout_one_type }	{ }
TREE_CHAIN		tree.h	/^#define TREE_CHAIN(NODE) ((NODE)->common.chain)/ ;" macro 1 { actualparameterlist add_class add_class_method add_class_reference add_instance_method add_objc_string add_selector_reference adornDecl build_component_ref build_compound_expr build_dispatch_table_initializer build_ivar_chain build_ivar_list_initializer build_keyword_selector build_message_expr build_message_selector_pool build_selector_translation_table c_expand_asm_operands chainon check_ivars check_methods combine_strings commontype compile_file compparms compparms1 copy_list copy_node digest_init dump_interface duplicate_decls encode_aggregate encode_method_decl finish_enum finish_objc finish_struct genMethodDecl gen_declspecs getArgTypeList get_identifier get_parm_info grokdeclarator grokparms is_ivar list_length lookup_interface lookup_method lookup_name_current_level lookup_tag lookup_tag_reverse make_node objc_copy_list objc_debug parmlist_tags_warning perm_tree_cons poplevel process_init_constructor pushdecl shadow_tag start_method_def (etc) }	{ }
TREE_CODE		tree.h	/^#define TREE_CODE(NODE) ((enum tree_code) (NODE)->/ ;" macro 1 { TYPED_OBJECT USERTYPE add_class_method add_instance_method adornDecl build_enumerator build_ivar_reference build_keyword_selector build_message_expr build_method_decl build_selector_expr c_sizeof c_sizeof_nowarn check_duplicates check_methods check_newline commontype complete_array_type compparms1 comptypes continue_class datatype duplicate_decls encode_aggregate encode_pointer encode_type finish_class finish_decl finish_objc finish_struct forward_declare_categories genDeclaration genDeclarator gen_declspecs get_parm_info get_super_receiver grokdeclarator grokparms groktypename incomplete_type_error init_def_list isComplexDecl is_public lookup_method lookup_tag objc_check_decl objc_debug parmlist_tags_warning poplevel pushdecl reallyStartMethod receiver_is_class_object redeclaration_error_message shadow_tag signed_or_unsigned_type start_decl start_enum start_function start_method_def start_struct (etc) }	{ tree_code }
TREE_COMPLEXITY		tree.h	/^#define TREE_COMPLEXITY(NODE, I) ((NODE)->exp.comp/ ;" macro 1 { }	{ }
TREE_CST_RTL		tree.h	/^#define TREE_CST_RTL(NODE) ((NODE)->real_cst.rtl)/ ;" macro 1 { decode_addr_const expand_expr output_constant_def }	{ }
TREE_EXTERNAL		tree.h	/^#define TREE_EXTERNAL(NODE) ((NODE)->common.extern/ ;" macro 1 { assemble_variable builtin_function compile_file copy_decl_tree dbxout_symbol duplicate_decls expand_decl finish_decl grokdeclarator implicitly_declare make_decl_rtl poplevel prtypeinfo pushdecl redeclaration_error_message rest_of_compilation rest_of_decl_compilation sdbout_symbol start_decl start_function staticp symout_block symout_block_symbols symout_top_blocks }	{ }
TREE_IMAGPART		tree.h	/^#define TREE_IMAGPART(NODE) ((NODE)->complex.imag)/ ;" macro 1 { build_complex combine compare_constant_1 const_hash dump output_constant record_constant_1 }	{ }
TREE_INLINE		tree.h	/^#define TREE_INLINE(NODE) ((NODE)->common.inline_a/ ;" macro 1 { assign_parms clear_pending_stack_adjust compile_file duplicate_decls function_cannot_inline_p grokdeclarator prtypeinfo pushdecl redeclaration_error_message rest_of_compilation save_for_inline }	{ }
TREE_INT_CST_HIGH		tree.h	/^#define TREE_INT_CST_HIGH(NODE) ((NODE)->int_cst.i/ ;" macro 1 { INT_CST_LT INT_CST_LT_UNSIGNED build_int_2 combine comptypes dump expand_end_case expand_expr finish_enum fold fold_convert force_fit_type genop integer_all_onesp integer_onep integer_zerop layout_type output_constant real_value_from_int_cst simple_cst_equal subrange_p tree_int_cst_equal }	{ }
TREE_INT_CST_LOW		tree.h	/^#define TREE_INT_CST_LOW(NODE) ((NODE)->int_cst.in/ ;" macro 1 { INT_CST_LT INT_CST_LT_UNSIGNED adornDecl assemble_variable build_binary_op_nodefault build_conditional_expr build_index_type build_int_2 check_for_full_enumeration_handling check_newline combine compare_constant_1 comptypes const_hash convert_to_integer convert_units cpart dbxout_type decode_addr_const digest_init dump encode_array encode_type expand_assignment expand_call expand_decl expand_end_case expand_expr finish_enum finish_struct fold fold_convert force_fit_type genop get_narrower get_unwidened grokdeclarator init_module_descriptor int_size_in_bytes integer_all_onesp integer_onep integer_zerop layout_decl layout_record layout_type layout_union output_constant output_constructor plain_type_1 process_init_constructor real_value_from_int_cst record_constant_1 sdbout_one_type simple_cst_equal store_constructor store_one_arg subrange_p symout_block_symbols symout_enum_values symout_range_bounds (etc) }	{ }
TREE_LANG_FLAG_1		tree.h	/^#define TREE_LANG_FLAG_1(NODE) ((NODE)->common.lan/ ;" macro 1 { prtypeinfo }	{ }
TREE_LANG_FLAG_2		tree.h	/^#define TREE_LANG_FLAG_2(NODE) ((NODE)->common.lan/ ;" macro 1 { prtypeinfo }	{ }
TREE_LANG_FLAG_3		tree.h	/^#define TREE_LANG_FLAG_3(NODE) ((NODE)->common.lan/ ;" macro 1 { prtypeinfo }	{ }
TREE_LANG_FLAG_4		tree.h	/^#define TREE_LANG_FLAG_4(NODE) ((NODE)->common.lan/ ;" macro 1 { prtypeinfo }	{ }
TREE_LITERAL		tree.h	/^#define TREE_LITERAL(NODE) ((NODE)->common.literal/ ;" macro 1 { assemble_variable build_binary_op_nodefault build_c_cast build_conditional_expr build_unary_op combine_strings copy_decl_tree cpart cwalk decl_constant_value decode_addr_const default_conversion digest_init expand_decl expand_expr finish_decl fold fold_convert layout_decl layout_record layout_type layout_union make_node my_build_string output_addressed_constants output_constructor pointer_diff pointer_int_sum process_init_constructor prtypeinfo save_expr shorten_compare split_tree staticp store_expr store_init_value validate_subtarget }	{ }
TREE_NONLOCAL		tree.h	/^#define TREE_NONLOCAL(NODE) ((NODE)->common.nonloc/ ;" macro 1 { prtypeinfo }	{ }
TREE_OPERAND		tree.h	/^#define TREE_OPERAND(NODE, I) ((NODE)->exp.operand/ ;" macro 1 { actualparameterlist adornDecl build build_array_ref build_binary_op_nodefault build_c_cast build_compound_expr build_enumerator build_function_call build_indirect_ref build_modify_expr build_nt build_unary_op check_for_full_enumeration_handling compare compare_constant_1 const_hash convert convert_for_assignment convert_sequence convert_to_integer convert_units decode_addr_const default_conversion do_jump dump expand_assignment expand_builtin expand_call expand_expr expand_increment expand_return expr_last fold fold_convert genDeclarator get_narrower get_unwidened grokdeclarator initializer_constant_valid_p invert_truthvalue lvalue_p mark_addressable operand_equal_p output_addressed_constants output_constant output_constructor pointer_int_sum preexpand_calls readonly_warning reallyStartMethod receiver_is_class_object record_constant_1 simple_cst_equal split_tree stabilize_reference start_method_def staticp truthvalue_conversion unary_complex_lvalue (etc) }	{ }
TREE_PACKED		tree.h	/^#define TREE_PACKED(NODE) ((NODE)->common.packed_a/ ;" macro 1 { build_unary_op encode_field_decl expand_end_bindings expand_goto_internal finish_struct layout_decl layout_type objc_copy_list prtypeinfo sdbout_one_type symout_record_fields }	{ }
TREE_PERMANENT		tree.h	/^#define TREE_PERMANENT(NODE) ((NODE)->common.perma/ ;" macro 1 { build_pointer_type build_reference_type build_type_variant chain_type copy_node dbxout_symbol layout_type make_node output_constant_def prtypeinfo symout_types type_hash_canon }	{ }
TREE_PUBLIC		tree.h	/^#define TREE_PUBLIC(NODE) ((NODE)->common.public_a/ ;" macro 1 { TREE_STATIC_TEMPLATE add_instance_variable assemble_function assemble_variable builtin_function compile_file copy_decl_tree dbxout_symbol dbxout_type decl_constant_value duplicate_decls finish_decl grokdeclarator implicitly_declare is_public mark_addressable prtypeinfo pushdecl redeclaration_error_message rest_of_compilation sdbout_symbol symout_block_symbols symout_top_blocks }	{ }
TREE_PURPOSE		tree.h	/^#define TREE_PURPOSE(NODE) ((NODE)->list.purpose)/ ;" macro 1 { RAW_TYPESPEC TAG_NAME build_keyword_selector build_message_expr build_op_identifier build_tree_list check_for_full_enumeration_handling continue_method_def dbxout_tags dbxout_type dump expand_anon_union_decl expand_asm_operands expand_call expand_cleanups expand_expr filter_undefined_types genDeclaration genMethodDecl grokparms groktypename lookup_tag lookup_tag_reverse parmlist_tags_warning perm_tree_cons poplevel push_parm_decl reallyStartMethod save_noncopied_parts saveable_tree_cons sdbout_one_type sdbout_tags start_method_def store_constructor store_parm_decls symout_block_tags symout_enum_value_names symout_enum_values temp_tree_cons tree_cons type_list_equal }	{ }
TREE_READONLY		tree.h	/^#define TREE_READONLY(NODE) ((NODE)->common.readon/ ;" macro 1 { assemble_variable assign_parms build_array_ref build_c_cast build_component_ref build_indirect_ref build_modify_expr build_type_variant build_unary_op c_expand_asm_operands compile_file comptypes convert_for_assignment copy_decl_tree copy_for_inline dbxout_symbol default_conversion digest_init duplicate_decls expand_call expand_decl expand_expr expand_inline_function finish_struct grokdeclarator make_decl_rtl prtypeinfo qualify_type readonly_warning save_expr save_for_inline stabilize_reference }	{ }
TREE_REALPART		tree.h	/^#define TREE_REALPART(NODE) ((NODE)->complex.real)/ ;" macro 1 { build_complex combine compare_constant_1 const_hash dump output_constant record_constant_1 }	{ }
TREE_REAL_CST		tree.h	/^#define TREE_REAL_CST(NODE) ((NODE)->real_cst.real/ ;" macro 1 { build_real build_real_from_int_cst combine compare_constant_1 const_hash convert_to_real dump fold fold_convert immed_real_const output_constant real_zerop record_constant_1 simple_cst_equal }	{ }
TREE_REGDECL		tree.h	/^#define TREE_REGDECL(NODE) ((NODE)->common.regdecl/ ;" macro 1 { assign_parms build_array_ref expand_decl grokdeclarator make_decl_rtl mark_addressable prtypeinfo rest_of_decl_compilation setjmp_protect }	{ }
TREE_SET_CODE		tree.h	/^#define TREE_SET_CODE(NODE, VALUE) ((NODE)->common/ ;" macro 1 { fold invert_truthvalue make_node }	{ }
TREE_STATIC		tree.h	/^#define TREE_STATIC(NODE) ((NODE)->common.static_a/ ;" macro 1 { combine_strings compile_file copy_decl_tree default_conversion digest_init duplicate_decls expand_decl expand_decl_init expand_expr finish_decl grokdeclarator initializer_constant_valid_p layout_union my_build_string process_init_constructor prtypeinfo rest_of_decl_compilation start_decl start_function staticp store_init_value symout_block_symbols }	{ }
TREE_STATIC_TEMPLATE		objc-actions.c	/^#define TREE_STATIC_TEMPLATE(record_type) (TREE_PU/ ;" macro 1 { TYPED_OBJECT build_message_expr build_private_template continue_class encode_pointer gen_declspecs is_public objc_check_decl }	{ TREE_PUBLIC }
TREE_STRING_LENGTH		tree.h	/^#define TREE_STRING_LENGTH(NODE) ((NODE)->string.l/ ;" macro 1 { build_string check_newline combine_strings compare_constant_1 complete_array_type const_hash digest_init expand_asm_operands expand_expr fold get_or_assign_label output_constant record_constant_1 simple_cst_equal }	{ string }
TREE_STRING_POINTER		tree.h	/^#define TREE_STRING_POINTER(NODE) ((NODE)->string./ ;" macro 1 { assemble_asm build_string check_newline combine_strings compare_constant_1 const_hash dump expand_asm expand_asm_operands expand_expr finish_decl fold output_constant receiver_is_class_object record_constant_1 simple_cst_equal }	{ string }
TREE_THIS_VOLATILE		tree.h	/^#define TREE_THIS_VOLATILE(NODE) ((NODE)->common.t/ ;" macro 1 { build_array_ref build_component_ref build_indirect_ref build_unary_op c_expand_return comptypes decl_constant_value default_conversion duplicate_decls expand_assignment expand_call expand_end_stmt_expr expand_expr finish_function get_narrower get_unwidened grokdeclarator prtypeinfo rest_of_compilation stabilize_reference }	{ }
TREE_TYPE		tree.h	/^#define TREE_TYPE(NODE) ((NODE)->common.type)/ ;" macro 1 { RAW_TYPESPEC actualparameterlist adornDecl build_array_ref build_binary_op_nodefault build_component_ref build_dispatch_table_initializer build_enumerator build_function_call build_indirect_ref build_ivar_reference build_keyword_decl build_message_expr build_method_decl build_msg_pool_reference check_ivars combine_strings commontype comp_method_with_proto comp_proto_with_proto comp_target_types complete_array_type comptypes datatype default_conversion duplicate_decls encode_array encode_field_decl encode_method_decl encode_pointer finish_decl finish_function finish_struct genDeclaration genDeclarator genMethodDecl generate_dispatch_tables generate_ivar_lists generate_shared_structures getArgTypeList get_parm_info get_super_receiver grokdeclarator grokparms incomplete_type_error init_decl_processing init_selector is_public lookup_name my_build_string objc_check_decl pointer_diff pointer_int_sum pushdecl reallyStartMethod redeclaration_error_message require_complete_type shorten_compare start_decl start_function (etc) }	{ type }
TREE_UID		tree.h	/^#define TREE_UID(NODE) ((NODE)->common.uid)/ ;" macro 1 { TYPE_HASH copy_node dump make_node wruid }	{ }
TREE_UNSIGNED		tree.h	/^#define TREE_UNSIGNED(NODE) ((NODE)->common.unsign/ ;" macro 1 { build_binary_op_nodefault c_expand_start_case combine commontype compare convert_to_integer dbxout_type default_conversion expand_assignment expand_end_case expand_expr expand_increment finish_enum fold force_fit_type get_narrower get_unwidened int_fits_type_p integer_all_onesp layout_decl layout_type plain_type_1 prtypeinfo shorten_compare store_constructor store_expr subrange_p symout_types tail_recursion_args tree_int_cst_lt truthvalue_conversion xref_tag yylex }	{ }
TREE_USED		tree.h	/^#define TREE_USED(NODE) ((NODE)->common.used_attr)/ ;" macro 1 { add_objc_decls assign_parms build_module_descriptor compile_file copy_decl_tree copy_parm_decls dbxout_block expand_end_bindings expand_expr expand_function_end finish_decl generate_category generate_dispatch_tables generate_forward_declaration_to_string_table generate_ivar_lists generate_objc_symtab_decl poplevel prtypeinfo pushdecl reallyStartMethod sdbout_block symout_function synth_forward_declarations synth_module_prologue }	{ }
TREE_VALUE		tree.h	/^#define TREE_VALUE(NODE) ((NODE)->list.value)/ ;" macro 1 { RAW_TYPESPEC actualparameterlist add_class_reference add_objc_string add_selector_reference adornDecl assign_parms build_compound_expr build_function_call build_message_expr build_message_selector_pool build_op_identifier build_selector_translation_table build_tree_list c_expand_asm_operands check_for_full_enumeration_handling commontype compparms compparms1 digest_init dump duplicate_decls encode_method_decl expand_anon_union_decl expand_asm_operands expand_builtin expand_call expand_cleanups expand_expr finish_enum finish_objc fixup_gotos fixup_var_refs genDeclaration gen_declspecs get_parm_info grokdeclarator grokparms groktypename layout_record lookup_tag lookup_tag_reverse objc_debug parmlist_tags_warning perm_tree_cons poplevel process_init_constructor push_parm_decl reallyStartMethod receiver_is_class_object save_noncopied_parts saveable_tree_cons shadow_tag start_method_def store_constructor store_parm_decls tail_recursion_args temp_tree_cons tree_cons type_hash_list (etc) }	{ }
TREE_VOLATILE		tree.h	/^#define TREE_VOLATILE(NODE) ((NODE)->common.volati/ ;" macro 1 { assemble_variable assign_parms build build_array_ref build_c_cast build_component_ref build_compound_expr build_conditional_expr build_function_call build_indirect_ref build_modify_expr build_type_variant build_unary_op commontype convert_for_assignment copy_decl_tree dbxout_symbol default_conversion duplicate_decls expand_decl expand_end_stmt_expr expand_expr expand_expr_stmt expand_inline_function fold get_narrower get_unwidened grokdeclarator make_decl_rtl prtypeinfo qualify_type save_for_inline shorten_compare stabilize_reference }	{ }
TRUE		config.h	/^#define TRUE 1/ ;" macro 1 { do_store_flag general_induction_var save_call_clobbered_regs yylex }	{ }
TYPED_OBJECT		objc-actions.c	/^#define TYPED_OBJECT(type) \\/ ;" macro 1 { objc_comptypes }	{ TREE_CODE TREE_STATIC_TEMPLATE type }
TYPE_ALIGN		tree.h	/^#define TYPE_ALIGN(NODE) ((NODE)->type.align)/ ;" macro 1 { assign_parms build_index_type c_alignof compare expand_assignment expand_call expand_expr finish_struct get_or_assign_label layout_decl layout_record layout_type layout_union make_node prtypemodeinfo store_constructor store_expr store_one_arg xref_tag }	{ type }
TYPE_ARG_TYPES		tree.h	/^#define TYPE_ARG_TYPES(NODE) ((NODE)->type.values)/ ;" macro 1 { adornDecl assign_parms build_function_call build_function_type build_message_expr build_method_type commontype comp_method_with_proto comp_proto_with_proto comptypes dbxout_type dump duplicate_decls encode_method_decl expand_call function_cannot_inline_p grokdeclarator pushdecl start_function store_parm_decls }	{ type }
TYPE_BASETYPES		tree.h	/^#define TYPE_BASETYPES(NODE) ((NODE)->type.basetyp/ ;" macro 1 { dbxout_type }	{ type }
TYPE_DOMAIN		tree.h	/^#define TYPE_DOMAIN(NODE) ((NODE)->type.values)/ ;" macro 1 { array_type_nelts build_array_type commontype complete_array_type comptypes dbxout_type digest_init dump finish_decl grokdeclarator incomplete_type_error layout_type plain_type_1 process_init_constructor store_constructor symout_array_domain symout_types type_hash_lookup }	{ type }
TYPE_FIELDS		tree.h	/^#define TYPE_FIELDS(NODE) ((NODE)->type.values)/ ;" macro 1 { build_component_ref build_private_template continue_class dbxout_type digest_init dump encode_aggregate finish_struct generate_ivar_lists is_public layout_record layout_type layout_union output_constructor process_init_constructor sdbout_field_types sdbout_one_type start_struct store_constructor symout_record_field_names symout_record_fields symout_types }	{ type }
TYPE_FLAG_UNSIGNED		symseg.h	/^#define TYPE_FLAG_UNSIGNED 1/ ;" macro 1 { symout_types }	{ }
TYPE_HASH		tree.c	/^#define TYPE_HASH(TYPE) TREE_UID (TYPE)/ ;" macro 1 { build_array_type build_function_type build_method_type build_offset_type type_hash_list }	{ TREE_UID }
TYPE_HASH_SIZE		tree.c	/^#define TYPE_HASH_SIZE 59/ ;" macro 1 { }	{ }
TYPE_ID		objc-actions.c	/^#define TYPE_ID			"id"/ ;" macro 1 { }	{ }
TYPE_LANG_SPECIFIC		tree.h	/^#define TYPE_LANG_SPECIFIC(NODE) ((NODE)->type.lan/ ;" macro 1 { }	{ type }
TYPE_MAIN_VARIANT		tree.h	/^#define TYPE_MAIN_VARIANT(NODE) ((NODE)->type.main/ ;" macro 1 { TYPE_OUTPUT_ADDRESS build_c_cast build_conditional_expr build_indirect_ref build_type_variant chain_type commontype comp_target_types comptypes convert_for_assignment dbxout_tags dbxout_type digest_init finish_struct grokdeclarator grokparms int_size_in_bytes layout_type make_node plain_type_1 process_init_constructor sdbout_one_type size_in_bytes }	{ type }
TYPE_MAX_VALUE		tree.h	/^#define TYPE_MAX_VALUE(NODE) ((NODE)->type.max)/ ;" macro 1 { array_type_nelts build_index_type comptypes dbxout_type dump finish_decl finish_enum fixup_unsigned_type fold_convert int_fits_type_p layout_type make_signed_type plain_type_1 process_init_constructor shorten_compare store_constructor subrange_p symout_range_bounds type_hash_lookup xref_tag }	{ max type }
TYPE_METHOD_BASETYPE		tree.h	/^#define TYPE_METHOD_BASETYPE(NODE) ((NODE)->type.m/ ;" macro 1 { build_method_type dbxout_type }	{ max type }
TYPE_MIN_VALUE		tree.h	/^#define TYPE_MIN_VALUE(NODE) ((NODE)->type.sep)/ ;" macro 1 { array_type_nelts build_index_type comptypes dbxout_type dump encode_type finish_enum fixup_unsigned_type fold_convert int_fits_type_p layout_type make_signed_type process_init_constructor shorten_compare store_constructor subrange_p symout_range_bounds symout_types type_hash_lookup xref_tag }	{ type }
TYPE_MODE		tree.h	/^#define TYPE_MODE(NODE) ((NODE)->type.mode)/ ;" macro 1 { aggregate_value_p assign_parms build_conditional_expr build_index_type build_real build_real_from_int_cst compare dbxout_parms dbxout_reg_parms encode_pointer encode_type expand_anon_union_decl expand_asm_operands expand_assignment expand_call expand_end_case expand_expr expand_increment expand_inline_function function_cannot_inline_p get_floating_type grokdeclarator immed_real_const layout_decl layout_type make_decl_rtl operand_equal_p output_constant output_constant_def preexpand_calls prtypemodeinfo save_noncopied_parts sdbout_parms sdbout_reg_parms split_tree store_constructor store_one_arg xref_tag }	{ type }
TYPE_NAME		tree.h	/^#define TYPE_NAME(NODE) ((NODE)->type.name)/ ;" macro 1 { build_message_expr check_for_full_enumeration_handling dbxout_init dbxout_symbol dbxout_type dbxout_type_name dbxout_types dump encode_aggregate encode_pointer gen_declspecs incomplete_type_error is_public objc_comptypes poplevel pushdecl pushtag sdbout_record_type_name symout_types }	{ type }
TYPE_NEXT_VARIANT		tree.h	/^#define TYPE_NEXT_VARIANT(NODE) ((NODE)->type.next/ ;" macro 1 { build_type_variant finish_struct layout_type }	{ type }
TYPE_NONCOPIED_PARTS		tree.h	/^#define TYPE_NONCOPIED_PARTS(NODE) ((NODE)->type.n/ ;" macro 1 { expand_expr }	{ type }
TYPE_OFFSET_BASETYPE		tree.h	/^#define TYPE_OFFSET_BASETYPE(NODE) ((NODE)->type.m/ ;" macro 1 { build_offset_type dbxout_type }	{ max type }
TYPE_OUTPUT_ADDRESS		symout.c	/^#define TYPE_OUTPUT_ADDRESS(TYPE) \\/ ;" macro 1 { symout_array_domain symout_block_symbols symout_block_tags symout_enum_values symout_range_bounds symout_record_fields symout_types }	{ TYPE_MAIN_VARIANT TYPE_SYMTAB_ADDRESS }
TYPE_PARSE_INFO		tree.h	/^#define TYPE_PARSE_INFO(NODE) ((NODE)->type.parse_/ ;" macro 1 { }	{ type }
TYPE_POINTER_TO		tree.h	/^#define TYPE_POINTER_TO(NODE) ((NODE)->type.pointe/ ;" macro 1 { build_pointer_type build_type_variant datatype default_conversion dump expand_expr symout_block_symbols symout_types }	{ type }
TYPE_PRECISION		tree.h	/^#define TYPE_PRECISION(NODE) ((NODE)->type.sep_uni/ ;" macro 1 { actualparameterlist build_binary_op_nodefault build_index_type c_sizeof c_sizeof_nowarn combine commontype compare_constant_1 compparms1 comptypes convert_to_integer default_conversion digest_init dump duplicate_decls expand_expr finish_enum finish_struct fixup_unsigned_type fold force_fit_type get_narrower get_parm_info get_unwidened grokdeclarator init_decl_processing integer_all_onesp layout_type make_signed_type make_unsigned_type pointer_int_sum readescape record_constant_1 shorten_compare signed_or_unsigned_type start_enum start_function subrange_p truthvalue_conversion type_for_size type_precision xref_tag yylex }	{ type }
TYPE_REFERENCE_TO		tree.h	/^#define TYPE_REFERENCE_TO(NODE) ((NODE)->type.refe/ ;" macro 1 { build_reference_type build_type_variant }	{ type }
TYPE_SEP		tree.h	/^#define TYPE_SEP(NODE) ((NODE)->type.sep)/ ;" macro 1 { dump layout_type }	{ type }
TYPE_SEP_UNIT		tree.h	/^#define TYPE_SEP_UNIT(NODE) ((NODE)->type.sep_unit/ ;" macro 1 { C_TYPE_FIELDS_READONLY dump layout_type }	{ type }
TYPE_SIZE		tree.h	/^#define TYPE_SIZE(NODE) ((NODE)->type.size)/ ;" macro 1 { actualparameterlist adornDecl assign_parms build_array_ref build_array_type build_component_ref build_function_type build_index_type build_method_type build_offset_type dbxout_tags dbxout_type decode_addr_const digest_init dump encode_array expand_assignment expand_call expand_expr finish_enum finish_struct generate_shared_structures grokdeclarator grokparms init_decl_processing init_module_descriptor int_size_in_bytes layout_decl layout_record layout_type layout_union poplevel prtypemodeinfo pushdecl require_complete_type sdbout_tags size_in_bytes start_decl start_enum start_function staticp store_constructor store_parm_decls symout_types }	{ type }
TYPE_SIZE_UNIT		tree.h	/^#define TYPE_SIZE_UNIT(NODE) ((NODE)->type.size_un/ ;" macro 1 { build_index_type decode_addr_const digest_init expand_assignment expand_expr int_size_in_bytes layout_decl layout_record layout_type layout_union make_node prtypemodeinfo size_in_bytes store_constructor symout_types }	{ type }
TYPE_SYMTAB_ADDRESS		tree.h	/^#define TYPE_SYMTAB_ADDRESS(NODE) ((NODE)->type.sy/ ;" macro 1 { KNOWN_TYPE_TAG SET_KNOWN_TYPE_TAG TYPE_OUTPUT_ADDRESS dbxout_type filter_undefined_types symout_types }	{ type }
TYPE_VALUES		tree.h	/^#define TYPE_VALUES(NODE) ((NODE)->type.values)/ ;" macro 1 { check_for_full_enumeration_handling dbxout_type dump finish_enum start_enum symout_enum_value_names symout_enum_values }	{ type }
USERTYPE		objc-actions.c	/^#define USERTYPE(t)	(TREE_CODE(t) == RECORD_TYPE |/ ;" macro 1 { }	{ TREE_CODE }
WORD_SWITCH_TAKES_ARG		tm.h	/^#define WORD_SWITCH_TAKES_ARG(STR)			\\/ ;" macro 1 { }	{ }
WORD_SWITCH_TAKES_THREE_ARGS		tm.h	/^#define WORD_SWITCH_TAKES_THREE_ARGS(STR)			\\/ ;" macro 1 { }	{ }
WORD_SWITCH_TAKES_TWO_ARGS		tm.h	/^#define WORD_SWITCH_TAKES_TWO_ARGS(STR)	\\/ ;" macro 1 { }	{ }
XEXP		rtl.h	/^#define XEXP(RTX, N)	((RTX)->fld[N].rtx)/ ;" macro 1 { assemble_function assign_parms break_out_memory_refs clear_storage convert_move copy_all_regs copy_rtx dead_or_set_p eliminate_constant_term emit_block_move emit_cmp_insn emit_move_insn emit_push_insn expand_call expand_decl expand_end_loop expand_expr expand_function_end extract_bit_field extract_fixed_bit_field extract_split_bit_field find_addr_reg find_reg_note find_regno_note fixup_memory_subreg fixup_stack_1 fixup_var_refs fixup_var_refs_1 fixup_var_refs_insns force_operand get_structure_value_addr may_trap_p memory_address move_block_from_reg move_block_to_reg move_by_pieces note_stores optimize_bit_field output_move_double plus_constant print_rtx protect_from_queue put_var_into_stack queued_subexp_p read_rtx refers_to_regno_p reg_mentioned_p rtx_addr_varies_p rtx_equal_p rtx_unstable_p rtx_varies_p stabilize store_bit_field store_field store_fixed_bit_field store_one_arg store_split_bit_field use_variable use_variable_after volatile_refs_p (etc) }	{ rtx }
XINT		rtl.h	/^#define XINT(RTX, N)	((RTX)->fld[N].rtint)/ ;" macro 1 { ASM_OPERANDS_OUTPUT_IDX ASM_OPERANDS_SOURCE_LINE CONST_DOUBLE_HIGH CONST_DOUBLE_LOW canon_hash copy_address copy_for_inline copy_rtx copy_rtx_and_substitute emit_note emit_note_after exp_equiv_p fold_rtx gen_rtx operands_match_p print_rtx read_rtx rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p }	{ }
XSTR		rtl.h	/^#define XSTR(RTX, N)	((RTX)->fld[N].rtstr)/ ;" macro 1 { ASM_OPERANDS_INPUT_CONSTRAINT ASM_OPERANDS_OUTPUT_CONSTRAINT ASM_OPERANDS_SOURCE_FILE ASM_OPERANDS_TEMPLATE assemble_external assemble_function assemble_variable canon_hash copy_address copy_for_inline copy_rtx_and_substitute dbxout_type decode_asm_operands emit_library_call emit_note emit_note_after exp_equiv_p expand_asm_operands final_scan_insn gen_rtx operands_match_p output_addr_const print_rtx read_rtx rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p symout_block_symbols }	{ }
XVEC		rtl.h	/^#define XVEC(RTX, N)	((RTX)->fld[N].rtvec)/ ;" macro 1 { ASM_OPERANDS_INPUT_CONSTRAINT_VEC ASM_OPERANDS_INPUT_VEC asm_noperands copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared count_occurrences emit_insn emit_insn_after emit_insn_before gen_rtx print_rtx read_rtx reg_scan_mark_refs restore_reg_data_1 try_combine }	{ rtvec }
XVECEXP		rtl.h	/^#define XVECEXP(RTX,N,M)((RTX)->fld[N].rtvec->elem/ ;" macro 1 { ASM_OPERANDS_INPUT ASM_OPERANDS_INPUT_CONSTRAINT ASM_OPERANDS_INPUT_MODE can_jump_into_range_p canon_hash canon_reg classify_insn copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared count_loop_regs_set count_nonfixed_reads cse_insn dead_or_set_p do_jump emit_insn emit_insn_after emit_insn_before error_for_asm exp_equiv_p expand_asm_operands expand_inline_function find_mem_givs find_use_as_address fixup_stack_1 fixup_var_refs_1 insn_dead_p invalidate_from_clobbers invariant_p invert_exp mark_jump_label mark_label_ref mark_set_regs mark_used_regs may_trap_p mention_regs move_deaths note_stores only_reg_use_p print_rtx read_rtx record_dead_and_set_regs redirect_exp refers_to_mem_p refers_to_p refers_to_regno_p reg_mentioned_p replace_call_address replace_regs restore_reg_data_1 rtx_cost rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p sets_cc0_p stupid_mark_refs subst tension_vector_labels (etc) }	{ rtvec rtx }
XVECLEN		rtl.h	/^#define XVECLEN(RTX, N)	((RTX)->fld[N].rtvec->num_/ ;" macro 1 { can_jump_into_range_p canon_hash canon_reg classify_insn copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared count_loop_regs_set count_nonfixed_reads cse_end_of_basic_block cse_insn dead_or_set_p do_jump emit_insn emit_insn_after emit_insn_before exp_equiv_p expand_inline_function find_mem_givs find_use_as_address fixup_stack_1 fixup_var_refs_1 insn_dead_p invalidate_from_clobbers invariant_p invert_exp mark_jump_label mark_label_ref mark_set_regs mark_used_regs may_trap_p mention_regs move_deaths move_deaths_2 note_stores only_reg_use_p print_rtx product_cheap_p record_dead_and_set_regs redirect_exp refers_to_mem_p refers_to_p refers_to_regno_p reg_mentioned_p replace_call_address replace_regs restore_reg_data_1 rtx_cost rtx_equal_for_loop_p rtx_equal_p rtx_renumbered_equal_p sets_cc0_p stupid_mark_refs subst tension_vector_labels try_combine use_crosses_set_p volatile_refs_p (etc) }	{ rtvec }
_OBJC_CLASS_METHODS_decl		objc-actions.c	/^static tree 	_OBJC_INSTANCE_METHODS_decl, _OBJC_CL/ ;" global 1 { generate_category generate_dispatch_tables generate_shared_structures }	{ }
_OBJC_CLASS_VARIABLES_decl		objc-actions.c	/^static tree 	_OBJC_INSTANCE_VARIABLES_decl, _OBJC_/ ;" global 1 { generate_ivar_lists generate_shared_structures }	{ }
_OBJC_CLASS_decl		objc-actions.c	/^static tree 	_OBJC_CLASS_decl, _OBJC_METACLASS_dec/ ;" global 1 { continue_class finish_objc generate_shared_structures synth_forward_declarations }	{ }
_OBJC_INSTANCE_METHODS_decl		objc-actions.c	/^static tree 	_OBJC_INSTANCE_METHODS_decl, _OBJC_CL/ ;" global 1 { generate_category generate_dispatch_tables generate_shared_structures }	{ }
_OBJC_INSTANCE_VARIABLES_decl		objc-actions.c	/^static tree 	_OBJC_INSTANCE_VARIABLES_decl, _OBJC_/ ;" global 1 { generate_ivar_lists generate_shared_structures }	{ }
_OBJC_METACLASS_decl		objc-actions.c	/^static tree 	_OBJC_CLASS_decl, _OBJC_METACLASS_dec/ ;" global 1 { continue_class finish_objc generate_shared_structures synth_forward_declarations }	{ }
_OBJC_MODULES_decl		objc-actions.c	/^static tree _OBJC_MODULES_decl;/ ;" global 1 { build_module_descriptor objc_debug }	{ }
_OBJC_SELECTOR_REFERENCES_decl		objc-actions.c	/^static tree 	_OBJC_SELECTOR_REFERENCES_decl;/ ;" global 1 { build_message_expr build_selector_expr build_selector_translation_table init_objc_symtab synth_module_prologue }	{ }
_OBJC_SELECTOR_REFERENCES_id		objc-actions.c	/^static tree objc_object_id, _OBJC_SELECTOR_REFEREN/ ;" global 1 { build_selector_translation_table synth_module_prologue }	{ }
_OBJC_STRINGS_decl		objc-actions.c	/^static tree _OBJC_STRINGS_decl;/ ;" global 1 { build_message_selector_pool build_msg_pool_reference generate_forward_declaration_to_string_table }	{ }
_OBJC_SUPER_decl		objc-actions.c	/^static tree _OBJC_SUPER_decl;/ ;" global 1 { add_objc_decls get_super_receiver start_method_def }	{ }
_OBJC_SYMBOLS_decl		objc-actions.c	/^static tree _OBJC_SYMBOLS_decl;/ ;" global 1 { generate_objc_symtab_decl init_module_descriptor }	{ }
_PRIVATE_record		objc-actions.c	/^static tree objc_class_template, objc_category_tem/ ;" global 1 { build_private_template is_public start_method_def }	{ }
_TAG_CATEGORY		objc-actions.c	/^#define _TAG_CATEGORY		"_objc_category"/ ;" macro 1 { build_category_template }	{ }
_TAG_CLASS		objc-actions.c	/^#define _TAG_CLASS		"_objc_class"/ ;" macro 1 { build_class_template build_super_template }	{ }
_TAG_IVAR		objc-actions.c	/^#define _TAG_IVAR		"_objc_ivar"/ ;" macro 1 { build_ivar_template }	{ }
_TAG_IVAR_LIST		objc-actions.c	/^#define _TAG_IVAR_LIST		"_objc_ivar_list"/ ;" macro 1 { build_class_template generate_ivar_lists }	{ }
_TAG_METHOD		objc-actions.c	/^#define _TAG_METHOD		"_objc_method"/ ;" macro 1 { build_method_template }	{ }
_TAG_METHOD_LIST		objc-actions.c	/^#define _TAG_METHOD_LIST	"_objc_method_list"/ ;" macro 1 { build_category_template build_class_template generate_dispatch_tables }	{ }
_TAG_MODULE		objc-actions.c	/^#define _TAG_MODULE		"_objc_module"/ ;" macro 1 { build_module_descriptor }	{ }
_TAG_SUPER		objc-actions.c	/^#define _TAG_SUPER		"_objc_super"/ ;" macro 1 { add_objc_decls build_super_template }	{ }
_TAG_SYMTAB		objc-actions.c	/^#define _TAG_SYMTAB		"_objc_symtab"/ ;" macro 1 { build_module_descriptor build_objc_symtab_template }	{ }
__GNU_STAB__		stab.h	/^#define __GNU_STAB__/ ;" macro 1 { }	{ }
__VERSION__		toplev.c	/^#define __VERSION__ "[unknown]"/ ;" macro 1 { Mtoplev }	{ }
__clsSuper_ref		objc-actions.c	/^static tree _clsSuper_ref, __clsSuper_ref;/ ;" global 1 { get_super_receiver synth_forward_declarations }	{ }
__define_stab		stab.h	/^#define __define_stab(NAME, CODE, STRING) NAME=COD/ ;" macro 1 { }	{ }
__inline		objc-parse.y	/^__inline/ ;" global 2 { }	{ }
__stab_debug_code		stab.h	/^enum __stab_debug_code/ ;" struct 5 { }	{ }
_clsSuper_ref		objc-actions.c	/^static tree _clsSuper_ref, __clsSuper_ref;/ ;" global 1 { get_super_receiver synth_forward_declarations }	{ }
_cmd_id		objc-actions.c	/^static tree self_id, _cmd_id, _msg_id, _msgSuper_i/ ;" global 1 { start_class start_method_def }	{ }
_msgSuper_decl		objc-actions.c	/^static tree self_decl, _msg_decl, _msgSuper_decl;/ ;" global 1 { build_message_expr synth_module_prologue }	{ }
_msgSuper_id		objc-actions.c	/^static tree self_id, _cmd_id, _msg_id, _msgSuper_i/ ;" global 1 { synth_module_prologue }	{ }
_msg_decl		objc-actions.c	/^static tree self_decl, _msg_decl, _msgSuper_decl;/ ;" global 1 { build_message_expr synth_module_prologue }	{ }
_msg_id		objc-actions.c	/^static tree self_id, _cmd_id, _msg_id, _msgSuper_i/ ;" global 1 { synth_module_prologue }	{ }
_selector_type		objc-actions.c	/^static tree super_type, _selector_type, id_type, c/ ;" global 1 { getArgTypeList init_selector synth_module_prologue }	{ }
abs_optab		optabs.c	/^optab abs_optab;/ ;" global 1 { expand_expr init_optabs }	{ }
absdcl		objc-parse.y	/^absdcl:   \/* an absolute declarator *\// ;" yacctoken 1 { }	{ }
absdcl1		objc-parse.y	/^absdcl1:  \/* a nonempty absolute declarator *\// ;" yacctoken 1 { }	{ }
access_parm_map		integrate.c	/^access_parm_map (reladdress, mode)/ ;" function 84 { copy_rtx_and_substitute }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE SUBREG_REG SUBREG_WORD XEXP change_address first_parm_offset force_reg gen_rtx parm_map plus_constant rtx }
actualparameterlist		c-typeck.c	/^actualparameterlist (typelist, values, name)/ ;" function 90 { build_function_call }	{ IDENTIFIER_POINTER NULL NULL_TREE TREE_CHAIN TREE_CODE TREE_OPERAND TREE_TYPE TREE_VALUE TYPE_PRECISION TYPE_SIZE build_tree_list chainon convert convert_for_assignment default_conversion double_type_node error flag_traditional integer_type_node parm require_complete_type tree type void_type_node }
add_category		objc-actions.c	/^static / ;" function 6 { start_class }	{ }
add_class		objc-actions.c	/^static / ;" function 7 { finish_objc start_class }	{ TREE_CHAIN interface_chain }
add_class_method		objc-actions.c	/^add_class_method(tree class, tree method)/ ;" function 38 { }	{ IDENTIFIER_POINTER TREE_CHAIN TREE_CODE cls_method_hash_list comp_proto_with_proto error hash hash_add_attr hash_enter hash_lookup lookup_method tree }
add_class_reference		objc-actions.c	/^static void / ;" function 23 { generate_shared_structures get_class_reference get_super_receiver }	{ NULLT TREE_CHAIN TREE_VALUE cls_ref_chain perm_tree_cons tree }
add_double		fold-const.c	/^add_double (l1, h1, l2, h2, lv, hv)/ ;" function 21 { combine div_and_round_double }	{ decode encode }
add_incs		combine.c	/^add_incs (insn, incs)/ ;" function 10 { try_combine }	{ REG_NOTES REG_NOTE_KIND XEXP gen_rtx rtx }
add_insn		emit-rtl.c	/^add_insn (insn)/ ;" function 14 { emit_barrier emit_call_insn emit_insn emit_insns emit_jump_insn emit_label emit_note }	{ NEXT_INSN NULL PREV_INSN first_insn last_insn }
add_insn_after		emit-rtl.c	/^add_insn_after (insn, after)/ ;" function 21 { emit_barrier_after emit_insn_after emit_insn_before emit_jump_insn_after emit_label_after emit_note_after }	{ NEXT_INSN PREV_INSN XEXP last_insn rtx sequence_stack }
add_instance_method		objc-actions.c	/^add_instance_method(tree class, tree method)/ ;" function 38 { }	{ IDENTIFIER_POINTER TREE_CHAIN TREE_CODE comp_proto_with_proto error hash hash_add_attr hash_enter hash_lookup lookup_method nst_method_hash_list tree }
add_instance_variable		objc-actions.c	/^add_instance_variable(tree class, int isPublic, / ;" function 26 { }	{ TREE_PUBLIC build_tree_list chainon declarator grokfield input_filename ivar_decls lineno tree }
add_links		combine.c	/^add_links (insn, oinsn, all_links)/ ;" function 30 { try_combine try_distrib }	{ GET_CODE LOG_LINKS PATTERN SET_DEST XEXP dead_or_set_p rtx }
add_objc_decls		objc-actions.c	/^add_objc_decls()/ ;" function 9 { }	{ NULLT TREE_USED _OBJC_SUPER_decl _TAG_SUPER build_tree_list get_identifier objc_super_template start_decl }
add_objc_string		objc-actions.c	/^static int / ;" function 28 { add_selector_reference build_dispatch_table_initializer build_ivar_list_initializer generate_category generate_shared_structures init_module_descriptor }	{ IDENTIFIER_LENGTH NULLT TREE_CHAIN TREE_VALUE perm_tree_cons sel_refdef_chain tree }
add_optab		optabs.c	/^optab add_optab;/ ;" global 1 { expand_binop expand_builtin expand_divmod expand_expr expand_fix expand_float expand_inc expand_increment force_operand gen_add2_insn have_add2_insn have_sub2_insn init_optabs }	{ }
add_selector_reference		objc-actions.c	/^static int / ;" function 31 { build_message_expr build_selector_expr }	{ NULLT TREE_CHAIN TREE_VALUE add_objc_string max_selector_index perm_tree_cons sel_ref_chain tree }
addr_const		varasm.c	/^struct addr_const/ ;" struct 6 { compare_constant_1 const_hash record_constant_1 }	{ }
addr_overlap_p		loop.c	/^addr_overlap_p (other, base, size)/ ;" function 19 { invariant_p }	{ GET_CODE INTVAL XEXP refers_to_mem_p }
address_class		symseg.h	/^enum address_class/ ;" struct 22 { }	{ }
address_operand		recog.c	/^address_operand (op, mode)/ ;" function 6 { }	{ memory_address_p }
adj_offsettable_operand		recog.c	/^adj_offsettable_operand (op, offset)/ ;" function 32 { fixup_var_refs_1 optimize_bit_field output_btst output_move_double }	{ GET_CODE GET_MODE XEXP copy_rtx find_constant_term_loc gen_rtx plus_constant rtx rtx_code }
adjacent_insns_p		combine.c	/^adjacent_insns_p (i, j)/ ;" function 11 { try_combine try_distrib }	{ GET_CODE NEXT_INSN rtx }
adjust_stack		explow.c	/^adjust_stack (adjust)/ ;" function 11 { do_pending_stack_adjust emit_call_1 expand_call }	{ emit_insn gen_add2_insn gen_sub2_insn protect_from_queue stack_pointer_rtx }
adornDecl		objc-actions.c	/^static / ;" function 38 { genDeclarator }	{ TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_TYPE TREE_VALUE TYPE_ARG_TYPES TYPE_SIZE decl genDeclaration tmpbuf tree tree_code void_type_node }
after_insn_hard_regs		stupid.c	/^static HARD_REG_SET *after_insn_hard_regs;/ ;" global 1 { MARK_LIVE_AFTER stupid_find_reg stupid_life_analysis stupid_mark_refs }	{ }
after_type_declarator		objc-parse.y	/^after_type_declarator:/ ;" yacctoken 1 { }	{ }
agg_mode		stor-layout.c	/^agg_mode (size)/ ;" function 21 { layout_decl layout_type }	{ GET_MODE_CLASS GET_MODE_SIZE MAX_FIXED_MODE_SIZE machine_mode }
aggregate_value_p		stmt.c	/^aggregate_value_p (exp)/ ;" function 13 { assign_parms expand_call expand_function_start expand_inline_function init_function_start }	{ RETURN_IN_MEMORY TREE_CODE TREE_TYPE TYPE_MODE flag_pcc_struct_return }
all_minus_one		cse.c	/^static int *all_minus_one;/ ;" global 1 { cse_main new_basic_block }	{ }
all_sets_invariant_p		loop.c	/^all_sets_invariant_p (reg, insn, table)/ ;" function 23 { }	{ GET_CODE NEXT_INSN PATTERN REGNO SET_DEST SET_SRC invariant_p rtx rtx_code table }
all_types_permanent		tree.c	/^int all_types_permanent;/ ;" global 1 { make_node }	{ }
alloc_qty		local-alloc.c	/^alloc_qty (regno, mode, size, insn_number)/ ;" function 16 { reg_is_born wipe_dead_reg }	{ next_qty qty_birth qty_min_class qty_mode qty_n_calls_crossed qty_n_refs qty_preferred_or_nothing qty_size reg_n_calls_crossed reg_n_refs reg_offset reg_preferred_class reg_preferred_or_nothing reg_qty }
alloca		config.h	/^#define alloca __builtin_alloca/ ;" macro 1 { block_alloc build_keyword_selector c_expand_asm_operands check_asm_operands check_frame_pointer_required combine_instructions combine_movables count_loop_regs_set cse_basic_block cse_insn cse_main dump_tree eliminate_frame_pointer emit_library_call expand_asm_operands expand_call expand_end_case expand_inline_function find_basic_blocks flow_analysis gen_rtvec general_induction_var global_alloc global_conflicts jump_optimize life_analysis local_alloc loop_optimize move_movables propagate_block read_rtx regclass reload reload_as_needed save_for_inline scan_loop strength_reduce stupid_life_analysis symout_block symout_finish symout_source_file symout_sources symout_top_blocks symout_types tail_recursion_args }	{ }
allocate_for_life_analysis		flow.c	/^allocate_for_life_analysis ()/ ;" function 35 { life_analysis stupid_life_analysis }	{ REGSET_ELT_BITS REG_BLOCK_UNKNOWN basic_block_live_at_start init_regset_vector max_regno n_basic_blocks oballoc reg_basic_block reg_live_length reg_n_calls_crossed reg_n_deaths reg_n_refs reg_n_sets regs_live_at_setjmp regset regset_bytes regset_size }
allocation_temporary_p		tree.c	/^allocation_temporary_p ()/ ;" function 4 { build_int finish_decl grokdeclarator layout_type output_constant_def }	{ current_obstack temporary_obstack }
allocno_compare		global-alloc.c	/^allocno_compare (v1, v2)/ ;" function 24 { global_alloc }	{ allocno_reg allocno_size floor_log2 reg_live_length reg_n_refs }
allocno_order		global-alloc.c	/^static int *allocno_order;/ ;" global 1 { global_alloc }	{ }
allocno_reg		global-alloc.c	/^static int *allocno_reg;/ ;" global 1 { allocno_compare dump_conflicts find_reg global_alloc }	{ }
allocno_row_words		global-alloc.c	/^static int allocno_row_words;/ ;" global 1 { CONFLICTP SET_CONFLICT global_alloc global_conflicts record_conflicts record_one_conflict }	{ }
allocno_size		global-alloc.c	/^static int *allocno_size;/ ;" global 1 { allocno_compare dump_conflicts global_alloc }	{ }
allocnos_live		global-alloc.c	/^static int *allocnos_live;/ ;" global 1 { ALLOCNO_LIVE_P CLEAR_ALLOCNO_LIVE SET_ALLOCNO_LIVE global_alloc global_conflicts record_conflicts record_one_conflict }	{ }
alter_cond		final.c	/^alter_cond (cond)/ ;" function 137 { final_scan_insn }	{ CC_NOT_NEGATIVE CC_NOT_POSITIVE CC_NO_OVERFLOW CC_REVERSED CC_Z_IN_N CC_Z_IN_NOT_N GET_CODE PUT_CODE cc_status }
alter_frame_pointer_addresses		reload1.c	/^alter_frame_pointer_addresses (x, depth)/ ;" function 75 { alter_frame_pointer_addresses eliminate_frame_pointer }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH MEM_VOLATILE_P XEXP XVECEXP XVECLEN alter_frame_pointer_addresses frame_pointer_address_altered frame_pointer_rtx gen_rtx rtx rtx_code }
alter_reg		reload1.c	/^alter_reg (i, from_reg)/ ;" function 62 { delete_output_reload emit_reload_insns reload spill_hard_reg }	{ GET_CODE GET_MODE GET_MODE_SIZE NOTE_INSN_DELETED NOTE_LINE_NUMBER NOTE_SOURCE_FILE PSEUDO_REGNO_BYTES PUT_CODE REGNO XEXP assign_stack_local memory_address_p reg_equiv_address reg_equiv_constant reg_equiv_init reg_equiv_mem reg_n_refs reg_renumber regno_reg_rtx rtx spill_stack_slot }
alter_subreg		final.c	/^alter_subreg (x)/ ;" function 29 { alter_subreg final_scan_insn output_operand walk_alter_subreg }	{ GET_CODE GET_MODE GET_MODE_SIZE MEM_VOLATILE_P PUT_CODE REGNO SUBREG_REG SUBREG_WORD XEXP alter_subreg min plus_constant rtx }
alternative_allows_memconst		reload.c	/^alternative_allows_memconst (constraint, altnum)/ ;" function 18 { find_reloads }	{ }
and_optab		optabs.c	/^optab and_optab;/ ;" global 1 { expand_binop expand_bit_and init_optabs }	{ }
andcb_optab		optabs.c	/^optab andcb_optab;/ ;" global 1 { expand_binop init_optabs }	{ }
announce_function		toplev.c	/^announce_function (decl)/ ;" function 11 { start_function }	{ DECL_PRINT_NAME current_function_decl decl last_error_function need_error_newline quiet_flag }
anti_adjust_stack		explow.c	/^anti_adjust_stack (adjust)/ ;" function 11 { emit_push_insn expand_builtin expand_call expand_decl push_block }	{ emit_insn gen_add2_insn gen_sub2_insn protect_from_queue stack_pointer_rtx }
app_disable		final.c	/^app_disable ()/ ;" function 8 { assemble_function assemble_variable finish_objc }	{ app_on asm_out_file }
app_enable		final.c	/^app_enable ()/ ;" function 8 { assemble_asm }	{ app_on asm_out_file }
app_on		final.c	/^static int app_on;/ ;" global 1 { app_disable app_enable final_end_function final_scan_insn init_final }	{ }
arg_data		expr.c	/^struct arg_data/ ;" struct 26 { expand_call }	{ }
arg_pointer_rtx		emit-rtl.c	/^rtx arg_pointer_rtx;		\/* (REG:Pmode ARG_POINTER_RE/ ;" global 1 { FIXED_BASE_PLUS_P assign_parms copy_rtx_and_substitute copy_rtx_if_shared expand_inline_function find_reloads_address init_emit_once invariant_p memory_address use_variable use_variable_after }	{ }
args_size		expr.h	/^struct args_size/ ;" struct 6 { assign_parms emit_library_call expand_call gen_inline_header_rtx store_one_arg }	{ }
array_type_nelts		tree.c	/^array_type_nelts (type)/ ;" function 10 { }	{ TYPE_DOMAIN TYPE_MAX_VALUE TYPE_MIN_VALUE build fold integer_type_node integer_zero_node tree tree_int_cst_equal type }
ashl_optab		optabs.c	/^optab ashl_optab;/ ;" global 1 { expand_binop expand_expr expand_shift init_optabs }	{ }
ashr_optab		optabs.c	/^optab ashr_optab;/ ;" global 1 { expand_expr expand_shift init_optabs }	{ }
asm_clobbers		objc-parse.y	/^asm_clobbers:/ ;" yacctoken 1 { }	{ }
asm_file_name		toplev.c	/^char *asm_file_name;/ ;" global 1 { Mtoplev compile_file }	{ }
asm_noperands		recog.c	/^asm_noperands (body)/ ;" function 66 { check_asm_operands choose_reload_regs emit_reload_insns final_scan_insn find_reloads regclass }	{ GET_CODE SET_SRC XVEC XVECEXP XVECLEN rtx }
asm_operand		objc-parse.y	/^asm_operand:/ ;" yacctoken 1 { }	{ }
asm_operands		objc-parse.y	/^asm_operands: \/* empty *\// ;" yacctoken 1 { }	{ }
asm_out_file		toplev.c	/^FILE *asm_out_file;/ ;" global 1 { ASM_IDENTIFY_GCC PUT_SDB_BLOCK_END PUT_SDB_BLOCK_START PUT_SDB_DEF PUT_SDB_DIM PUT_SDB_ENDEF PUT_SDB_EPILOGUE_END PUT_SDB_FUNCTION_END PUT_SDB_FUNCTION_START PUT_SDB_INT_VAL PUT_SDB_PLAIN_DEF PUT_SDB_SCL PUT_SDB_SIZE PUT_SDB_TAG PUT_SDB_TYPE PUT_SDB_VAL app_disable app_enable assemble_asm assemble_external assemble_function assemble_integer_zero assemble_static_space assemble_string assemble_variable check_newline compile_file data_section end_final final_scan_insn force_const_mem get_or_assign_label output_addr_const output_address output_asm_insn output_asm_label output_constant output_constructor output_operand rest_of_compilation text_section }	{ }
asmfile		symout.c	/^static FILE *asmfile;/ ;" global 1 { dbxout_args dbxout_block dbxout_continue dbxout_finish_symbol dbxout_init dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags dbxout_type dbxout_type_name symout_block symout_block_symbols symout_init symout_source_file symout_top_blocks }	{ }
assemble_asm		varasm.c	/^assemble_asm (string)/ ;" function 7 { finish_objc }	{ TREE_STRING_POINTER app_enable asm_out_file string }
assemble_external		varasm.c	/^assemble_external (decl)/ ;" function 13 { }	{ DECL_RTL GET_CODE XEXP XSTR asm_out_file decl rtx }
assemble_function		varasm.c	/^assemble_function (decl)/ ;" function 55 { rest_of_compilation }	{ DECL_RTL GET_CODE TREE_PUBLIC XEXP XSTR app_disable asm_out_file current_function_decl decl floor_log2 gettags rtx sdbout_mark_begin_function sdbout_tags text_section write_symbols }
assemble_integer_zero		varasm.c	/^assemble_integer_zero ()/ ;" function 4 { end_final final_start_function }	{ asm_out_file const0_rtx }
assemble_name		varasm.c	/^assemble_name (file, name)/ ;" function 9 { dbxout_block output_addr_const output_asm_label }	{ }
assemble_static_space		varasm.c	/^assemble_static_space (size)/ ;" function 25 { expand_function_start }	{ asm_out_file const_labelno data_section flag_shared_data gen_rtx rtx saveable_obstack }
assemble_string		varasm.c	/^assemble_string (p, size)/ ;" function 49 { end_final output_constant }	{ asm_out_file }
assemble_variable		varasm.c	/^assemble_variable (decl, top_level, write_symbols,/ ;" function 164 { rest_of_decl_compilation }	{ DECL_ALIGN DECL_INITIAL DECL_NAME DECL_RTL DECL_SIZE DECL_SIZE_UNIT DECL_SOURCE_FILE DECL_SOURCE_LINE GET_CODE IDENTIFIER_POINTER TREE_ASM_WRITTEN TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_INT_CST_LOW TREE_LITERAL TREE_PUBLIC TREE_READONLY TREE_TYPE TREE_VALUE TREE_VOLATILE XEXP XSTR app_disable asm_out_file data_section dbxout_symbol decl error_mark_node error_with_file_and_line flag_no_common flag_shared_data int_size_in_bytes layout_decl output_addressed_constants output_constant pedantic sdbout_symbol set_current_gdbfile text_section tree write_symbols }
assign_parms		stmt.c	/^assign_parms (fndecl)/ ;" function 431 { expand_function_start }	{ ADD_PARM_SIZE ARGS_SIZE_RTX DECL_ARGUMENTS DECL_ARG_TYPE DECL_NAME DECL_OFFSET DECL_RESULT DECL_RTL FUNCTION_ARG_PADDING GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE IDENTIFIER_POINTER MEM_IN_STRUCT_P MEM_VOLATILE_P NULL REGNO REG_NOTES REG_USERVAR_P RTX_UNCHANGING_P SUB_PARM_SIZE TREE_ADDRESSABLE TREE_CHAIN TREE_CODE TREE_INLINE TREE_READONLY TREE_REGDECL TREE_TYPE TREE_USED TREE_VALUE TREE_VOLATILE TYPE_ALIGN TYPE_ARG_TYPES TYPE_MODE TYPE_SIZE XEXP aggregate_value_p arg_pointer_rtx args_size assign_stack_local const0_rtx convert_move convert_to_mode convert_units copy_to_reg current_function_args_size current_function_pretend_args_size direction emit_move_insn error_mark_node expand_expr first_parm_offset fixed_regs flag_float_store frame_pointer_needed gen_reg_rtx gen_rtx get_last_insn int_size_in_bytes (etc) }
assign_stack_local		stmt.c	/^assign_stack_local (mode, size)/ ;" function 40 { alter_reg assign_parms build_conditional_expr expand_call expand_decl expand_expr expand_inline_function get_structure_value_addr grow_save_block output_inline_function put_var_into_stack save_noncopied_parts }	{ GET_MODE_SIZE frame_offset frame_pointer_needed frame_pointer_rtx gen_rtx invalid_stack_slot memory_address_p rtx stack_slot_list }
attr		objc-actions.c	/^typedef struct hashedAttribute  *attr;/ ;" typedef 1 { check_duplicates finish_objc hash_add_attr }	{ }
balance_case_nodes		stmt.c	/^balance_case_nodes (head, parent)/ ;" function 68 { balance_case_nodes expand_end_case }	{ balance_case_nodes case_node_ptr tree_int_cst_equal }
basic_block_drops_in		flow.c	/^static char *basic_block_drops_in;/ ;" global 1 { dump_flow_info find_basic_blocks flow_analysis life_analysis }	{ }
basic_block_end		flow.c	/^rtx *basic_block_end;/ ;" global 1 { block_alloc dump_flow_info find_basic_blocks flow_analysis global_conflicts life_analysis save_call_clobbered_regs }	{ }
basic_block_head		flow.c	/^rtx *basic_block_head;/ ;" global 1 { block_alloc dump_flow_info find_basic_blocks flow_analysis global_alloc global_conflicts life_analysis regclass reload reload_as_needed save_call_clobbered_regs }	{ }
basic_block_live_at_start		flow.c	/^regset *basic_block_live_at_start;/ ;" global 1 { allocate_for_life_analysis block_alloc dump_flow_info global_conflicts life_analysis regno_uninitialized save_call_clobbered_regs try_combine try_distrib }	{ }
basic_block_loop_depth		flow.c	/^static short *basic_block_loop_depth;/ ;" global 1 { find_basic_blocks flow_analysis propagate_block }	{ }
basic_block_needs		reload1.c	/^char *basic_block_needs;/ ;" global 1 { reload reload_as_needed spill_hard_reg }	{ }
basic_induction_var		loop.c	/^basic_induction_var (x, dest_regno, inc_val, mult_/ ;" function 66 { strength_reduce }	{ GET_CODE INTVAL REGNO XEXP const0_rtx const1_rtx gen_rtx invariant_p loops_enclosed rtx rtx_code }
bcc_gen_fctn		optabs.c	/^rtxfun bcc_gen_fctn[NUM_RTX_CODE];/ ;" global 1 { do_jump expand_expr init_optabs }	{ }
binary_op_error		c-typeck.c	/^binary_op_error (code)/ ;" function 53 { build_binary_op_nodefault }	{ error }
binding_level		c-decl.c	/^struct binding_level/ ;" struct 46 { NULL_BINDING_LEVEL lookup_tag lookup_tag_reverse make_binding_level poplevel pushdecl pushlevel pushtag }	{ }
block		symseg.h	/^struct block/ ;" struct 30 { expand_anon_union_decl expand_decl expand_end_bindings expand_fixup expand_goto_internal expand_label expand_null_return expand_return expand_start_bindings fixup_gotos move_cleanups_up poplevel setjmp_protect symout_block symout_top_blocks this_contour_has_cleanups_p uninitialized_vars_warning }	{ }
block_alloc		local-alloc.c	/^block_alloc (b)/ ;" function 293 { local_alloc }	{ CONSTANT_P COPY_HARD_REG_SET EXCHANGE GET_CODE GET_MODE GET_RTX_FORMAT HARD_REG_SET IOR_HARD_REG_SET NEXT_INSN PATTERN PREV_INSN REGNO REG_BLOCK_GLOBAL REG_NOTES REG_NOTE_KIND SET_DEST SET_SRC SUBREG_REG XEXP XVECEXP alloca basic_block_end basic_block_head basic_block_live_at_start call_seen combine_regs find_free_reg frame_pointer_needed general_operand max_regno next_qty note_stores qty_birth qty_compare qty_compare_1 qty_death qty_min_class qty_mode qty_phys_reg qty_preferred_or_nothing qty_size recog_memoized reg_basic_block reg_is_set reg_live_length reg_n_refs reg_n_sets reg_offset reg_qty reg_renumber regs_live regs_live_at rtx this_insn this_insn_number wipe_dead_reg }
block_depth		final.c	/^static int block_depth;/ ;" global 1 { final_scan_insn final_start_function }	{ }
block_live_static		flow.c	/^static char *block_live_static;/ ;" global 1 { find_basic_blocks mark_label_ref }	{ }
block_stack		stmt.c	/^struct nesting *block_stack;/ ;" global 1 { expand_anon_union_decl expand_decl expand_end_bindings expand_fixup expand_goto_internal expand_null_return expand_return expand_start_bindings init_function_start move_cleanups_up this_contour_has_cleanups_p }	{ }
blockvec		symout.c	/^static struct blockvec_elt *blockvec;/ ;" global 1 { symout_block symout_finish symout_init symout_top_blocks }	{ }
blockvec_elt		symout.c	/^struct blockvec_elt/ ;" struct 6 { symout_block symout_top_blocks }	{ }
blockvector		symseg.h	/^struct blockvector/ ;" struct 8 { symout_finish }	{ }
botch		toplev.c	/^botch (s)/ ;" function 4 { }	{ }
break_out_memory_refs		explow.c	/^break_out_memory_refs (x)/ ;" function 20 { break_out_memory_refs memory_address }	{ GET_CODE XEXP break_out_memory_refs force_reg gen_rtx mark_reg_pointer rtx }
build		tree.c	/^build (va_alist)/ ;" function 39 { array_type_nelts build_array_ref build_binary_op_nodefault build_c_cast build_category_template build_class_template build_component_ref build_compound_expr build_conditional_expr build_function_call build_indirect_ref build_ivar_template build_keyword_decl build_method_decl build_method_template build_modify_expr build_module_descriptor build_msg_pool_reference build_objc_symtab_template build_private_template build_selector_translation_table build_super_template build_unary_op c_expand_return combine convert convert_to_integer convert_to_pointer convert_to_real default_conversion digest_init expand_call expand_end_case expand_expr expand_increment expand_mult_add finish_class fold generate_shared_structures genop get_narrower get_unwidened invert_truthvalue make_pointer_declarator pointer_diff pointer_int_sum process_init_constructor save_expr shorten_compare start_method_def synth_module_prologue truthvalue_conversion unary_complex_lvalue }	{ TREE_OPERAND TREE_TYPE TREE_VOLATILE make_node tree tree_code tree_code_length }
build_array_ref		c-typeck.c	/^build_array_ref (array, index)/ ;" function 71 { build_message_expr build_msg_pool_reference build_selector_expr }	{ TREE_CODE TREE_OPERAND TREE_READONLY TREE_REGDECL TREE_THIS_VOLATILE TREE_TYPE TREE_VOLATILE TYPE_SIZE build build_binary_op_nodefault build_indirect_ref default_conversion error error_mark_node fold lvalue_p mark_addressable pedantic require_complete_type tree warning }
build_array_type		tree.c	/^build_array_type (elt_type, index_type)/ ;" function 28 { combine_strings commontype grokdeclarator init_decl_processing my_build_string }	{ TREE_CODE TREE_TYPE TYPE_DOMAIN TYPE_HASH TYPE_SIZE build_pointer_type error integer_type_node layout_type make_node tree type_hash_canon }
build_asm_stmt		tree.c	/^build_asm_stmt (filename, line, asmcode)/ ;" function 11 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_binary_op		c-typeck.c	/^build_binary_op (code, arg1, arg2)/ ;" function 7 { build_modify_expr build_unary_op grokdeclarator pointer_diff pointer_int_sum }	{ build_binary_op_nodefault default_conversion }
build_binary_op_nodefault		c-typeck.c	/^build_binary_op_nodefault (code, op0, op1, error_c/ ;" function 479 { build_array_ref build_binary_op build_enumerator convert_to_integer truthvalue_conversion }	{ NULL TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_OPERAND TREE_TYPE TREE_UNSIGNED TYPE_PRECISION binary_op_error build commontype comp_target_types convert datatype error_mark_node flag_traditional fold get_narrower int_fits_type_p integer_type_node integer_zerop null_pointer_node pedantic pointer_diff pointer_int_sum shorten_compare signed_or_unsigned_type tree tree_code truthvalue_conversion type void_type_node warning }
build_c_cast		c-typeck.c	/^build_c_cast (type, expr)/ ;" function 58 { }	{ TREE_CODE TREE_LITERAL TREE_OPERAND TREE_READONLY TREE_TYPE TREE_VOLATILE TYPE_MAIN_VARIANT build convert default_conversion error_mark_node expr pedantic tree type warn_cast_qual warning }
build_case		tree.c	/^build_case (filename, line, object, cases)/ ;" function 12 { }	{ STMT_CASE_INDEX STMT_CASE_LIST STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_category_initializer		objc-actions.c	/^static tree build_category_initializer(tree cat_na/ ;" function 24 { generate_category }	{ NULLT build_int_2 build_nt build_unary_op expr initlist nreverse tree tree_cons }
build_category_template		objc-actions.c	/^static void build_category_template()/ ;" function 38 { generate_objc_symtab_decl }	{ NULLT _TAG_CATEGORY _TAG_METHOD_LIST build build_tree_list chainon finish_struct get_identifier grokfield input_filename lineno objc_category_template ridpointers start_struct tree xref_tag }
build_class_template		objc-actions.c	/^static void build_class_template()/ ;" function 74 { continue_class }	{ NULLT _TAG_CLASS _TAG_IVAR_LIST _TAG_METHOD_LIST build build_tree_list chainon finish_struct get_identifier grokfield input_filename lineno objc_class_template ridpointers start_struct tree xref_tag }
build_complex		tree.c	/^build_complex (real, imag)/ ;" function 8 { combine }	{ TREE_IMAGPART TREE_REALPART make_node tree }
build_component_ref		c-typeck.c	/^build_component_ref (datum, component)/ ;" function 53 { build_ivar_reference get_super_receiver save_noncopied_parts synth_forward_declarations }	{ DECL_NAME IDENTIFIER_POINTER NULL TREE_CHAIN TREE_CODE TREE_READONLY TREE_THIS_VOLATILE TREE_TYPE TREE_VOLATILE TYPE_FIELDS TYPE_SIZE build error error_mark_node incomplete_type_error tree tree_code }
build_compound		tree.c	/^build_compound (filename, line, body)/ ;" function 11 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_compound_expr		c-typeck.c	/^build_compound_expr (list)/ ;" function 23 { build_compound_expr get_super_receiver }	{ TREE_CHAIN TREE_CODE TREE_OPERAND TREE_TYPE TREE_VALUE TREE_VOLATILE build build_compound_expr tree }
build_conditional_expr		c-typeck.c	/^build_conditional_expr (ifexp, op1, op2)/ ;" function 174 { build_modify_expr unary_complex_lvalue }	{ DECL_MODE DECL_RTL DECL_SIZE DECL_SIZE_UNIT NULL NULL_TREE TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_TYPE TREE_VOLATILE TYPE_MAIN_VARIANT TYPE_MODE assign_stack_local build build_decl build_modify_expr build_pointer_type commontype comp_target_types convert default_conversion error error_mark_node flag_cond_mismatch integer_zerop layout_decl null_pointer_node pedantic qualify_type save_expr tree tree_code truthvalue_conversion void_type_node warning }
build_decl		tree.c	/^build_decl (code, name, type)/ ;" function 30 { build_conditional_expr build_enumerator builtin_function copy_decl_tree copy_parm_decls emit_case_nodes expand_end_case grokdeclarator implicitly_declare init_decl_processing lookup_label start_function store_parm_decls }	{ DECL_ARGUMENTS DECL_ASSEMBLER_NAME DECL_INITIAL DECL_MODE DECL_NAME DECL_PRINT_NAME IDENTIFIER_POINTER NULL_TREE TREE_TYPE layout_decl make_node tree type }
build_dispatch_table_initializer		objc-actions.c	/^static tree build_dispatch_table_initializer(tree / ;" function 26 { generate_dispatch_tables }	{ BUFSIZE NULLT NeXT_ENCODE_DONT_INLINE_DEFS TREE_CHAIN TREE_TYPE add_objc_string build_msg_pool_reference build_nt encode_method_decl get_identifier init_selector initlist nreverse tree tree_cons utlbuf }
build_encode_expr		objc-actions.c	/^tree / ;" function 11 { }	{ BUFSIZE NeXT_ENCODE_INLINE_DEFS encode_type my_build_string type utlbuf }
build_enumerator		c-decl.c	/^build_enumerator (name, value)/ ;" function 35 { }	{ DECL_INITIAL IDENTIFIER_POINTER NULL TREE_CODE TREE_OPERAND TREE_TYPE build_binary_op_nodefault build_decl decl enum_next_value error integer_one_node integer_type_node pushdecl saveable_tree_cons tree }
build_exit		tree.c	/^build_exit (filename, line, cond)/ ;" function 11 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_expr_stmt		tree.c	/^build_expr_stmt (filename, line, expr)/ ;" function 12 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE expr line make_node tree }
build_function_call		c-typeck.c	/^build_function_call (function, params)/ ;" function 76 { build_message_expr get_class_reference get_super_receiver }	{ DECL_FUNCTION_CODE DECL_NAME NULL_TREE TREE_CODE TREE_OPERAND TREE_TYPE TREE_VALUE TREE_VOLATILE TYPE_ARG_TYPES actualparameterlist build build_pointer_type build_unary_op default_conversion error error_mark_node integer_zero_node require_complete_type tree void_type_node }
build_function_type		tree.c	/^build_function_type (value_type, arg_types)/ ;" function 26 { commontype grokdeclarator init_decl_processing start_function }	{ TREE_CODE TREE_TYPE TYPE_ARG_TYPES TYPE_HASH TYPE_SIZE error integer_type_node layout_type make_node tree type_hash_canon type_hash_list }
build_goto		tree.c	/^build_goto (filename, line, label)/ ;" function 11 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_if		tree.c	/^build_if (filename, line, cond, thenclause, elsecl/ ;" function 14 { }	{ STMT_COND STMT_ELSE STMT_SOURCE_FILE STMT_SOURCE_LINE STMT_THEN line make_node tree }
build_index_type		tree.c	/^build_index_type (maxval)/ ;" function 15 { combine_strings complete_array_type grokdeclarator my_build_string }	{ TREE_INT_CST_LOW TREE_TYPE TYPE_ALIGN TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_MODE TYPE_PRECISION TYPE_SIZE TYPE_SIZE_UNIT build_int_2 convert make_node sizetype tree type_hash_canon }
build_indirect_ref		c-typeck.c	/^build_indirect_ref (ptr, errorstring)/ ;" function 27 { build_array_ref build_ivar_reference }	{ TREE_CODE TREE_OPERAND TREE_READONLY TREE_THIS_VOLATILE TREE_TYPE TREE_VOLATILE TYPE_MAIN_VARIANT build default_conversion error error_mark_node tree }
build_int		stor-layout.c	/^build_int (v)/ ;" function 28 { c_alignof c_sizeof c_sizeof_nowarn convert_units layout_decl layout_record layout_type layout_union variable_size }	{ TREE_TYPE allocation_temporary_p build_int_2 end_temporary_allocation resume_temporary_allocation sizetype tree }
build_int_2		tree.c	/^build_int_2 (low, hi)/ ;" function 9 { build_category_initializer build_index_type build_int build_ivar_list_initializer build_ivar_list_template build_message_expr build_method_list_template build_msg_pool_reference build_objc_symtab_template build_selector_expr build_shared_structure_initializer build_unary_op combine combine_strings complete_array_type convert_to_integer convert_to_pointer do_store_flag expand_divmod expand_end_case expand_expr expand_mult extract_fixed_bit_field extract_split_bit_field fixup_unsigned_type fold fold_convert generate_dispatch_table generate_ivars_list generate_shared_structures grokdeclarator group_case_nodes init_decl_processing init_module_descriptor init_objc_symtab make_signed_type make_tree my_build_string node_has_high_bound node_has_low_bound objc_copy_list store_fixed_bit_field yylex }	{ TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_TYPE integer_type_node make_node tree }
build_ivar_chain		objc-actions.c	/^static tree build_ivar_chain(tree interface)/ ;" function 37 { build_private_template continue_class get_class_ivars }	{ IDENTIFIER_POINTER TREE_CHAIN error ivar_decls lookup_interface objc_copy_list tree }
build_ivar_list_initializer		objc-actions.c	/^static tree build_ivar_list_initializer(tree field/ ;" function 29 { generate_ivar_lists }	{ BUFSIZE DECL_NAME DECL_OFFSET DECL_SIZE_UNIT NULLT NeXT_ENCODE_DONT_INLINE_DEFS TREE_CHAIN add_objc_string build_int_2 build_msg_pool_reference build_nt encode_field_decl get_identifier initlist nreverse tree tree_cons utlbuf }
build_ivar_list_template		objc-actions.c	/^static tree build_ivar_list_template(tree list_typ/ ;" function 28 { generate_ivar_lists }	{ NULLT build_int_2 build_nt build_tree_list chainon finish_struct get_identifier grokfield input_filename lineno ridpointers start_struct tree }
build_ivar_reference		objc-actions.c	/^tree / ;" function 7 { }	{ TREE_CODE TREE_TYPE build_component_ref build_indirect_ref instance_type method_context self_decl }
build_ivar_template		objc-actions.c	/^static tree build_ivar_template()/ ;" function 36 { generate_ivar_lists }	{ NULLT _TAG_IVAR build build_tree_list chainon finish_struct get_identifier grokfield input_filename lineno ridpointers start_struct tree }
build_keyword_decl		objc-actions.c	/^tree / ;" function 17 { }	{ NULLT TREE_TYPE build build_tree_list make_node objc_object_reference tree }
build_keyword_selector		objc-actions.c	/^build_keyword_selector (tree selector)/ ;" function 34 { build_message_expr build_method_decl build_selector_expr }	{ IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_PURPOSE alloca get_identifier selector tree }
build_let		tree.c	/^build_let (filename, line, vars, subblocks, superc/ ;" function 15 { poplevel }	{ STMT_BIND_SIZE STMT_SOURCE_FILE STMT_SOURCE_LINE STMT_SUBBLOCKS STMT_SUPERCONTEXT STMT_TYPE_TAGS STMT_VARS line make_node tree }
build_loop		tree.c	/^build_loop (filename, line, body)/ ;" function 11 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_message_expr		objc-actions.c	/^build_message_expr(tree mess)/ ;" function 221 { }	{ BUFSIZE IDENTIFIER_POINTER METHOD_REF NULLT TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_STATIC_TEMPLATE TREE_TYPE TREE_VALUE TYPE_ARG_TYPES TYPE_NAME _OBJC_SELECTOR_REFERENCES_decl _msgSuper_decl _msg_decl add_selector_reference build_array_ref build_function_call build_int_2 build_keyword_selector build_tree_list build_unary_op chainon check_duplicates class_type cls_method_hash_list errbuf error error_mark_node genDeclaration getArgTypeList groktypename hash hash_lookup id_type implementation_context implementation_template lookup_class_method_static lookup_instance_method_static lookup_interface lookup_method method_context nst_method_hash_list receiver receiver_is_class_object super_type tree warning }
build_message_selector_pool		objc-actions.c	/^static void build_message_selector_pool()/ ;" function 32 { finish_objc }	{ IDENTIFIER_LENGTH IDENTIFIER_POINTER NULLT TREE_CHAIN TREE_VALUE _OBJC_STRINGS_decl build_nt finish_decl get_identifier my_build_string ridpointers sel_refdef_chain start_decl tree tree_cons }
build_method_decl		objc-actions.c	/^build_method_decl (enum tree_code code, tree ret_t/ ;" function 33 { }	{ NULLT TREE_CODE TREE_TYPE build build_keyword_selector build_tree_list input_filename lineno make_node objc_object_reference selector tree }
build_method_list_template		objc-actions.c	/^static tree build_method_list_template(tree list_t/ ;" function 36 { generate_dispatch_tables }	{ NULLT build_int_2 build_nt build_tree_list chainon finish_struct get_identifier grokfield input_filename lineno ridpointers start_struct tree }
build_method_template		objc-actions.c	/^static tree build_method_template()/ ;" function 55 { generate_dispatch_tables }	{ NULLT TAG_SELECTOR _TAG_METHOD build chainon finish_struct get_identifier grokfield input_filename lineno parms ridpointers start_struct tree tree_cons xref_tag }
build_method_type		tree.c	/^build_method_type (basetype, type)/ ;" function 30 { }	{ NULL TREE_CODE TREE_TYPE TYPE_ARG_TYPES TYPE_HASH TYPE_METHOD_BASETYPE TYPE_SIZE build_pointer_type layout_type make_node tree tree_cons type type_hash_canon }
build_modify_expr		c-typeck.c	/^build_modify_expr (lhs, modifycode, rhs)/ ;" function 145 { build_conditional_expr build_modify_expr build_unary_op c_expand_asm_operands get_super_receiver }	{ C_TYPE_FIELDS_READONLY TREE_CODE TREE_OPERAND TREE_READONLY TREE_TYPE TREE_VOLATILE build build_binary_op build_conditional_expr build_modify_expr convert convert_for_assignment copy_node default_conversion error_mark_node get_unwidened lvalue_or_else pedantic readonly_warning require_complete_type save_expr stabilize_reference tree }
build_module_descriptor		objc-actions.c	/^static void build_module_descriptor()/ ;" function 50 { finish_objc }	{ NULLT TREE_USED _OBJC_MODULES_decl _TAG_MODULE _TAG_SYMTAB build build_tree_list chainon finish_decl finish_struct get_identifier grokfield init_module_descriptor input_filename lineno objc_module_template ridpointers start_decl start_struct tree tree_cons xref_tag }
build_msg_pool_reference		objc-actions.c	/^static tree build_msg_pool_reference(int offset)/ ;" function 13 { build_dispatch_table_initializer build_ivar_list_initializer generate_category generate_shared_structures init_module_descriptor init_selector }	{ NULLT TREE_TYPE _OBJC_STRINGS_decl build build_array_ref build_int_2 build_tree_list build_unary_op expr groktypename ridpointers tree }
build_nt		tree.c	/^build_nt (va_alist)/ ;" function 21 { build_category_initializer build_dispatch_table_initializer build_ivar_list_initializer build_ivar_list_template build_message_selector_pool build_method_list_template build_objc_symtab_template build_selector_translation_table build_shared_structure_initializer digest_init expand_asm_operands generate_dispatch_table generate_forward_declaration_to_string_table generate_ivars_list init_def_list init_module_descriptor init_objc_symtab reallyStartMethod save_noncopied_parts stabilize_reference synth_module_prologue }	{ TREE_OPERAND make_node tree tree_code tree_code_length }
build_objc_selector_template		objc-actions.c	/^static void build_objc_selector_template()/ ;" function 17 { synth_module_prologue }	{ NULLT TAG_SELECTOR build_tree_list finish_struct get_identifier grokfield input_filename lineno objc_selector_template ridpointers start_struct tree tree_cons }
build_objc_symtab_template		objc-actions.c	/^static void build_objc_symtab_template()/ ;" function 70 { generate_objc_symtab_decl }	{ NULLT TAG_SELECTOR _TAG_SYMTAB build build_int_2 build_nt build_tree_list cat_count chainon finish_struct get_identifier grokfield imp_count input_filename lineno objc_symtab_template ridpointers start_struct tree tree_cons xref_tag }
build_offset_type		tree.c	/^build_offset_type (basetype, type)/ ;" function 21 { }	{ TREE_TYPE TYPE_HASH TYPE_OFFSET_BASETYPE TYPE_SIZE layout_type make_node tree type type_hash_canon }
build_op_identifier		tree.c	/^build_op_identifier (op1, op2)/ ;" function 8 { }	{ TREE_PURPOSE TREE_VALUE make_node tree }
build_pointer_type		tree.c	/^build_pointer_type (to_type)/ ;" function 34 { build_array_type build_conditional_expr build_function_call build_method_type build_unary_op commontype datatype default_conversion expand_call expand_function_end grokdeclarator init_decl_processing layout_type sdbout_symbol }	{ TREE_PERMANENT TREE_TYPE TYPE_POINTER_TO current_obstack layout_type make_node permanent_obstack saveable_obstack tree }
build_private_template		objc-actions.c	/^static tree build_private_template(tree class)/ ;" function 27 { continue_class }	{ NULLT TREE_STATIC_TEMPLATE TYPE_FIELDS _PRIVATE_record build build_ivar_chain build_tree_list finish_struct groktypename instance_type start_struct tree }
build_real		tree.c	/^build_real (type, d)/ ;" function 17 { combine fold fold_convert yylex }	{ TREE_REAL_CST TREE_TYPE TYPE_MODE make_node tree type }
build_real_from_int_cst		tree.c	/^build_real_from_int_cst (type, i)/ ;" function 20 { fold_convert real_zerop }	{ REAL_VALUE_TYPE TREE_REAL_CST TREE_TYPE TYPE_MODE make_node real_value_from_int_cst tree type }
build_reference_type		tree.c	/^build_reference_type (to_type)/ ;" function 31 { }	{ TREE_PERMANENT TREE_TYPE TYPE_REFERENCE_TO current_obstack layout_type make_node permanent_obstack saveable_obstack tree }
build_return		tree.c	/^build_return (filename, line, arg)/ ;" function 12 { }	{ STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE line make_node tree }
build_selector_expr		objc-actions.c	/^tree / ;" function 24 { }	{ TREE_CODE _OBJC_SELECTOR_REFERENCES_decl add_selector_reference build_array_ref build_int_2 build_keyword_selector build_unary_op tree }
build_selector_translation_table		objc-actions.c	/^static void build_selector_translation_table()/ ;" function 56 { finish_objc }	{ IDENTIFIER_LENGTH NULLT TAG_SELECTOR TREE_CHAIN TREE_VALUE _OBJC_SELECTOR_REFERENCES_decl _OBJC_SELECTOR_REFERENCES_id build build_nt expr finish_decl get_identifier init_selector initlist nreverse ridpointers sel_ref_chain start_decl tree tree_cons xref_tag }
build_shared_structure_initializer		objc-actions.c	/^static tree build_shared_structure_initializer(tre/ ;" function 47 { generate_shared_structures }	{ NULLT build_int_2 build_nt build_unary_op expr initlist nreverse tree tree_cons }
build_string		tree.c	/^build_string (len, str)/ ;" function 9 { my_build_string yylex }	{ TREE_STRING_LENGTH TREE_STRING_POINTER make_node saveable_obstack tree }
build_super_template		objc-actions.c	/^static tree build_super_template()/ ;" function 30 { start_class }	{ NULLT _TAG_CLASS _TAG_SUPER build build_tree_list chainon finish_struct get_identifier grokfield groktypename input_filename lineno objc_object_reference start_struct super_type tree xref_tag }
build_tree_list		tree.c	/^build_tree_list (parm, value)/ ;" function 8 { actualparameterlist add_instance_variable add_objc_decls build_category_template build_class_template build_ivar_list_template build_ivar_template build_keyword_decl build_message_expr build_method_decl build_method_list_template build_module_descriptor build_msg_pool_reference build_objc_selector_template build_objc_symtab_template build_private_template build_super_template digest_init finish_class forward_declare_categories generate_dispatch_table generate_dispatch_tables generate_ivar_lists generate_ivars_list generate_objc_symtab_decl generate_shared_structures getArgTypeList get_class_reference get_super_receiver init_module_descriptor init_objc_symtab start_method_def synth_forward_declarations synth_module_prologue }	{ TREE_PURPOSE TREE_VALUE make_node parm tree }
build_type_variant		tree.c	/^build_type_variant (type, constp, volatilep)/ ;" function 35 { build_unary_op combine_strings commontype default_conversion grokdeclarator qualify_type }	{ TREE_PERMANENT TREE_READONLY TREE_VOLATILE TYPE_MAIN_VARIANT TYPE_NEXT_VARIANT TYPE_POINTER_TO TYPE_REFERENCE_TO copy_node current_obstack permanent_obstack saveable_obstack tree type }
build_unary_op		c-typeck.c	/^build_unary_op (code, xarg, noconvert)/ ;" function 271 { build_category_initializer build_function_call build_message_expr build_msg_pool_reference build_selector_expr build_shared_structure_initializer build_unary_op convert_to_integer default_conversion generate_shared_structures get_super_receiver init_def_list init_module_descriptor invert_truthvalue truthvalue_conversion unary_complex_lvalue }	{ DECL_NAME DECL_OFFSET IDENTIFIER_POINTER NULL TREE_CODE TREE_LITERAL TREE_OPERAND TREE_PACKED TREE_READONLY TREE_THIS_VOLATILE TREE_TYPE TREE_VOLATILE build build_binary_op build_int_2 build_modify_expr build_pointer_type build_type_variant build_unary_op c_sizeof_nowarn convert default_conversion error error_mark_node fold get_unwidened integer_one_node invert_truthvalue lvalue_or_else mark_addressable pedantic readonly_warning save_expr stabilize_reference staticp tree tree_code truthvalue_conversion unary_complex_lvalue warning }
built_in_function		tree.h	/^enum built_in_function/ ;" struct 30 { DECL_FUNCTION_CODE }	{ }
builtin_function		c-decl.c	/^builtin_function (name, type, function_code)/ ;" function 12 { init_decl_processing }	{ DECL_SET_FUNCTION_CODE TREE_EXTERNAL TREE_PUBLIC build_decl decl get_identifier make_decl_rtl pushdecl tree type }
c_alignof		c-typeck.c	/^c_alignof (type)/ ;" function 13 { }	{ TREE_CODE TYPE_ALIGN build_int tree_code type }
c_expand_asm_operands		c-typeck.c	/^c_expand_asm_operands (string, outputs, inputs, cl/ ;" function 49 { }	{ C_TYPE_FIELDS_READONLY TREE_CHAIN TREE_CODE TREE_READONLY TREE_TYPE TREE_VALUE alloca build_modify_expr default_conversion emit_queue expand_asm_operands expand_expr line list_length readonly_warning string tree type }
c_expand_return		c-typeck.c	/^c_expand_return (retval)/ ;" function 32 { }	{ DECL_RESULT TREE_CODE TREE_THIS_VOLATILE TREE_TYPE build convert convert_for_assignment current_function_decl current_function_returns_null current_function_returns_value expand_null_return expand_return pedantic tree warn_return_type warning }
c_expand_start_case		c-typeck.c	/^c_expand_start_case (exp)/ ;" function 31 { }	{ TREE_CODE TREE_TYPE TREE_UNSIGNED default_conversion error error_mark_node expand_start_case get_unwidened tree tree_code type }
c_sizeof		c-typeck.c	/^c_sizeof (type)/ ;" function 22 { pointer_int_sum }	{ TREE_CODE TYPE_PRECISION build_int char_type_node convert_units pedantic size_in_bytes tree_code type warn_pointer_arith warning }
c_sizeof_nowarn		c-typeck.c	/^c_sizeof_nowarn (type)/ ;" function 13 { build_unary_op pointer_diff }	{ TREE_CODE TYPE_PRECISION build_int char_type_node convert_units size_in_bytes tree_code type }
call_fixed_reg_set		regclass.c	/^HARD_REG_SET call_fixed_reg_set;/ ;" global 1 { find_free_reg find_reg init_reg_sets_1 }	{ }
call_fixed_regs		regclass.c	/^char call_fixed_regs[FIRST_PSEUDO_REGISTER];/ ;" global 1 { clear_reg_live init_reg_sets_1 insert_call_saves set_reg_live }	{ }
call_seen		local-alloc.c	/^static int call_seen;/ ;" global 1 { block_alloc strength_reduce }	{ }
call_used_reg_set		regclass.c	/^HARD_REG_SET call_used_reg_set;/ ;" global 1 { find_free_reg find_reg init_reg_sets_1 stupid_find_reg stupid_life_analysis }	{ }
call_used_regs		regclass.c	/^char call_used_regs[FIRST_PSEUDO_REGISTER];/ ;" global 1 { check_frame_pointer_required combine_regs cse_basic_block find_equiv_reg fix_register init_reg_sets init_reg_sets_1 insert_call_saves order_regs_for_reload propagate_block reload_as_needed strength_reduce stupid_life_analysis }	{ }
caller_save_needed		reload1.c	/^int caller_save_needed;/ ;" global 1 { find_free_reg find_reg init_function_start reload }	{ }
can_eliminate_biv_p		loop.c	/^can_eliminate_biv_p (insn, bl)/ ;" function 126 { check_eliminate_biv }	{ GET_CODE INSN_UID PATTERN REGNO SET_DEST SET_SRC XEXP cc0_rtx class_struct const0_rtx induct_var induction invariant_p loop_dump_stream machine_mode rtx rtx_code rtx_equal_p }
can_fix_p		optabs.c	/^can_fix_p (fixmode, fltmode, unsignedp, truncp_ptr/ ;" function 16 { expand_fix }	{ fixtab fixtrunctab ftrunc_optab }
can_float_p		optabs.c	/^can_float_p (fltmode, fixmode)/ ;" function 5 { expand_float }	{ floattab }
can_jump_into_range_p		loop.c	/^can_jump_into_range_p (x, beg, end)/ ;" function 33 { can_jump_into_range_p verify_loop }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INSN_LUID XEXP XVECEXP XVECLEN can_jump_into_range_p rtx_code }
canon_hash		cse.c	/^canon_hash (x, mode)/ ;" function 136 { HASH canon_hash cse_insn safe_hash }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH HASHBITS INTVAL MEM_IN_STRUCT_P MEM_VOLATILE_P REGNO RTX_UNCHANGING_P XEXP XINT XSTR XVECEXP XVECLEN canon_hash do_not_record global_regs hash hash_arg_in_memory hash_arg_in_struct reg_qty rtx_code }
canon_reg		cse.c	/^canon_reg (x)/ ;" function 52 { canon_reg cse_insn }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO XEXP XVECEXP XVECLEN canon_reg reg_rtx rtx rtx_code }
case_node		stmt.c	/^struct case_node/ ;" struct 11 { check_for_full_enumeration_handling expand_end_case pushcase pushcase_range }	{ }
case_node_ptr		stmt.c	/^typedef struct case_node *case_node_ptr;/ ;" typedef 1 { balance_case_nodes group_case_nodes node_has_high_bound node_has_low_bound }	{ }
case_stack		stmt.c	/^struct nesting *case_stack;/ ;" global 1 { check_for_full_enumeration_handling expand_end_case expand_end_case_dummy expand_start_case expand_start_case_dummy init_function_start pushcase pushcase_range }	{ }
cast_expr		objc-parse.y	/^cast_expr:/ ;" yacctoken 1 { }	{ }
cat_count		objc-actions.c	/^static int cat_count = 0;	\/* `@category' *\// ;" global 1 { build_objc_symtab_template continue_class generate_objc_symtab_decl init_def_list init_objc_symtab }	{ }
cc0_rtx		emit-rtl.c	/^rtx cc0_rtx;			\/* (CC0) *\// ;" global 1 { can_eliminate_biv_p check_dbra_loop clear_const_double_mem compare compare1 cse_insn expand_inline_function fold_rtx force_const_double_mem force_const_mem inequality_comparisons_p init_emit_once jump_back_p next_insns_test_no_inequality predecide_loop_entry sets_cc0_p simplify_set_cc0_and strength_reduce subst try_combine try_fold_cc0 }	{ }
cc1_rtx		emit-rtl.c	/^rtx cc1_rtx;			\/* (CC1) (not actually used nowaday/ ;" global 1 { }	{ }
cc_prev_status		final.c	/^CC_STATUS cc_prev_status;/ ;" global 1 { final_scan_insn }	{ }
cc_status		final.c	/^CC_STATUS cc_status;/ ;" global 1 { CC_STATUS_INIT alter_cond final_scan_insn output_btst }	{ }
chain_type		stor-layout.c	/^chain_type (t)/ ;" function 30 { layout_type }	{ TREE_CHAIN TREE_PERMANENT TYPE_MAIN_VARIANT permanent_type_chain permanent_type_end temporary_type_chain temporary_type_end }
chainon		tree.c	/^chainon (op1, op2)/ ;" function 14 { actualparameterlist add_instance_variable build_category_template build_class_template build_ivar_list_template build_ivar_template build_message_expr build_method_list_template build_method_template build_module_descriptor build_objc_symtab_template build_super_template getArgTypeList get_super_receiver move_cleanups_up objc_copy_list poplevel reallyStartMethod save_noncopied_parts store_parm_decls }	{ TREE_CHAIN tree }
change_address		emit-rtl.c	/^change_address (memref, mode, addr)/ ;" function 20 { access_parm_map copy_rtx_and_substitute emit_push_insn expand_expr expand_inline_function extract_bit_field extract_fixed_bit_field extract_split_bit_field fixup_memory_subreg fixup_stack_1 gen_highpart gen_lowpart move_by_pieces_1 store_bit_field store_field store_fixed_bit_field store_one_arg store_split_bit_field }	{ GET_CODE GET_MODE MEM_IN_STRUCT_P MEM_VOLATILE_P RTX_UNCHANGING_P XEXP gen_rtx memory_address rtx }
char_array_type_node		c-decl.c	/^tree char_array_type_node;/ ;" global 1 { init_decl_processing yylex }	{ }
char_type_node		c-decl.c	/^tree char_type_node;/ ;" global 1 { c_sizeof c_sizeof_nowarn combine_strings dbxout_init dbxout_type digest_init expand_expr gen_declspecs grokdeclarator init_decl_processing my_build_string signed_type unsigned_type yylex }	{ }
check_asm_operands		combine.c	/^check_asm_operands (x)/ ;" function 21 { try_combine }	{ alloca asm_noperands decode_asm_operands general_operand rtx }
check_dbra_loop		loop.c	/^check_dbra_loop (loop_end, iv_list, insn_count, lo/ ;" function 283 { strength_reduce }	{ GET_CODE GET_MODE INSN_UID INTVAL JUMP_LABEL LABEL_NUSES NEXT_INSN PATTERN PREV_INSN REG_NOTES SET_DEST SET_SRC XEXP cc0_rtx condjump_p const0_rtx count_nonfixed_reads delete_insn emit_insn_after emit_insn_before emit_jump_insn_before gen_rtx iv_class loop_dump_stream loop_has_call next_real_insn num_mem_sets num_movables pc_rtx reg_mentioned_p reg_used_between_p regno_last_uid regno_reg_rtx rtx rtx_code }
check_duplicates		objc-actions.c	/^static tree check_duplicates(hash hsh)/ ;" function 26 { build_message_expr }	{ IDENTIFIER_POINTER NULLT TREE_CODE attr tree type warn_with_method warning }
check_eliminate_biv		loop.c	/^check_eliminate_biv (bl, loop_start, end)/ ;" function 70 { strength_reduce }	{ GET_CODE INSN_UID NEXT_INSN PATTERN SET_DEST can_eliminate_biv_p induction loop_dump_stream only_reg_use_p reg_mentioned_p rtx rtx_code }
check_for_full_enumeration_handling		stmt.c	/^check_for_full_enumeration_handling ()/ ;" function 56 { expand_end_case }	{ DECL_NAME IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_PURPOSE TREE_TYPE TREE_VALUE TYPE_NAME TYPE_VALUES case_node case_stack tree tree_int_cst_equal tree_int_cst_lt warning }
check_frame_pointer_required		global-alloc.c	/^check_frame_pointer_required (reg_equiv_constant, / ;" function 58 { reload }	{ HARD_REG_SET alloca call_used_regs frame_pointer_rtx hard_reg_conflicts mark_home_live max_allocno max_regno reg_equiv_address reg_equiv_constant reg_equiv_mem reg_mentioned_p reg_n_refs reg_renumber regs_ever_live retry_global_alloc }
check_ivars		objc-actions.c	/^static / ;" function 47 { continue_class }	{ DECL_NAME TREE_CHAIN TREE_TYPE comptypes error error_with_ivar ivar_decls tree }
check_methods		objc-actions.c	/^void check_methods(tree chain, tree list, int mtyp/ ;" function 25 { finish_class }	{ IDENTIFIER_POINTER TREE_CHAIN TREE_CODE implementation_context lookup_method warning }
check_newline		objc-parse.y	/^check_newline ()/ ;" function 204 { compile_file skip_white_space }	{ TREE_CODE TREE_INT_CST_LOW TREE_STRING_LENGTH TREE_STRING_POINTER asm_out_file do_pragma error file_stack finput input_file_stack input_file_stack_tick input_filename line lineno main_input_filename pedantic permalloc xmalloc yylex }
choose_hard_reg_mode		caller-save.c	/^choose_hard_reg_mode (regno)/ ;" function 23 { insert_call_saves }	{ }
choose_reload_regs		reload1.c	/^choose_reload_regs (insn)/ ;" function 509 { reload_as_needed }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE MAX_RELOADS PATTERN REGNO SUBREG_REG SUBREG_WORD TEST_HARD_REG_BIT asm_noperands counted_for_nongroups error_for_asm find_equiv_reg gen_rtx machine_mode mark_reload_reg_in_use n_earlyclobbers n_reloads n_spills reg_class_contents reg_has_output_reload reg_is_output_reload reg_last_reload_reg reg_overlap_mentioned_p reg_reloaded_contents reload_earlyclobbers reload_in reload_in_reg reload_inherited reload_inmode reload_optional reload_order reload_out reload_outmode reload_override_in reload_reg_class reload_reg_class_lower reload_reg_free_before_p reload_reg_free_p reload_reg_in_use reload_reg_in_use_at_all reload_reg_in_use_for_inputs reload_reg_in_use_for_operands reload_reg_in_use_for_outputs reload_reg_reaches_end_p reload_reg_rtx reload_spill_index reload_strict_low reload_when_needed rtx spill_reg_order spill_reg_rtx spill_regs }
class_struct		loop.c	/^static struct iv_class **class_struct;/ ;" global 1 { can_eliminate_biv_p eliminate_biv record_giv strength_reduce }	{ }
class_type		objc-actions.c	/^static tree super_type, _selector_type, id_type, c/ ;" global 1 { build_message_expr synth_module_prologue }	{ }
classdef		objc-parse.y	/^classdef:/ ;" yacctoken 1 { }	{ }
classify_insn		emit-rtl.c	/^classify_insn (x)/ ;" function 33 { emit }	{ GET_CODE SET_DEST SET_SRC XVECEXP XVECLEN pc_rtx }
cleanup_label		stmt.c	/^rtx cleanup_label;/ ;" global 1 { expand_function_start expand_null_return_1 expand_return }	{ }
cleanups_of_this_call		expr.c	/^static tree cleanups_of_this_call;/ ;" global 1 { expand_call expand_expr }	{ }
clear_binding_level		c-decl.c	/^static struct binding_level clear_binding_level/ ;" global 2 { pushlevel }	{ }
clear_const_double_mem		varasm.c	/^clear_const_double_mem ()/ ;" function 12 { rest_of_compilation }	{ CONST_DOUBLE_CHAIN CONST_DOUBLE_MEM cc0_rtx real_constant_chain rtx }
clear_last_expr		stmt.c	/^clear_last_expr ()/ ;" function 4 { }	{ last_expr_type }
clear_momentary		tree.c	/^clear_momentary ()/ ;" function 4 { }	{ momentary_obstack momentary_stack }
clear_pending_stack_adjust		expr.c	/^clear_pending_stack_adjust ()/ ;" function 9 { expand_function_end expand_null_return_1 }	{ TREE_INLINE current_function_decl flag_inline_functions flag_omit_frame_pointer pending_stack_adjust }
clear_reg_live		caller-save.c	/^clear_reg_live (reg)/ ;" function 22 { save_call_clobbered_regs }	{ CLEAR_HARD_REG_BIT GET_MODE REGNO call_fixed_regs hard_regs_live reg_renumber }
clear_storage		expr.c	/^clear_storage (object, size)/ ;" function 21 { store_constructor }	{ GET_MODE XEXP const0_rtx emit_library_call emit_move_insn gen_rtx }
cls_method_hash_list		objc-actions.c	/^static hash *cls_method_hash_list = 0;/ ;" global 1 { add_class_method build_message_expr finish_objc hash_init objc_debug }	{ }
cls_ref_chain		objc-actions.c	/^static tree cls_ref_chain = NULLT;	\/* classes refe/ ;" global 1 { add_class_reference finish_objc }	{ }
cmp_optab		optabs.c	/^optab cmp_optab;/ ;" global 1 { emit_cmp_insn expand_end_case init_optabs }	{ }
combine		fold-const.c	/^combine (code, arg1, arg2)/ ;" function 320 { combine expand_end_case fold genop group_case_nodes node_has_high_bound node_has_low_bound split_tree yylex }	{ REAL_VALUE_TYPE TREE_CODE TREE_IMAGPART TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_REALPART TREE_REAL_CST TREE_TYPE TREE_UNSIGNED TYPE_PRECISION add_double build build_complex build_int_2 build_real combine combine_error div_and_round_double force_fit_type lrotate_double lshift_double mul_double neg_double set_float_handler tree warning }
combine_attempts		combine.c	/^static int combine_attempts;/ ;" global 1 { combine_instructions dump_combine_stats try_combine }	{ }
combine_dump		toplev.c	/^int combine_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
combine_dump_file		toplev.c	/^FILE *combine_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
combine_error		fold-const.c	/^static jmp_buf combine_error;/ ;" global 1 { combine }	{ }
combine_extras		combine.c	/^static int combine_extras;/ ;" global 1 { combine_instructions dump_combine_stats try_combine }	{ }
combine_instructions		combine.c	/^combine_instructions (f, nregs)/ ;" function 144 { rest_of_compilation }	{ GET_CODE INSN_CUID INSN_UID LOG_LINKS NEXT_INSN PATTERN SET_DEST SET_SRC XEXP alloca combine_attempts combine_extras combine_merges combine_successes distrib_attempts distrib_merges_1 distrib_merges_2 distrib_successes find_reg_note init_recog last_call_cuid mem_last_set record_dead_and_set_regs reg_last_death reg_last_set rtx total_attempts total_extras total_merges total_successes try_combine try_distrib uid_cuid }
combine_merges		combine.c	/^static int combine_merges;/ ;" global 1 { combine_instructions dump_combine_stats try_combine }	{ }
combine_movables		loop.c	/^combine_movables (movables, nregs)/ ;" function 102 { scan_loop }	{ GET_CODE GET_MODE GET_MODE_CLASS NEXT_INSN PATTERN REG_NOTES REG_NOTE_KIND SET_DEST SET_SRC XEXP alloca machine_mode movable n_times_used rtx_equal_for_loop_p rtx_equal_p savings uid_luid }
combine_regs		local-alloc.c	/^combine_regs (usedreg, setreg, b, insn_number, ins/ ;" function 180 { block_alloc }	{ GET_CODE GET_MODE REGNO REG_SIZE SUBREG_REG SUBREG_WORD call_used_regs find_regno_note fixed_regs max_regno qty_min_class qty_mode qty_n_calls_crossed qty_n_refs qty_phys_sugg qty_preferred_or_nothing qty_size reg_is_born reg_meets_class_p reg_n_calls_crossed reg_n_refs reg_offset reg_preferred_class reg_preferred_or_nothing reg_qty update_qty_class }
combine_reloads		reload.c	/^combine_reloads ()/ ;" function 56 { find_reloads }	{ n_reloads n_replacements reg_overlap_mentioned_p reload_in reload_inc reload_inmode reload_needed_for_multiple reload_nocombine reload_optional reload_out reload_outmode reload_reg_class reload_reg_rtx reload_strict_low reload_when_needed replacements }
combine_strings		objc-parse.y	/^combine_strings (strings)/ ;" function 120 { }	{ TREE_CHAIN TREE_LITERAL TREE_STATIC TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE build_array_type build_index_type build_int_2 build_type_variant char_type_node int_array_type_node integer_type_node make_node resume_momentary savealloc short_unsigned_array_type_node short_unsigned_type_node suspend_momentary tree warn_write_strings }
combine_successes		combine.c	/^static int combine_successes;/ ;" global 1 { combine_instructions dump_combine_stats try_combine }	{ }
combine_time		toplev.c	/^int combine_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
commontype		c-typeck.c	/^commontype (t1, t2)/ ;" function 135 { build_binary_op_nodefault build_conditional_expr commontype duplicate_decls shorten_compare }	{ TREE_CHAIN TREE_CODE TREE_TYPE TREE_UNSIGNED TREE_VALUE TREE_VOLATILE TYPE_ARG_TYPES TYPE_DOMAIN TYPE_MAIN_VARIANT TYPE_PRECISION build_array_type build_function_type build_pointer_type build_type_variant commontype list_length long_integer_type_node long_unsigned_type_node tree tree_code tree_cons type_for_size }
comp_method_with_proto		objc-actions.c	/^static int comp_method_with_proto(tree method, tre/ ;" function 21 { reallyStartMethod }	{ METHOD_DEF TREE_TYPE TYPE_ARG_TYPES comptypes current_obstack getArgTypeList groktypename make_node permanent_obstack tree }
comp_proto_with_proto		objc-actions.c	/^static int comp_proto_with_proto(tree proto1, tree/ ;" function 24 { add_class_method add_instance_method }	{ METHOD_REF TREE_TYPE TYPE_ARG_TYPES comptypes current_obstack getArgTypeList groktypename make_node permanent_obstack tree }
comp_target_types		c-typeck.c	/^comp_target_types (ttl, ttr)/ ;" function 6 { build_binary_op_nodefault build_conditional_expr convert_for_assignment }	{ TREE_TYPE TYPE_MAIN_VARIANT comptypes }
compare		expr.c	/^compare (exp, signed_forward, unsigned_forward,/ ;" function 48 { do_jump do_store_flag }	{ CONST0_RTX GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_CLASS INTVAL TREE_OPERAND TREE_TYPE TREE_UNSIGNED TYPE_ALIGN TYPE_MODE cc0_rtx compare_constants const0_rtx do_pending_stack_adjust emit_cmp_insn expand_expr expr_size flag_force_mem force_not_mem gen_rtx machine_mode rtx }
compare1		expr.c	/^compare1 (op0, op1, forward_op, reverse_op, unsign/ ;" function 34 { do_jump expand_expr }	{ CONST0_RTX GET_CODE GET_MODE_BITSIZE GET_MODE_CLASS INTVAL cc0_rtx compare_constants const0_rtx do_pending_stack_adjust emit_cmp_insn flag_force_mem force_not_mem gen_rtx rtx }
compare_constant		varasm.c	/^compare_constant (exp, desc)/ ;" function 6 { get_or_assign_label }	{ compare_constant_1 }
compare_constant_1		varasm.c	/^compare_constant_1 (exp, p)/ ;" function 101 { compare_constant compare_constant_1 }	{ CONSTRUCTOR_ELTS TREE_CHAIN TREE_CODE TREE_IMAGPART TREE_INT_CST_LOW TREE_OPERAND TREE_REALPART TREE_REAL_CST TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE TREE_VALUE TYPE_PRECISION addr_const compare_constant_1 decode_addr_const flag_writable_strings list_length tree tree_code type }
compare_constant_rtx		varasm.c	/^compare_constant_rtx (mode, x, desc)/ ;" function 21 { force_const_mem }	{ decode_rtx_const rtx_const }
compare_constants		expr.c	/^compare_constants (operation, unsignedp, op0, op1,/ ;" function 56 { compare compare1 do_jump }	{ HOST_BITS_PER_INT const0_rtx const1_rtx }
comparison_code		expr.c	/^static char comparison_code[] = {/ ;" global 3 { expand_expr init_comparisons }	{ }
compile_file		toplev.c	/^compile_file (name)/ ;" function 460 { Mtoplev }	{ ASM_IDENTIFY_GCC DECL_INITIAL NULL_TREE TIMEVAR TREE_ADDRESSABLE TREE_ASM_WRITTEN TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_INLINE TREE_PUBLIC TREE_READONLY TREE_STATIC TREE_USED asm_file_name asm_out_file check_newline combine_dump combine_dump_file combine_time cse_dump cse_dump_file cse_time dbr_sched_dump dbr_sched_dump_file dbr_sched_time dbxout_init dbxout_symbol dbxout_tags dbxout_types decl doing_objc_thang dump_base_name dump_combine_total_stats dump_time end_final errorcount fatal_io_error file_stack final_time finish_class finish_objc finput flow_dump flow_dump_file flow_time gen_declaration gen_declaration_file get_permanent_types getdecls gettags gettime global_alloc_time global_reg_dump global_reg_dump_file init_decl_processing init_emit_once init_final init_lex init_objc (etc) }
compiling_a_method		objc-actions.c	/^compiling_a_method()/ ;" function 7 { report_error_function }	{ IDENTIFIER_POINTER method_context }
complete_array_type		c-decl.c	/^complete_array_type (type, initial_value, do_defau/ ;" function 51 { finish_decl }	{ CONSTRUCTOR_ELTS NULL_TREE TREE_CODE TREE_STRING_LENGTH TREE_TYPE TYPE_DOMAIN build_index_type build_int_2 error_mark_node layout_type list_length tree type }
component_decl		objc-parse.y	/^component_decl:/ ;" yacctoken 1 { }	{ }
component_decl_list		objc-parse.y	/^component_decl_list:   \/* empty *\// ;" yacctoken 1 { }	{ }
component_declarator		objc-parse.y	/^component_declarator:/ ;" yacctoken 1 { }	{ }
components		objc-parse.y	/^components:/ ;" yacctoken 1 { }	{ }
compparms		c-typeck.c	/^compparms (parms1, parms2)/ ;" function 27 { comptypes }	{ TREE_CHAIN TREE_VALUE compparms1 comptypes tree }
compparms1		c-typeck.c	/^compparms1 (parms)/ ;" function 20 { compparms }	{ TREE_CHAIN TREE_CODE TREE_VALUE TYPE_PRECISION float_type_node integer_type_node parms tree type void_type_node }
compstmt		objc-parse.y	/^compstmt: '{' '}'/ ;" yacctoken 1 { }	{ }
compstmt_or_error		objc-parse.y	/^compstmt_or_error:/ ;" yacctoken 1 { }	{ }
comptypes		c-typeck.c	/^comptypes (type1, type2)/ ;" function 91 { check_ivars comp_method_with_proto comp_proto_with_proto comp_target_types compparms comptypes digest_init duplicate_decls pushdecl store_parm_decls }	{ TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_READONLY TREE_THIS_VOLATILE TREE_TYPE TYPE_ARG_TYPES TYPE_DOMAIN TYPE_MAIN_VARIANT TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_PRECISION compparms comptypes doing_objc_thang objc_comptypes pedantic tree type_for_size }
cond_stack		stmt.c	/^struct nesting *cond_stack;/ ;" global 1 { expand_end_cond expand_end_else expand_fixup expand_start_cond expand_start_else init_function_start }	{ }
condjump_p		jump.c	/^condjump_p (insn)/ ;" function 20 { check_dbra_loop jump_back_p jump_optimize }	{ GET_CODE PATTERN SET_DEST SET_SRC XEXP pc_rtx rtx }
conflicts		global-alloc.c	/^static int *conflicts;/ ;" global 1 { CONFLICTP SET_CONFLICT global_alloc record_conflicts record_one_conflict }	{ }
consec_ints		cse.c	/^static int *consec_ints;/ ;" global 1 { cse_main new_basic_block }	{ }
consec_sets_giv		loop.c	/^consec_sets_giv (first_benefit, p, src_regno, dest/ ;" function 64 { strength_reduce }	{ GET_CODE NEXT_INSN PATTERN REGNO SET_DEST SET_SRC XEXP find_reg_note general_induction_var induct_struct induct_var induction n_times_set oballoc rtx rtx_code }
consec_sets_invariant_p		loop.c	/^consec_sets_invariant_p (reg, n_sets, insn)/ ;" function 57 { move_movables scan_loop }	{ GET_CODE NEXT_INSN PATTERN REGNO SET_DEST SET_SRC XEXP find_reg_note invariant_p n_times_set rtx rtx_code }
const0_rtx		emit-rtl.c	/^rtx const0_rtx;			\/* (CONST_INT 0) *\// ;" global 1 { CONST0_RTX assemble_integer_zero assign_parms basic_induction_var can_eliminate_biv_p check_dbra_loop clear_storage compare compare1 compare_constants constant_high_bytes cse_insn dbxout_parms decompose do_jump eliminate_biv emit_clr_insn emit_cmp_insn emit_move_insn emit_push_insn expand_builtin expand_call expand_cleanups expand_decl expand_divmod expand_end_case expand_end_stmt_expr expand_expr expand_expr_stmt expand_return final_scan_insn find_dummy_reload find_reloads fixup_var_refs fold_rtx force_const_double_mem gen_lowpart_for_combine gen_rtx general_induction_var immed_double_const immed_real_const_1 init_emit_once mark_used_regs may_trap_p move_block_to_reg output_move_double scan_loop singlemove_string store_field store_one_arg subst }	{ }
const1_rtx		emit-rtl.c	/^rtx const1_rtx;			\/* (CONST_INT 1) *\// ;" global 1 { basic_induction_var compare_constants do_jump do_store_flag emit_0_to_1_insn emit_cmp_insn expand_divmod expand_expr expand_return fold_rtx gen_rtx general_induction_var init_emit_once simplify_set_cc0_and strength_reduce subst }	{ }
const_hash		varasm.c	/^const_hash (exp)/ ;" function 62 { const_hash get_or_assign_label }	{ CONSTRUCTOR_ELTS HASHBITS MAX_HASH_TABLE TREE_CHAIN TREE_CODE TREE_IMAGPART TREE_INT_CST_LOW TREE_OPERAND TREE_REALPART TREE_REAL_CST TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE TREE_VALUE addr_const const_hash decode_addr_const tree tree_code }
const_hash_rtx		varasm.c	/^const_hash_rtx (mode, x)/ ;" function 18 { force_const_mem }	{ HASHBITS MAX_RTX_HASH_TABLE decode_rtx_const rtx_const }
const_hash_table		varasm.c	/^static struct constant_descriptor *const_hash_tabl/ ;" global 1 { get_or_assign_label }	{ }
const_labelno		varasm.c	/^int const_labelno;/ ;" global 1 { assemble_static_space force_const_mem get_or_assign_label }	{ }
const_rtx_hash_table		varasm.c	/^static struct constant_descriptor *const_rtx_hash_/ ;" global 1 { force_const_mem init_const_rtx_hash_table }	{ }
constant_descriptor		varasm.c	/^struct constant_descriptor/ ;" struct 7 { force_const_mem get_or_assign_label record_constant record_constant_rtx }	{ }
constant_high_bytes		loop.c	/^constant_high_bytes (p, loop_start)/ ;" function 31 { }	{ GET_MODE PATTERN SET_DEST SET_SRC XEXP const0_rtx emit_insn_before gen_rtx rtx }
constrain_operands		recog.c	/^constrain_operands (insn_code_num)/ ;" function 189 { final_scan_insn }	{ CONSTANT_P GET_CODE GET_MODE INTVAL XEXP funny_match offsettable_memref_p operands_match_p reg_fits_class_p rtx which_alternative }
constraint_accepts_reg_p		reload1.c	/^constraint_accepts_reg_p (string, reg)/ ;" function 33 { emit_reload_insns }	{ TEST_HARD_REG_BIT reg_class_contents string true_regnum }
continue_class		objc-actions.c	/^tree continue_class(tree aClass)/ ;" function 55 { }	{ NULLT TREE_CODE TREE_STATIC_TEMPLATE TYPE_FIELDS _OBJC_CLASS_decl _OBJC_METACLASS_decl build_class_template build_ivar_chain build_private_template cat_count check_ivars finish_struct imp_count imp_entry imp_list implementation_template ivar_decls objc_class_template synth_forward_declarations tree xref_tag }
continue_method_def		objc-actions.c	/^void continue_method_def()/ ;" function 22 { }	{ TREE_PURPOSE get_parm_info method_context parmlist poplevel reallyStartMethod self_decl store_parm_decls tree }
convert		c-convert.c	/^convert (type, expr)/ ;" function 33 { actualparameterlist build_binary_op_nodefault build_c_cast build_conditional_expr build_index_type build_modify_expr build_unary_op c_expand_return convert convert_for_assignment convert_sequence convert_to_integer convert_to_pointer default_conversion expand_decl_init expand_end_case expand_expr fold pointer_diff pointer_int_sum pushcase pushcase_range shorten_compare split_tree }	{ TREE_CODE TREE_OPERAND TREE_TYPE build convert convert_to_integer convert_to_pointer convert_to_real error error_mark_node expr fold tree tree_code type }
convert_for_assignment		c-typeck.c	/^convert_for_assignment (type, rhs, errtype)/ ;" function 88 { actualparameterlist build_modify_expr c_expand_return digest_init }	{ TREE_CODE TREE_OPERAND TREE_READONLY TREE_TYPE TREE_VOLATILE TYPE_MAIN_VARIANT comp_target_types convert default_conversion error error_mark_node integer_zerop null_pointer_node pedantic tree tree_code type void_type_node warning }
convert_move		expr.c	/^convert_move (to, from, unsignedp)/ ;" function 322 { assign_parms convert_move convert_to_mode do_tablejump emit_library_call expand_binop expand_expr expand_fix expand_float expand_twoval_binop_convert expand_unop optimize_bit_field store_expr tail_recursion_args }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_CLASS MEM_VOLATILE_P NO_DEFER_POP OK_DEFER_POP PUT_MODE XEXP convert_move copy_rtx emit_clr_insn emit_cmp_insn emit_insn emit_jump_insn emit_label emit_library_call emit_move_insn emit_unop_insn expand_unop gen_highpart gen_label_rtx gen_lowpart gen_reg_rtx gen_rtx hard_libcall_value machine_mode memory_address_p mode_dependent_address_p one_cmpl_optab protect_from_queue rtx }
convert_sequence		c-typeck.c	/^convert_sequence (conversions, arg)/ ;" function 21 { convert_sequence }	{ TREE_CODE TREE_OPERAND TREE_TYPE convert convert_sequence }
convert_to_integer		c-convert.c	/^convert_to_integer (type, expr)/ ;" function 244 { convert }	{ TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_TYPE TREE_UNSIGNED TYPE_PRECISION build build_binary_op_nodefault build_int_2 build_unary_op convert error expr fold get_unwidened integer_zero_node integer_zerop signed_type tree tree_code type type_for_size unsigned_type }
convert_to_mode		expr.c	/^convert_to_mode (mode, x, unsignedp)/ ;" function 16 { assign_parms emit_cmp_insn expand_binop expand_builtin expand_end_case expand_fix expand_float expand_inline_function expand_shift expand_unop extract_bit_field extract_fixed_bit_field store_bit_field store_expr store_fixed_bit_field store_split_bit_field }	{ GET_CODE GET_MODE GET_MODE_SIZE MEM_VOLATILE_P convert_move gen_lowpart gen_reg_rtx integer_mode_p rtx }
convert_to_pointer		c-convert.c	/^convert_to_pointer (type, expr)/ ;" function 32 { convert convert_to_pointer }	{ TREE_CODE TREE_TYPE build build_int_2 convert convert_to_pointer error expr integer_zerop null_pointer_node tree tree_code type type_for_size type_precision }
convert_to_real		c-convert.c	/^convert_to_real (type, expr)/ ;" function 25 { convert }	{ REAL_VALUE_ATOF TREE_CODE TREE_REAL_CST TREE_TYPE build error expr flag_float_store make_node tree tree_code type }
convert_units		stor-layout.c	/^convert_units (size, inunits, outunits)/ ;" function 32 { assign_parms c_sizeof c_sizeof_nowarn expand_call expand_decl layout_record layout_union size_in_bytes store_one_arg }	{ TREE_CODE TREE_INT_CST_LOW TREE_OPERAND build_int genop tree tree_int_cst_equal }
copy_addr_to_reg		explow.c	/^copy_addr_to_reg (x)/ ;" function 5 { move_by_pieces }	{ copy_to_mode_reg }
copy_address		integrate.c	/^copy_address (orig)/ ;" function 92 { copy_rtx_and_substitute }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH NULL PUT_MODE REGNO RTX_CODE XEXP XINT XSTR XVEC XVECEXP XVECLEN copy_rtx_and_substitute copy_to_reg fp_delta frame_pointer_rtx insn_map machine_mode plus_constant rtvec_alloc rtx rtx_alloc }
copy_all_regs		explow.c	/^copy_all_regs (x)/ ;" function 20 { copy_all_regs expand_expr stabilize }	{ GET_CODE REGNO XEXP copy_all_regs copy_to_reg gen_rtx rtx }
copy_asm_constraints_vector		integrate.c	/^static rtvec copy_asm_constraints_vector;/ ;" global 1 { copy_for_inline copy_rtx_and_substitute }	{ }
copy_asm_operands_vector		integrate.c	/^static rtvec copy_asm_operands_vector;/ ;" global 1 { copy_for_inline copy_rtx_and_substitute expand_inline_function save_for_inline }	{ }
copy_decl_tree		integrate.c	/^copy_decl_tree (let, level)/ ;" function 43 { copy_decl_tree expand_inline_function }	{ DECL_NAME DECL_RTL DECL_SOURCE_FILE DECL_SOURCE_LINE GET_CODE STMT_SUBBLOCKS STMT_VARS TREE_ADDRESSABLE TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_LITERAL TREE_PUBLIC TREE_READONLY TREE_STATIC TREE_TYPE TREE_USED TREE_VOLATILE XEXP build_decl copy_decl_tree copy_rtx_and_substitute poplevel pushdecl pushlevel tree }
copy_for_inline		integrate.c	/^copy_for_inline (orig)/ ;" function 146 { copy_for_inline save_for_inline }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH NULL REGNO SET_DEST TREE_READONLY XEXP XINT XSTR XVEC XVECEXP XVECLEN copy_asm_constraints_vector copy_asm_operands_vector copy_for_inline gen_rtvec_v gen_rtx insn_map label_map max_parm_reg orig_asm_operands_vector parmdecl_map reg_map rtx rtx_alloc rtx_code }
copy_list		tree.c	/^copy_list (list)/ ;" function 19 { }	{ TREE_CHAIN copy_node tree }
copy_node		tree.c	/^copy_node (node)/ ;" function 80 { build_modify_expr build_type_variant copy_list objc_copy_list pushcase pushcase_range }	{ TREE_CHAIN TREE_CODE TREE_PERMANENT TREE_UID current_obstack objc_tree_class_type objc_tree_keyword_decl objc_tree_method_decl permanent_obstack tree tree_code tree_code_length tree_code_type tree_common tree_decl tree_exp tree_node_count tree_node_counter tree_node_size tree_real_cst tree_type }
copy_parm_decls		integrate.c	/^copy_parm_decls (args, vec)/ ;" function 16 { expand_inline_function }	{ DECL_NAME DECL_RTL TREE_CHAIN TREE_TYPE TREE_USED build_decl decl pushdecl tree }
copy_rtx		rtl.c	/^copy_rtx (orig)/ ;" function 59 { adj_offsettable_operand convert_move copy_rtx copy_substitutions cse_insn eliminate_biv emit_iv_init_code expand_expr expand_inline_function find_reloads_address fixup_var_refs_1 fold_rtx loop_skip_over predecide_loop_entry }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH NULL PUT_MODE RTX_CODE XEXP XINT XVEC XVECEXP XVECLEN copy_rtx rtvec_alloc rtx rtx_alloc }
copy_rtx_and_substitute		integrate.c	/^copy_rtx_and_substitute (orig)/ ;" function 356 { copy_address copy_decl_tree copy_rtx_and_substitute expand_inline_function fold_out_const_cc0 try_fold_cc0 }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH INTVAL NULL PUT_MODE REGNO REG_FUNCTION_VALUE_P RTX_CODE SUBREG_REG SUBREG_WORD XEXP XINT XSTR XVEC XVECEXP XVECLEN access_parm_map arg_pointer_rtx change_address copy_address copy_asm_constraints_vector copy_asm_operands_vector copy_rtx_and_substitute first_parm_offset flag_no_function_cse force_reg fp_delta frame_pointer_rtx gen_reg_rtx gen_rtx inline_fp_rtx inline_target insn_map label_map machine_mode memory_address memory_address_p optimize orig_asm_operands_vector plus_constant reg_map reg_mentioned_p rtvec_alloc rtx rtx_alloc stack_pointer_rtx }
copy_rtx_if_shared		emit-rtl.c	/^copy_rtx_if_shared (orig)/ ;" function 106 { copy_rtx_if_shared unshare_all_rtl }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH NULL XEXP XVEC XVECEXP XVECLEN arg_pointer_rtx copy_rtx_if_shared frame_pointer_rtx gen_rtvec_v rtx rtx_alloc rtx_code unshare_copies }
copy_substitutions		combine.c	/^copy_substitutions ()/ ;" function 10 { try_combine }	{ copy_rtx undo undobuf }
copy_to_mode_reg		explow.c	/^copy_to_mode_reg (mode, x)/ ;" function 17 { copy_addr_to_reg expand_binop expand_call expand_expr expand_inline_function expand_unop push_block }	{ GET_MODE emit_move_insn force_operand gen_reg_rtx general_operand rtx }
copy_to_reg		explow.c	/^copy_to_reg (x)/ ;" function 15 { assign_parms copy_address copy_all_regs do_jump emit_push_insn expand_binop expand_builtin expand_call expand_decl expand_end_case expand_expr expand_float expand_increment expand_inline_function expand_unop memory_address stabilize store_bit_field store_expr store_field store_one_arg store_split_bit_field tail_recursion_args }	{ GET_MODE emit_move_insn force_operand gen_reg_rtx general_operand rtx }
copy_to_suggested_reg		explow.c	/^copy_to_suggested_reg (x, target)/ ;" function 11 { expand_divmod }	{ GET_CODE GET_MODE emit_move_insn gen_reg_rtx rtx }
count_basic_blocks		final.c	/^static int count_basic_blocks;/ ;" global 1 { end_final final_scan_insn }	{ }
count_error		toplev.c	/^count_error (warningp)/ ;" function 13 { error_with_decl error_with_file_and_line warning_with_decl warning_with_file_and_line }	{ errorcount inhibit_warnings warningcount }
count_loop_regs_set		loop.c	/^count_loop_regs_set (from, to, may_not_move, count/ ;" function 114 { scan_loop }	{ GET_CODE NEXT_INSN PATTERN REGNO SET_DEST SET_SRC XEXP XVECEXP XVECLEN alloca n_times_set reg_used_between_p rtx }
count_nonfixed_reads		loop.c	/^count_nonfixed_reads (x)/ ;" function 43 { check_dbra_loop count_nonfixed_reads }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN count_nonfixed_reads rtx_code rtx_varies_p }
count_occurrences		reload1.c	/^count_occurrences (x, find)/ ;" function 50 { count_occurrences emit_reload_insns }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH NULL XEXP XVEC XVECEXP XVECLEN count_occurrences rtx_code }
counted_for_groups		reload1.c	/^static char counted_for_groups[FIRST_PSEUDO_REGIST/ ;" global 1 { reload }	{ }
counted_for_nongroups		reload1.c	/^static char counted_for_nongroups[FIRST_PSEUDO_REG/ ;" global 1 { choose_reload_regs new_spill_reg reload }	{ }
cpart		print-tree.c	/^cpart (title, ct, punct)/ ;" function 20 { dump prdeclmodeinfo prtypemodeinfo }	{ NULL TREE_INT_CST_LOW TREE_LITERAL outfile wruid }
cse_basic_block		cse.c	/^cse_basic_block (from, to)/ ;" function 87 { cse_main }	{ GET_CODE LABEL_NUSES NEXT_INSN NOTE_INSN_LOOP_BEG NOTE_LINE_NUMBER alloca call_used_regs cse_basic_block_data cse_basic_block_end cse_end_of_basic_block cse_insn cse_skip_to_next_block invalidate invalidate_memory max_qty new_basic_block next_qty predecide_loop_entry qty_const qty_const_insn qty_first_reg qty_last_reg reg_rtx rtx rtx_code write_data }
cse_basic_block_data		cse.c	/^struct cse_basic_block_data { int cuid, nsets; rtx/ ;" struct 1 { cse_basic_block cse_end_of_basic_block cse_main }	{ }
cse_basic_block_end		cse.c	/^static int cse_basic_block_end;/ ;" global 1 { CHEAPER cse_basic_block cse_main make_regs_eqv }	{ }
cse_basic_block_start		cse.c	/^static int cse_basic_block_start;/ ;" global 1 { CHEAPER cse_main make_regs_eqv }	{ }
cse_dump		toplev.c	/^int cse_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
cse_dump_file		toplev.c	/^FILE *cse_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
cse_end_of_basic_block		cse.c	/^cse_end_of_basic_block (insn)/ ;" function 49 { cse_basic_block cse_main }	{ GET_CODE INSN_UID NEXT_INSN NOTE_INSN_LOOP_END NOTE_INSN_SETJMP NOTE_LINE_NUMBER PATTERN XVECLEN cse_basic_block_data rtx uid_cuid }
cse_insn		cse.c	/^cse_insn (insn)/ ;" function 750 { cse_basic_block }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE HASH HASHREG HOST_BITS_PER_INT INTVAL JUMP_LABEL LABEL_NUSES MEM_IN_STRUCT_P MEM_VOLATILE_P NBUCKETS NEXT_INSN NOTE_INSN_DELETED NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PREV_INSN PUT_CODE REGNO REG_NOTES REG_NOTE_KIND SET_DEST SET_SRC SUBREG_REG XEXP XVECEXP XVECLEN alloca canon_hash canon_reg cc0_rtx const0_rtx copy_rtx cse_jumps_altered cse_rtx_addr_varies_p cse_skip_to_next_block do_not_record emit_barrier_after equiv_constant exp_equiv_p find_reg_note flag_float_store fold_cc0 fold_rtx gen_rtx hash hash_arg_in_memory hash_arg_in_struct init insert insert_regs invalidate invalidate_from_clobbers lookup lookup_as_function machine_mode mention_regs note_mem_written (etc) }
cse_jumps_altered		cse.c	/^static int cse_jumps_altered;/ ;" global 1 { cse_insn cse_main }	{ }
cse_main		cse.c	/^cse_main (f, nregs)/ ;" function 96 { rest_of_compilation }	{ GET_CODE INSN_CUID INSN_UID NEXT_INSN NOTE_LINE_NUMBER all_minus_one alloca consec_ints cse_basic_block cse_basic_block_data cse_basic_block_end cse_basic_block_start cse_end_of_basic_block cse_jumps_altered free_element_chain init_recog max_elements_made max_qty max_reg n_elements_made qty_const reg_in_table reg_next_eqv reg_prev_eqv reg_qty reg_rtx reg_tick rtx table uid_cuid }
cse_not_expected		expr.c	/^int cse_not_expected;/ ;" global 1 { do_jump expand_expr init_function_start memory_address store_expr }	{ }
cse_rtx_addr_varies_p		cse.c	/^cse_rtx_addr_varies_p (x)/ ;" function 9 { cse_insn invalidate_memory note_mem_written }	{ GET_CODE XEXP qty_const rtx_addr_varies_p }
cse_skip_to_next_block		cse.c	/^static int cse_skip_to_next_block;/ ;" global 1 { cse_basic_block cse_insn }	{ }
cse_time		toplev.c	/^int cse_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
cur_insn_uid		emit-rtl.c	/^static int cur_insn_uid = 1;/ ;" global 1 { emit_barrier emit_barrier_after emit_label emit_label_after emit_note emit_note_after gen_inline_header_rtx get_max_uid init_emit make_insn_raw make_jump_insn_raw restore_reg_data }	{ }
current_binding_level		c-decl.c	/^static struct binding_level *current_binding_level/ ;" global 1 { declare_parm_level finish_decl finish_struct getdecls gettags global_bindings_p grokdeclarator implicitly_declare in_parm_level_p init_decl_processing kept_level_p lookup_name lookup_name_current_level lookup_tag_reverse parmlist_tags_warning poplevel pushdecl pushlevel pushtag redeclaration_error_message shadow_tag start_decl start_enum start_struct storedecls storetags xref_tag }	{ }
current_extern_inline		c-decl.c	/^static int current_extern_inline;/ ;" global 1 { grokdeclarator start_function }	{ }
current_function_args_size		stmt.c	/^int current_function_args_size;/ ;" global 1 { assign_parms save_for_inline }	{ }
current_function_calls_alloca		stmt.c	/^int current_function_calls_alloca;/ ;" global 1 { expand_builtin expand_call expand_function_end init_function_start }	{ }
current_function_calls_setjmp		stmt.c	/^int current_function_calls_setjmp;/ ;" global 1 { expand_call finish_function init_function_start }	{ }
current_function_decl		c-decl.c	/^tree current_function_decl;/ ;" global 1 { announce_function assemble_function c_expand_return clear_pending_stack_adjust decl_constant_value expand_call expand_function_end finish_function init_decl_processing init_function_start output_inline_function poplevel reallyStartMethod report_error_function sdbout_begin_block sdbout_begin_function sdbout_end_epilogue sdbout_mark_begin_function start_function store_parm_decls }	{ }
current_function_name		stmt.c	/^char *current_function_name;/ ;" global 1 { init_function_start }	{ }
current_function_needs_context		stmt.c	/^int current_function_needs_context;/ ;" global 1 { final_start_function init_function_start }	{ }
current_function_parm_tags		c-decl.c	/^static tree current_function_parm_tags;/ ;" global 1 { start_function store_parm_decls }	{ }
current_function_parms		c-decl.c	/^static tree current_function_parms;/ ;" global 1 { start_function store_parm_decls }	{ }
current_function_pops_args		stmt.c	/^int current_function_pops_args;/ ;" global 1 { init_function_start }	{ }
current_function_pretend_args_size		stmt.c	/^int current_function_pretend_args_size;/ ;" global 1 { assign_parms init_function_start }	{ }
current_function_returns_null		c-decl.c	/^int current_function_returns_null;/ ;" global 1 { c_expand_return finish_function jump_optimize start_function }	{ }
current_function_returns_pcc_struct		stmt.c	/^int current_function_returns_pcc_struct;/ ;" global 1 { expand_function_end expand_function_start expand_null_return_1 expand_return init_function_start }	{ }
current_function_returns_pointer		stmt.c	/^int current_function_returns_pointer;/ ;" global 1 { expand_function_start }	{ }
current_function_returns_struct		stmt.c	/^int current_function_returns_struct;/ ;" global 1 { expand_function_end expand_function_start final_start_function init_function_start }	{ }
current_function_returns_value		c-decl.c	/^int current_function_returns_value;/ ;" global 1 { c_expand_return finish_function start_function }	{ }
current_gdbfile		final.c	/^static struct gdbfile *current_gdbfile;/ ;" global 1 { output_source_line set_current_gdbfile }	{ }
current_obstack		tree.c	/^struct obstack *current_obstack;/ ;" global 1 { allocation_temporary_p build_pointer_type build_reference_type build_type_variant comp_method_with_proto comp_proto_with_proto copy_node end_temporary_allocation init_tree make_node oballoc obfree perm_tree_cons permanent_allocation resume_temporary_allocation saveable_tree_cons temp_tree_cons temporary_allocation type_hash_canon }	{ }
current_sym_addr		dbxout.c	/^static rtx current_sym_addr;/ ;" global 1 { dbxout_finish_symbol dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags }	{ }
current_sym_code		dbxout.c	/^static int current_sym_code;/ ;" global 1 { dbxout_finish_symbol dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags }	{ }
current_sym_lineno		dbxout.c	/^static int current_sym_lineno;/ ;" global 1 { dbxout_finish_symbol dbxout_symbol }	{ }
current_sym_nchars		dbxout.c	/^static int current_sym_nchars;/ ;" global 1 { CHARS CONTIN dbxout_continue dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags }	{ }
current_sym_value		dbxout.c	/^static int current_sym_value;/ ;" global 1 { dbxout_finish_symbol dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags sdbout_parms }	{ }
cwalk		print-tree.c	/^cwalk (s, leaf, indent)/ ;" function 9 { dump }	{ NULL TREE_LITERAL walk }
data_section		varasm.c	/^data_section ()/ ;" function 18 { assemble_static_space assemble_variable dbxout_symbol end_final final_start_function get_or_assign_label }	{ asm_out_file flag_shared_data in_section }
datadef		objc-parse.y	/^datadef:/ ;" yacctoken 1 { }	{ }
datatype		c-typeck.c	/^datatype (node)/ ;" function 10 { build_binary_op_nodefault pointer_diff pointer_int_sum }	{ TREE_CODE TREE_TYPE TYPE_POINTER_TO build_pointer_type tree type }
dbr_sched_dump		toplev.c	/^int dbr_sched_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
dbr_sched_dump_file		toplev.c	/^FILE *dbr_sched_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
dbr_sched_time		toplev.c	/^int dbr_sched_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
dbr_sequence_length		final.c	/^dbr_sequence_length ()/ ;" function 13 { }	{ XVECEXP XVECLEN final_sequence flag_delayed_branch }
dbxout_args		dbxout.c	/^dbxout_args (args)/ ;" function 11 { dbxout_type }	{ CHARS TREE_CHAIN TREE_VALUE asmfile dbxout_type }
dbxout_block		dbxout.c	/^dbxout_block (stmt, depth, args)/ ;" function 61 { dbxout_block dbxout_function }	{ STMT_BODY STMT_ELSE STMT_SUBBLOCKS STMT_THEN STMT_TYPE_TAGS STMT_VARS TREE_CHAIN TREE_CODE TREE_USED asmfile assemble_name dbxout_block dbxout_reg_parms dbxout_syms dbxout_tags next_block_number stmt }
dbxout_continue		dbxout.c	/^dbxout_continue ()/ ;" function 11 { CONTIN }	{ asmfile current_sym_nchars dbxout_finish_symbol }
dbxout_finish_symbol		dbxout.c	/^dbxout_finish_symbol ()/ ;" function 18 { dbxout_continue dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags }	{ asmfile current_sym_addr current_sym_code current_sym_lineno current_sym_value output_addr_const }
dbxout_function		dbxout.c	/^dbxout_function (decl)/ ;" function 11 { rest_of_compilation }	{ DECL_ARGUMENTS DECL_INITIAL dbxout_block dbxout_parms dbxout_symbol dbxout_types decl get_temporary_types }
dbxout_init		dbxout.c	/^dbxout_init (asm_file, input_file_name)/ ;" function 28 { compile_file }	{ N_SO TYPE_NAME asmfile char_type_node dbxout_symbol dbxout_types get_permanent_types integer_type_node next_block_number next_type_number typestatus typevec typevec_len xmalloc }
dbxout_parms		dbxout.c	/^dbxout_parms (parms)/ ;" function 102 { dbxout_function }	{ DECL_ARG_TYPE DECL_NAME DECL_OFFSET DECL_RTL FORCE_TEXT GET_CODE GET_MODE GET_MODE_SIZE IDENTIFIER_POINTER INTVAL REGNO TREE_CHAIN TREE_TYPE TYPE_MODE XEXP asmfile const0_rtx current_sym_addr current_sym_code current_sym_nchars current_sym_value dbxout_finish_symbol dbxout_type parms }
dbxout_reg_parms		dbxout.c	/^dbxout_reg_parms (parms)/ ;" function 51 { dbxout_block }	{ DECL_ARG_TYPE DECL_NAME DECL_OFFSET DECL_RTL FORCE_TEXT GET_CODE GET_MODE GET_MODE_SIZE IDENTIFIER_LENGTH IDENTIFIER_POINTER INTVAL REGNO TREE_CHAIN TREE_TYPE TYPE_MODE XEXP asmfile current_sym_addr current_sym_code current_sym_nchars current_sym_value dbxout_finish_symbol dbxout_type parms }
dbxout_symbol		dbxout.c	/^dbxout_symbol (decl, local)/ ;" function 249 { assemble_variable compile_file dbxout_function dbxout_init dbxout_syms dbxout_types rest_of_decl_compilation }	{ DECL_INITIAL DECL_NAME DECL_RTL DECL_SOURCE_FILE DECL_SOURCE_LINE FORCE_TEXT GET_CODE IDENTIFIER_LENGTH IDENTIFIER_POINTER INTVAL N_SOL REGNO TREE_ASM_WRITTEN TREE_CODE TREE_EXTERNAL TREE_PERMANENT TREE_PUBLIC TREE_READONLY TREE_TYPE TREE_VOLATILE TYPE_NAME XEXP asmfile current_sym_addr current_sym_code current_sym_lineno current_sym_nchars current_sym_value data_section dbxout_finish_symbol dbxout_tags dbxout_type dbxout_types decl get_permanent_types gettags lastfile make_node tree type typevec void_type_node }
dbxout_syms		dbxout.c	/^dbxout_syms (syms)/ ;" function 9 { dbxout_block }	{ TREE_CHAIN dbxout_symbol }
dbxout_tags		dbxout.c	/^dbxout_tags (tags)/ ;" function 25 { compile_file dbxout_block dbxout_symbol }	{ FORCE_TEXT IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_ASM_WRITTEN TREE_CHAIN TREE_PURPOSE TREE_VALUE TYPE_MAIN_VARIANT TYPE_SIZE asmfile current_sym_addr current_sym_code current_sym_nchars current_sym_value dbxout_finish_symbol dbxout_type tree type }
dbxout_type		dbxout.c	/^dbxout_type (type, full)/ ;" function 311 { dbxout_args dbxout_parms dbxout_reg_parms dbxout_symbol dbxout_tags dbxout_type }	{ CHARS CONTIN DECL_NAME DECL_OFFSET DECL_RTL DECL_SIZE DECL_SIZE_UNIT IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_PUBLIC TREE_PURPOSE TREE_TYPE TREE_UNSIGNED TREE_VALUE TYPE_ARG_TYPES TYPE_BASETYPES TYPE_DOMAIN TYPE_FIELDS TYPE_MAIN_VARIANT TYPE_MAX_VALUE TYPE_METHOD_BASETYPE TYPE_MIN_VALUE TYPE_NAME TYPE_OFFSET_BASETYPE TYPE_SIZE TYPE_SYMTAB_ADDRESS TYPE_VALUES XEXP XSTR asmfile char_type_node dbxout_args dbxout_type dbxout_type_name error_mark_node integer_type_node next_type_number size_in_bytes tree type typestatus typevec typevec_len use_gdb_dbx_extensions xrealloc }
dbxout_type_name		dbxout.c	/^dbxout_type_name (type)/ ;" function 20 { dbxout_type }	{ CHARS DECL_NAME IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_CODE TYPE_NAME asmfile tree type }
dbxout_types		dbxout.c	/^dbxout_types (types)/ ;" function 12 { compile_file dbxout_function dbxout_init dbxout_symbol }	{ TREE_ASM_WRITTEN TREE_CHAIN TREE_CODE TYPE_NAME dbxout_symbol }
dconst0_rtx		emit-rtl.c	/^rtx dconst0_rtx;		\/* (CONST_DOUBLE:DF 0) *\// ;" global 1 { CONST0_RTX emit_move_insn emit_push_insn expand_float fold_rtx immed_real_const_1 init_emit_once move_block_to_reg }	{ }
dead_or_set_p		rtlanal.c	/^dead_or_set_p (insn, reg)/ ;" function 27 { add_links emit_reload_insns mark_used_regs move_deaths move_deaths_2 try_combine }	{ GET_CODE PATTERN REGNO REG_NOTES REG_NOTE_KIND SET_DEST XEXP XVECEXP XVECLEN rtx }
debug_dump_tree		print-tree.c	/^debug_dump_tree (root)/ ;" function 5 { }	{ dump_tree }
debug_no_type_hash		tree.c	/^int debug_no_type_hash = 0;/ ;" global 1 { type_hash_canon }	{ }
debug_rtx		rtl.c	/^debug_rtx (x)/ ;" function 7 { fatal_insn_not_found }	{ outfile print_rtx }
debug_temp_inits		c-decl.c	/^int debug_temp_inits = 1;/ ;" global 1 { start_decl }	{ }
debugger		flags.h	/^enum debugger { NO_DEBUG = 0, GDB_DEBUG = 1, DBX_D/ ;" struct 2 { }	{ }
decl		objc-parse.y	/^decl:/ ;" yacctoken 1 { DECL_FUNCTION_CODE DECL_NAME DECL_OFFSET DECL_PRINT_NAME DECL_RESULT_TYPE DECL_SET_FUNCTION_CODE DECL_VOFFSET DECL_VOFFSET_UNIT adornDecl announce_function assemble_external assemble_function assemble_variable build_enumerator builtin_function compile_file copy_parm_decls dbxout_function dbxout_symbol decl_constant_value define_decl define_label error_with_decl error_with_ivar expand_anon_union_decl expand_decl expand_decl_init expand_end_bindings expand_function_end expand_inline_function finish_decl finish_struct forward_declare_categories genPrototype generate_category generate_dispatch_table generate_ivars_list generate_shared_structures get_parm_info grokdeclarator implicitly_declare is_public layout_decl lookup_label make_decl_rtl make_function_rtl nreverse push_parm_decl put_var_into_stack rest_of_compilation rest_of_decl_compilation sdbout_begin_block sdbout_symbol setjmp_protect start_decl store_init_value symout_block symout_block_symbols symout_top_blocks uninitialized_vars_warning (etc) }	{ }
decl_constant_value		c-typeck.c	/^decl_constant_value (decl)/ ;" function 21 { default_conversion digest_init }	{ DECL_INITIAL DECL_MODE TREE_CODE TREE_LITERAL TREE_PUBLIC TREE_THIS_VOLATILE current_function_decl decl pedantic }
decl_context		c-decl.c	/^enum decl_context/ ;" struct 7 { grokdeclarator }	{ }
declarator		objc-parse.y	/^declarator:/ ;" yacctoken 1 { add_instance_variable define_decl genDeclaration grokdeclarator grokfield start_decl start_function }	{ }
declare_parm_level		c-decl.c	/^declare_parm_level ()/ ;" function 4 { start_function }	{ current_binding_level }
declmods		objc-parse.y	/^declmods:/ ;" yacctoken 1 { }	{ }
decls		objc-parse.y	/^decls:/ ;" yacctoken 1 { poplevel storedecls symout_block symout_block_symbols symout_top_blocks }	{ }
decode		fold-const.c	/^decode (shorts, low, hi)/ ;" function 7 { add_double div_and_round_double lrotate_double lshift_double mul_double rrotate_double rshift_double }	{ }
decode_addr_const		varasm.c	/^decode_addr_const (exp, value)/ ;" function 44 { compare_constant_1 const_hash record_constant_1 }	{ DECL_OFFSET DECL_RTL GET_CODE TREE_CODE TREE_CST_RTL TREE_INT_CST_LOW TREE_LITERAL TREE_OPERAND TREE_TYPE TYPE_SIZE TYPE_SIZE_UNIT XEXP rtx tree }
decode_asm_operands		recog.c	/^decode_asm_operands (body, operands, operand_locs,/ ;" function 137 { check_asm_operands final_scan_insn find_reloads regclass }	{ GET_CODE GET_MODE SET_DEST SET_SRC XSTR XVECEXP XVECLEN rtx }
decode_reg_name		varasm.c	/^decode_reg_name (asmspec)/ ;" function 20 { make_decl_rtl rest_of_decl_compilation }	{ reg_names }
decode_rtx_const		varasm.c	/^decode_rtx_const (mode, x, value)/ ;" function 72 { compare_constant_rtx const_hash_rtx record_constant_rtx }	{ CONST_DOUBLE_LOW GET_CODE GET_MODE INTVAL XEXP }
decompose		reload.c	/^decompose (x)/ ;" function 92 { find_reloads immune_p }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE INTVAL REGNO XEXP const0_rtx decomposition gen_rtx rtx true_regnum }
decomposition		reload.c	/^struct decomposition/ ;" struct 9 { decompose find_reloads immune_p }	{ }
default_conversion		c-typeck.c	/^default_conversion (exp)/ ;" function 91 { actualparameterlist build_array_ref build_binary_op build_c_cast build_conditional_expr build_function_call build_indirect_ref build_modify_expr build_unary_op c_expand_asm_operands c_expand_start_case convert_for_assignment default_conversion digest_init truthvalue_conversion }	{ DECL_INITIAL TREE_CODE TREE_LITERAL TREE_OPERAND TREE_READONLY TREE_STATIC TREE_THIS_VOLATILE TREE_TYPE TREE_UNSIGNED TREE_VOLATILE TYPE_POINTER_TO TYPE_PRECISION build build_pointer_type build_type_variant build_unary_op convert decl_constant_value default_conversion double_type_node error error_mark_node flag_traditional float_type_node integer_type_node lvalue_p mark_addressable optimize staticp tree tree_code unsigned_type_node }
default_function_type		c-decl.c	/^tree default_function_type;/ ;" global 1 { implicitly_declare init_decl_processing }	{ }
define_decl		objc-actions.c	/^static tree define_decl(tree declarator, tree decl/ ;" function 6 { finish_class forward_declare_categories generate_forward_declaration_to_string_table synth_forward_declarations synth_module_prologue }	{ NULLT decl declarator finish_decl start_decl tree }
define_label		c-decl.c	/^define_label (filename, line, name)/ ;" function 19 { poplevel }	{ DECL_SOURCE_FILE DECL_SOURCE_LINE decl error_with_decl line lookup_label tree }
delete_for_peephole		jump.c	/^delete_for_peephole (from, to)/ ;" function 34 { }	{ GET_CODE INSN_DELETED_P NEXT_INSN PREV_INSN rtx }
delete_insn		jump.c	/^delete_insn (insn)/ ;" function 97 { check_dbra_loop delete_insn delete_insn_forces delete_jump delete_output_reload do_cross_jump find_basic_blocks fixup_var_refs_insns invert_jump jump_optimize loop_skip_over move_movables predecide_loop_entry redirect_jump strength_reduce tension_vector_labels }	{ GET_CODE INSN_DELETED_P JUMP_LABEL LABEL_NUSES NEXT_INSN NOTE_INSN_FUNCTION_END NOTE_LINE_NUMBER PATTERN PREV_INSN RTX_CODE delete_insn optimize rtx set_last_insn }
delete_insn_forces		loop.c	/^delete_insn_forces (v, this_too)/ ;" function 42 { delete_insn_forces strength_reduce }	{ GET_CODE NEXT_INSN PREV_INSN XEXP delete_insn delete_insn_forces find_reg_note rtx }
delete_insns_since		emit-rtl.c	/^delete_insns_since (from)/ ;" function 9 { expand_binop expand_shift extract_bit_field store_bit_field }	{ NEXT_INSN first_insn last_insn }
delete_jump		jump.c	/^delete_jump (insn)/ ;" function 25 { jump_optimize }	{ GET_CODE PATTERN PREV_INSN SET_DEST delete_insn find_reg_note rtx sets_cc0_p }
delete_output_reload		reload1.c	/^delete_output_reload (insn, j, spill_index)/ ;" function 85 { emit_reload_insns }	{ GET_CODE NEXT_INSN PATTERN PREV_INSN REGNO SET_DEST SUBREG_REG alter_reg delete_insn find_regno_note reg_basic_block reg_mentioned_p reg_n_deaths reg_renumber reload_in reload_out reload_reg_rtx rtx spill_reg_store }
digest_init		c-typeck.c	/^digest_init (type, init, tail)/ ;" function 190 { digest_init process_init_constructor store_init_value }	{ CONSTRUCTOR_ELTS TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_READONLY TREE_STATIC TREE_STRING_LENGTH TREE_TYPE TREE_VALUE TYPE_DOMAIN TYPE_FIELDS TYPE_MAIN_VARIANT TYPE_PRECISION TYPE_SIZE TYPE_SIZE_UNIT build build_nt build_tree_list char_type_node comptypes convert_for_assignment decl_constant_value default_conversion digest_init error error_mark_node flag_traditional init initializer_constant_valid_p integer_type_node optimize pedantic process_init_constructor signed_char_type_node string tree tree_code tree_cons type unsigned_char_type_node unsigned_type_node warning }
direction		expr.h	/^enum direction {none, upward, downward};  \/* Value/ ;" struct 1 { assign_parms emit_push_insn expand_decl store_one_arg }	{ }
distrib_attempts		combine.c	/^static int distrib_attempts;/ ;" global 1 { combine_instructions dump_combine_stats try_distrib }	{ }
distrib_merges_1		combine.c	/^static int distrib_merges_1, distrib_merges_2;/ ;" global 1 { combine_instructions dump_combine_stats try_distrib }	{ }
distrib_merges_2		combine.c	/^static int distrib_merges_1, distrib_merges_2;/ ;" global 1 { combine_instructions dump_combine_stats try_distrib }	{ }
distrib_successes		combine.c	/^static int distrib_successes;/ ;" global 1 { combine_instructions dump_combine_stats try_distrib }	{ }
div_and_round_double		fold-const.c	/^div_and_round_double (code, uns,/ ;" function 250 { combine }	{ BASE add_double decode encode mul_double neg_double }
do_block		sdbout.c	/^static int do_block = 0;/ ;" global 1 { sdbout_begin_block sdbout_block }	{ }
do_cross_jump		jump.c	/^do_cross_jump (insn, newjpos, newlpos)/ ;" function 36 { jump_optimize }	{ GET_CODE INSN_CODE JUMP_LABEL LABEL_NUSES NEXT_INSN PATTERN PREV_INSN delete_insn emit_label_after gen_label_rtx redirect_jump rtx }
do_identifier_warnings		tree.c	/^static int do_identifier_warnings;/ ;" global 1 { get_identifier start_identifier_warnings }	{ }
do_jump		expr.c	/^do_jump (exp, if_false_label, if_true_label)/ ;" function 180 { do_jump expand_exit_loop_if_false expand_expr expand_start_cond jumpif jumpifnot }	{ CONST0_RTX GET_CODE GET_MODE INTVAL PATTERN TREE_CODE TREE_OPERAND XVECEXP XVECLEN bcc_gen_fctn compare compare1 compare_constants const0_rtx const1_rtx copy_to_reg cse_not_expected do_jump do_pending_stack_adjust emit_jump emit_jump_insn emit_label emit_queue expand_expr gen_label_rtx integer_zerop invert_exp rtx tree_code }
do_jump_if_equal		stmt.c	/^do_jump_if_equal (op1, op2, label, unsignedp)/ ;" function 16 { emit_case_nodes }	{ GET_CODE INTVAL emit_cmp_insn emit_jump emit_jump_insn }
do_not_record		cse.c	/^static int do_not_record;/ ;" global 1 { canon_hash cse_insn safe_hash }	{ }
do_pending_stack_adjust		expr.c	/^do_pending_stack_adjust ()/ ;" function 9 { compare compare1 do_jump emit_jump expand_builtin expand_call expand_decl expand_end_bindings expand_end_case expand_end_cond expand_end_else expand_end_loop expand_expr expand_fixup expand_float expand_function_end expand_inline_function expand_label expand_loop_continue_here expand_null_return_1 expand_start_case expand_start_loop preexpand_calls store_one_arg }	{ adjust_stack gen_rtx inhibit_defer_pop pending_stack_adjust }
do_pragma		objc-parse.y	/^do_pragma ()/ ;" function 51 { check_newline }	{ INIT_PRAGMA_BUF_SIZE OPT_STRCMP PRAGMA_BUF_SIZE_INCR finput flag_writable_strings initial_optimize_flag obey_regdecls optimize xmalloc xrealloc }
do_preexpand_calls		expr.c	/^int do_preexpand_calls = 1;/ ;" global 1 { preexpand_calls }	{ }
do_store_flag		expr.c	/^do_store_flag (exp, target, mode)/ ;" function 120 { expand_expr }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE TREE_CODE TRUE build_int_2 compare const1_rtx emit_insn emit_insn_after emit_move_insn expand_bit_and expand_shift gen_reg_rtx gen_rtx get_last_insn machine_mode prev_insn rtx setcc_gen_fctn tree_code }
do_tablejump		expr.c	/^do_tablejump (index, range, table_label, default_l/ ;" function 23 { expand_end_case }	{ GET_MODE_SIZE convert_move emit_cmp_insn emit_jump_insn gen_reg_rtx gen_rtx memory_address_noforce rtx }
doing_objc_thang		toplev.c	/^int doing_objc_thang = 0;/ ;" global 1 { Mtoplev compile_file comptypes rest_of_decl_compilation start_class yylex }	{ }
dollars_in_ident		c-decl.c	/^int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;/ ;" global 1 { lang_decode_option yylex }	{ }
double_ftype_double		c-decl.c	/^tree double_ftype_double, double_ftype_double_doub/ ;" global 1 { init_decl_processing }	{ }
double_ftype_double_double		c-decl.c	/^tree double_ftype_double, double_ftype_double_doub/ ;" global 1 { init_decl_processing }	{ }
double_reg_address_ok		reload1.c	/^char double_reg_address_ok;/ ;" global 1 { find_reloads_address reload }	{ }
double_type_node		c-decl.c	/^tree double_type_node;/ ;" global 1 { actualparameterlist default_conversion gen_declspecs get_floating_type grokdeclarator init_decl_processing store_parm_decls yylex }	{ }
drop_through_at_end_p		stmt.c	/^drop_through_at_end_p ()/ ;" function 7 { }	{ GET_CODE PREV_INSN get_last_insn rtx }
dump		print-tree.c	/^dump (node, indent)/ ;" function 341 { dump dump_tree walk }	{ DECL_ARGUMENTS DECL_CONTEXT DECL_INITIAL DECL_NAME DECL_OFFSET DECL_RESULT DECL_SIZE DECL_SOURCE_FILE DECL_SOURCE_LINE DECL_VOFFSET DECL_VOFFSET_UNIT IDENTIFIER_POINTER MIN NULL STMT_BIND_SIZE STMT_BODY STMT_CASE_INDEX STMT_CASE_LIST STMT_COND STMT_ELSE STMT_SOURCE_FILE STMT_SOURCE_LINE STMT_SUBBLOCKS STMT_SUPERCONTEXT STMT_THEN STMT_TYPE_TAGS STMT_VARS TREE_CHAIN TREE_CODE TREE_IMAGPART TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_OPERAND TREE_PURPOSE TREE_REALPART TREE_REAL_CST TREE_STRING_POINTER TREE_TYPE TREE_UID TREE_VALUE TYPE_ARG_TYPES TYPE_DOMAIN TYPE_FIELDS TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_NAME TYPE_POINTER_TO TYPE_PRECISION TYPE_SEP TYPE_SEP_UNIT TYPE_SIZE TYPE_VALUES cpart cwalk dump markvec outfile part prdeclmodeinfo print_rtl (etc) }
dump_and_abort		rtl.c	/^dump_and_abort (expected_c, actual_c, infile)/ ;" function 21 { read_name read_rtx read_skip_spaces }	{ }
dump_base_name		toplev.c	/^char *dump_base_name;/ ;" global 1 { Mtoplev compile_file }	{ }
dump_combine_stats		combine.c	/^dump_combine_stats (file)/ ;" function 13 { rest_of_compilation }	{ combine_attempts combine_extras combine_merges combine_successes distrib_attempts distrib_merges_1 distrib_merges_2 distrib_successes }
dump_combine_total_stats		combine.c	/^dump_combine_total_stats (file)/ ;" function 13 { compile_file }	{ total_attempts total_distrib_attempts total_distrib_merges_1 total_distrib_merges_2 total_distrib_successes total_extras total_merges total_successes }
dump_conflicts		global-alloc.c	/^dump_conflicts (file)/ ;" function 27 { global_alloc }	{ CONFLICTP TEST_HARD_REG_BIT allocno_reg allocno_size hard_reg_conflicts max_allocno }
dump_flow_info		flow.c	/^dump_flow_info (file)/ ;" function 75 { flow_analysis rest_of_compilation stupid_life_analysis }	{ BLOCK_NUM CONTAINING_INSN GET_CODE INSN_UID LABEL_NEXTREF LABEL_REFS PSEUDO_REGNO_BYTES REGNO_POINTER_FLAG REGSET_ELT_BITS basic_block_drops_in basic_block_end basic_block_head basic_block_live_at_start max_regno n_basic_blocks reg_basic_block reg_live_length reg_n_calls_crossed reg_n_deaths reg_n_refs reg_preferred_class reg_preferred_or_nothing rtx }
dump_global_regs		global-alloc.c	/^dump_global_regs (file)/ ;" function 18 { rest_of_compilation }	{ max_regno reg_renumber regs_ever_live }
dump_interface		objc-actions.c	/^dump_interface(FILE *fp, tree chain)/ ;" function 46 { finish_objc }	{ IDENTIFIER_POINTER TREE_CHAIN genDeclaration genMethodDecl ivar_decls tree }
dump_local_alloc		local-alloc.c	/^dump_local_alloc (file)/ ;" function 8 { rest_of_compilation }	{ max_regno reg_renumber }
dump_time		toplev.c	/^int dump_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
dump_tree		print-tree.c	/^dump_tree (outf, root)/ ;" function 10 { debug_dump_tree }	{ alloca dump markvec outfile tree_node_counter }
duplicate_decls		c-decl.c	/^duplicate_decls (newdecl, olddecl)/ ;" function 209 { pushdecl }	{ DECL_ARGUMENTS DECL_BLOCK_SYMTAB_ADDRESS DECL_FUNCTION_CODE DECL_INITIAL DECL_NAME DECL_RESULT DECL_RESULT_TYPE DECL_RTL DECL_SAVED_INSNS DECL_SET_FUNCTION_CODE DECL_SIZE DECL_SIZE_UNIT IDENTIFIER_IMPLICIT_DECL TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_INLINE TREE_PUBLIC TREE_READONLY TREE_STATIC TREE_THIS_VOLATILE TREE_TYPE TREE_VALUE TREE_VOLATILE TYPE_ARG_TYPES TYPE_PRECISION commontype comptypes error error_mark_node error_with_decl extra_warnings flag_traditional float_type_node integer_type_node layout_decl layout_type pedantic redeclaration_error_message tree tree_common tree_decl type void_type_node warning_with_decl }
eliminate_biv		loop.c	/^eliminate_biv (insn, bl, loop_start)/ ;" function 196 { strength_reduce }	{ GET_CODE GET_MODE INTVAL PATTERN REGNO SET_SRC XEXP class_struct const0_rtx copy_rtx emit_insn_before emit_iv_init_code gen_reg_rtx gen_rtx induct_var induction invariant_p machine_mode rtx rtx_code rtx_equal_p }
eliminate_constant_term		explow.c	/^eliminate_constant_term (x, constptr)/ ;" function 33 { eliminate_constant_term expand_expr memory_address }	{ GET_CODE GET_MODE INTVAL XEXP eliminate_constant_term gen_rtx rtx }
eliminate_frame_pointer		reload1.c	/^eliminate_frame_pointer (first)/ ;" function 97 { reload }	{ GET_CODE GET_MODE GET_MODE_SIZE INSN_CODE INTVAL JUMP_LABEL NEXT_INSN PATTERN REGNO SET_DEST SET_SRC XEXP XVECLEN alloca alter_frame_pointer_addresses frame_pointer_address_altered get_max_uid max_uid push_operand rtx }
emit		emit-rtl.c	/^emit (x)/ ;" function 18 { }	{ GET_CODE classify_insn emit_barrier emit_call_insn emit_insn emit_jump_insn emit_label rtx rtx_code simplejump_p }
emit_0_to_1_insn		optabs.c	/^emit_0_to_1_insn (x)/ ;" function 5 { expand_expr }	{ const1_rtx emit_move_insn }
emit_barrier		emit-rtl.c	/^emit_barrier ()/ ;" function 7 { emit emit_jump expand_call expand_end_case expand_expr expand_inline_function expand_null_return_1 expand_return }	{ INSN_UID add_insn cur_insn_uid rtx rtx_alloc }
emit_barrier_after		emit-rtl.c	/^emit_barrier_after (after)/ ;" function 10 { cse_insn expand_end_loop jump_optimize }	{ INSN_UID add_insn_after cur_insn_uid rtx rtx_alloc }
emit_block_move		expr.c	/^emit_block_move (x, y, size, align)/ ;" function 74 { expand_call store_expr store_one_arg }	{ GET_CODE GET_MODE GET_MODE_BITSIZE INTVAL MOVE_RATIO XEXP emit_insn emit_library_call gen_rtx move_by_pieces move_by_pieces_ninsns protect_from_queue }
emit_call_1		expr.c	/^emit_call_1 (funexp, funtype, stack_size, next_arg/ ;" function 33 { emit_library_call expand_call }	{ TREE_TYPE adjust_stack emit_call_insn flag_defer_pop gen_rtx inhibit_defer_pop pending_stack_adjust rtx }
emit_call_insn		emit-rtl.c	/^emit_call_insn (pattern)/ ;" function 13 { emit emit_call_1 expand_inline_function }	{ GET_CODE NULL PUT_CODE add_insn emit_insn make_insn_raw rtx }
emit_call_insn_before		emit-rtl.c	/^emit_call_insn_before (pattern, before)/ ;" function 7 { move_movables }	{ PUT_CODE emit_insn_before rtx }
emit_case_nodes		stmt.c	/^emit_case_nodes (index, node, default_label, unsig/ ;" function 188 { emit_case_nodes expand_end_case }	{ NULL_TREE build_decl do_jump_if_equal emit_case_nodes emit_cmp_insn emit_jump emit_jump_if_reachable emit_jump_insn expand_expr expand_label label_rtx node_has_high_bound node_has_low_bound node_is_bounded rtx tree_int_cst_equal }
emit_clr_insn		optabs.c	/^emit_clr_insn (x)/ ;" function 5 { convert_move expand_expr }	{ const0_rtx emit_move_insn }
emit_cmp_insn		optabs.c	/^emit_cmp_insn (x, y, size, unsignedp, align)/ ;" function 182 { compare compare1 convert_move do_jump_if_equal do_tablejump emit_case_nodes emit_cmp_insn expand_divmod expand_expr expand_float }	{ CONST0_RTX GEN_FCN GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_CLASS INC_MODE INTVAL XEXP cmp_optab const0_rtx const1_rtx convert_to_mode emit_cmp_insn emit_insn emit_library_call emit_queue flag_force_mem force_not_mem force_reg gen_rtx hard_libcall_value machine_mode mode_class protect_from_queue string tst_optab ucmp_optab }
emit_filename		stmt.c	/^char *emit_filename;/ ;" global 1 { emit_line_note expand_expr_stmt warn_if_unused_value }	{ }
emit_insn		emit-rtl.c	/^emit_insn (pattern)/ ;" function 20 { adjust_stack anti_adjust_stack convert_move do_store_flag emit emit_block_move emit_call_insn emit_cmp_insn emit_jump_insn emit_library_call emit_move_insn emit_nop emit_push_insn emit_queue emit_unop_insn expand_asm expand_asm_operands expand_binop expand_builtin expand_call expand_decl expand_expr expand_function_end expand_inline_function expand_return expand_shift expand_twoval_binop expand_unop extract_bit_field move_by_pieces_1 prepare_call_address store_bit_field store_constructor use_regs use_variable }	{ GET_CODE NULL XVEC XVECEXP XVECLEN add_insn make_insn_raw rtx }
emit_insn_after		emit-rtl.c	/^emit_insn_after (pattern, after)/ ;" function 22 { check_dbra_loop do_store_flag emit_mult_restore expand_function_end fixup_gotos fixup_var_refs_1 strength_reduce use_variable_after }	{ GET_CODE NEXT_INSN XVEC XVECEXP XVECLEN add_insn_after make_insn_raw rtx }
emit_insn_before		emit-rtl.c	/^emit_insn_before (pattern, before)/ ;" function 28 { check_dbra_loop constant_high_bytes eliminate_biv emit_call_insn_before emit_iv_init_code emit_mult_save emit_reload_insns fixup_memory_subreg fixup_stack_1 fixup_var_refs_1 gen_input_reload inc_for_reload loop_skip_over move_movables protect_from_queue regclass }	{ GET_CODE NEXT_INSN PREV_INSN XVEC XVECEXP XVECLEN add_insn_after first_insn make_insn_raw rtx }
emit_insns		emit-rtl.c	/^emit_insns (insn)/ ;" function 10 { expand_expr }	{ NEXT_INSN add_insn rtx }
emit_iv_inc		loop.c	/^emit_iv_inc (biv_add, giv_mult, reg, insn)/ ;" function 8 { strength_reduce }	{ emit_iv_init_code }
emit_iv_init_code		loop.c	/^emit_iv_init_code (b, m, a, reg, insert_before)/ ;" function 23 { eliminate_biv emit_iv_inc strength_reduce }	{ GET_MODE copy_rtx emit_insn_before emit_move_insn end_sequence expand_mult_add gen_sequence rtx start_sequence }
emit_jump		stmt.c	/^emit_jump (label)/ ;" function 7 { do_jump do_jump_if_equal emit_case_nodes emit_jump_if_reachable expand_end_case expand_end_loop expand_goto_internal expand_inline_function expand_start_else try_fold_cc0 }	{ do_pending_stack_adjust emit_barrier emit_jump_insn }
emit_jump_if_reachable		stmt.c	/^emit_jump_if_reachable (label)/ ;" function 8 { emit_case_nodes expand_end_case }	{ GET_CODE emit_jump get_last_insn last_insn rtx }
emit_jump_insn		emit-rtl.c	/^emit_jump_insn (pattern)/ ;" function 12 { convert_move do_jump do_jump_if_equal do_tablejump emit emit_case_nodes emit_jump expand_divmod expand_end_case expand_expr expand_float expand_function_end expand_inline_function expand_null_return_1 }	{ GET_CODE NULL add_insn emit_insn make_jump_insn_raw rtx }
emit_jump_insn_after		emit-rtl.c	/^emit_jump_insn_after (pattern, after)/ ;" function 8 { expand_end_loop }	{ add_insn_after make_jump_insn_raw rtx }
emit_jump_insn_before		emit-rtl.c	/^emit_jump_insn_before (pattern, before)/ ;" function 16 { check_dbra_loop loop_skip_over }	{ NEXT_INSN PREV_INSN first_insn make_jump_insn_raw rtx }
emit_label		emit-rtl.c	/^emit_label (label)/ ;" function 13 { convert_move do_jump emit expand_divmod expand_end_bindings expand_end_case expand_end_cond expand_end_else expand_end_loop expand_expr expand_float expand_function_end expand_inline_function expand_label expand_loop_continue_here expand_return expand_start_else expand_start_loop save_for_inline }	{ INSN_UID add_insn cur_insn_uid }
emit_label_after		emit-rtl.c	/^emit_label_after (label, after)/ ;" function 12 { do_cross_jump expand_end_loop expand_return loop_skip_over predecide_loop_entry }	{ INSN_UID add_insn_after cur_insn_uid }
emit_library_call		expr.c	/^emit_library_call (va_alist)/ ;" function 175 { clear_storage convert_move emit_block_move emit_cmp_insn emit_push_insn expand_binop expand_fix expand_float expand_unop }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE NO_DEFER_POP OK_DEFER_POP STACK_BYTES XSTR alloca args_size convert_move emit_call_1 emit_insn emit_move_insn emit_push_insn emit_queue force_operand gen_reg_rtx gen_rtx get_identifier hard_libcall_value inhibit_defer_pop machine_mode prepare_call_address push_block round_push rtx tree void_type_node }
emit_line_note		emit-rtl.c	/^emit_line_note (file, line)/ ;" function 14 { emit_line_note_force expand_decl_init init_function_start }	{ emit_filename emit_lineno emit_note line no_line_numbers }
emit_line_note_force		emit-rtl.c	/^emit_line_note_force (file, line)/ ;" function 7 { expand_function_end }	{ emit_line_note last_linenum line }
emit_lineno		stmt.c	/^int emit_lineno;/ ;" global 1 { emit_line_note expand_expr_stmt warn_if_unused_value }	{ }
emit_move_insn		expr.c	/^emit_move_insn (x, y)/ ;" function 56 { assign_parms clear_storage convert_move copy_to_mode_reg copy_to_reg copy_to_suggested_reg do_store_flag emit_0_to_1_insn emit_clr_insn emit_iv_init_code emit_library_call emit_push_insn emit_unop_insn expand_builtin expand_call expand_dec expand_decl expand_end_bindings expand_expr expand_fix expand_float expand_function_end expand_function_start expand_goto_internal expand_inc expand_increment expand_return force_not_mem force_reg gen_iv_mult make_safe_from move_block_from_reg move_block_to_reg prepare_call_address store_bit_field store_constructor store_expr store_fixed_bit_field store_one_arg tail_recursion_args }	{ CONSTANT_P GEN_FCN GET_CODE GET_MODE GET_MODE_SIZE XEXP const0_rtx dconst0_rtx emit_insn force_const_double_mem force_const_mem gen_rtx machine_mode memory_address memory_address_p mov_optab plus_constant protect_from_queue rtx }
emit_mult_restore		caller-save.c	/^emit_mult_restore (insn, addr, offset)/ ;" function 15 { insert_call_saves }	{ GET_MODE emit_insn_after gen_move_insn gen_rtx plus_constant rtx save_reg_rtx }
emit_mult_save		caller-save.c	/^emit_mult_save (insn, addr, offset)/ ;" function 15 { insert_call_saves }	{ GET_MODE emit_insn_before gen_move_insn gen_rtx plus_constant rtx save_reg_rtx }
emit_nop		stmt.c	/^emit_nop ()/ ;" function 8 { }	{ GET_CODE emit_insn get_last_insn last_insn optimize prev_real_insn rtx }
emit_note		emit-rtl.c	/^emit_note (file, line)/ ;" function 28 { emit_line_note expand_call expand_end_bindings expand_end_loop expand_function_end expand_function_start expand_inline_function expand_loop_continue_here expand_start_bindings expand_start_case expand_start_loop init_function_start reload }	{ INSN_UID XINT XSTR add_insn cur_insn_uid last_filename last_linenum line no_line_numbers rtx rtx_alloc }
emit_note_after		emit-rtl.c	/^emit_note_after (subtype, after)/ ;" function 10 { }	{ INSN_UID XINT XSTR add_insn_after cur_insn_uid rtx rtx_alloc }
emit_push_insn		expr.c	/^emit_push_insn (x, mode, size, align, partial, reg/ ;" function 306 { emit_library_call emit_push_insn store_one_arg }	{ FUNCTION_ARG_PADDING GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE INTVAL MOVE_RATIO NO_DEFER_POP OK_DEFER_POP REGNO XEXP anti_adjust_stack change_address const0_rtx copy_to_reg dconst0_rtx direction emit_insn emit_library_call emit_move_insn emit_push_insn expand_binop force_const_double_mem gen_push_operand gen_rtx memory_address move_block_to_reg move_by_pieces move_by_pieces_ninsns plus_constant protect_from_queue push_block reg_mentioned_p rtx skip stack_pointer_rtx sub_optab }
emit_queue		expr.c	/^emit_queue ()/ ;" function 9 { c_expand_asm_operands do_jump emit_cmp_insn emit_library_call expand_call expand_decl_init expand_end_case expand_expr expand_expr_stmt expand_inline_function expand_return expand_start_loop store_one_arg }	{ QUEUED_BODY QUEUED_INSN QUEUED_NEXT emit_insn pending_chain rtx }
emit_reload_insns		reload1.c	/^emit_reload_insns (insn)/ ;" function 429 { reload_as_needed }	{ GET_CODE GET_MODE GET_MODE_SIZE NEXT_INSN PATTERN PREV_INSN REGNO REG_NOTES REG_NOTE_KIND SET_DEST SET_SRC SUBREG_REG SUBREG_WORD XEXP alter_reg asm_noperands constraint_accepts_reg_p count_occurrences dead_or_set_p delete_output_reload emit_insn_before find_equiv_reg find_reg_note forget_old_reloads_1 gen_input_reload gen_move_insn gen_rtx inc_for_reload machine_mode n_reloads note_stores optimize reg_mentioned_p reg_n_deaths reg_n_sets reg_renumber regno_dead_p reload_in reload_inc reload_inherited reload_inmode reload_out reload_reg_free_before_p reload_reg_free_p reload_reg_rtx reload_spill_index reload_strict_low reload_when_needed remove_death rtx source spill_reg_order spill_reg_store }
emit_unop_insn		optabs.c	/^emit_unop_insn (icode, target, op0, code)/ ;" function 42 { convert_move expand_fix expand_float }	{ GEN_FCN GET_CODE GET_MODE PREV_INSN REG_NOTES emit_insn emit_move_insn flag_force_mem force_not_mem force_reg gen_reg_rtx gen_rtx get_last_insn machine_mode prev_insn protect_from_queue rtx }
encode		fold-const.c	/^encode (shorts, low, hi)/ ;" function 13 { add_double div_and_round_double lrotate_double lshift_double mul_double rrotate_double rshift_double }	{ }
encode_aggregate		objc-actions.c	/^static void encode_aggregate(tree type, char *type/ ;" function 82 { encode_type }	{ IDENTIFIER_POINTER NeXT_ENCODE_INLINE_DEFS TREE_CHAIN TREE_CODE TYPE_FIELDS TYPE_NAME encode_field_decl tree tree_code type }
encode_array		objc-actions.c	/^static void encode_array(tree type, char *typeStr,/ ;" function 11 { encode_type }	{ TREE_INT_CST_LOW TREE_TYPE TYPE_SIZE encode_type tree type }
encode_bitfield		objc-actions.c	/^static void encode_bitfield(int width, char *typeS/ ;" function 4 { encode_field_decl }	{ }
encode_field_decl		objc-actions.c	/^void encode_field_decl(tree field_decl, char *type/ ;" function 7 { build_ivar_list_initializer encode_aggregate }	{ DECL_SIZE_UNIT TREE_PACKED TREE_TYPE encode_bitfield encode_type }
encode_method_decl		objc-actions.c	/^void encode_method_decl(tree functype, char *typeS/ ;" function 18 { build_dispatch_table_initializer }	{ TREE_CHAIN TREE_TYPE TREE_VALUE TYPE_ARG_TYPES encode_type tree void_type_node }
encode_pointer		objc-actions.c	/^static void encode_pointer(tree type, char *typeSt/ ;" function 44 { encode_type }	{ IDENTIFIER_POINTER TAG_CLASS TAG_OBJECT TAG_SELECTOR TREE_CODE TREE_STATIC_TEMPLATE TREE_TYPE TYPE_MODE TYPE_NAME encode_type tree type }
encode_type		objc-actions.c	/^static void encode_type(tree type, char *typeStr, / ;" function 63 { build_encode_expr encode_array encode_field_decl encode_method_decl encode_pointer }	{ TREE_CODE TREE_INT_CST_LOW TYPE_MIN_VALUE TYPE_MODE encode_aggregate encode_array encode_pointer long_integer_type_node long_unsigned_type_node tree_code type }
end_final		final.c	/^end_final (filename)/ ;" function 66 { compile_file }	{ asm_out_file assemble_integer_zero assemble_string count_basic_blocks data_section exact_log2 gen_rtx min profile_block_flag text_section }
end_of_file		objc-parse.y	/^static int end_of_file;/ ;" global 1 { yyerror yylex }	{ }
end_sequence		emit-rtl.c	/^end_sequence (saved)/ ;" function 7 { emit_iv_init_code expand_end_stmt_expr expand_function_end fixup_memory_subreg fixup_var_refs gen_iv_mult }	{ XEXP first_insn last_insn sequence_stack }
end_temporary_allocation		tree.c	/^end_temporary_allocation ()/ ;" function 6 { build_int finish_decl grokdeclarator implicitly_declare layout_type output_constant_def }	{ current_obstack expression_obstack permanent_obstack rtl_obstack saveable_obstack }
endif		varasm.c	/^#endif/ ;" global 3 { }	{ }
enqueue_insn		expr.c	/^enqueue_insn (var, body)/ ;" function 7 { expand_increment }	{ GET_MODE gen_rtx pending_chain }
enum_next_value		c-decl.c	/^static tree enum_next_value;/ ;" global 1 { build_enumerator start_enum }	{ }
enumerator		objc-parse.y	/^enumerator:/ ;" yacctoken 1 { }	{ }
enumlist		objc-parse.y	/^enumlist:/ ;" yacctoken 1 { }	{ }
equiv_constant		cse.c	/^equiv_constant (x)/ ;" function 33 { cse_insn fold_cc0 fold_rtx }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE HOST_BITS_PER_INT INTVAL SUBREG_REG SUBREG_WORD gen_rtx qty_const rtx }
errbuf		objc-actions.c	/^static char *errbuf;	\/* a buffer for error diagnos/ ;" global 1 { build_message_expr error_with_ivar error_with_method genPrototype init_objc objc_debug warn_with_method }	{ }
error		toplev.c	/^error (s, v, v2)/ ;" function 7 { Mtoplev actualparameterlist add_class_method add_instance_method binary_op_error build_array_ref build_array_type build_component_ref build_conditional_expr build_enumerator build_function_call build_function_type build_indirect_ref build_ivar_chain build_message_expr build_unary_op c_expand_start_case check_ivars check_newline convert convert_for_assignment convert_to_integer convert_to_pointer convert_to_real default_conversion digest_init duplicate_decls expand_asm_operands expand_goto_internal fatal fatal_insn_not_found get_parm_info get_super_receiver grokdeclarator grokparms incomplete_type_error is_public lookup_tag lvalue_or_else make_decl_rtl mark_addressable objc_check_decl output_constant output_constructor poplevel process_init_constructor readescape rest_of_decl_compilation set_target_switch skip_white_space start_class start_decl start_enum start_function start_struct store_init_value store_parm_decls variable_size yyerror yylex }	{ error_with_file_and_line input_filename lineno }
error_for_asm		toplev.c	/^error_for_asm (insn, s, v, v2)/ ;" function 29 { choose_reload_regs find_reloads output_operand_lossage }	{ ASM_OPERANDS_SOURCE_FILE ASM_OPERANDS_SOURCE_LINE GET_CODE PATTERN SET_SRC XVECEXP error_with_file_and_line line rtx }
error_mark_node		c-decl.c	/^tree error_mark_node;/ ;" global 1 { assemble_variable assign_parms build_array_ref build_binary_op_nodefault build_c_cast build_component_ref build_conditional_expr build_function_call build_indirect_ref build_message_expr build_modify_expr build_unary_op c_expand_start_case complete_array_type convert convert_for_assignment dbxout_type default_conversion digest_init duplicate_decls expand_asm_operands expand_call expand_decl expand_decl_init expand_end_case expand_expr_stmt expand_inline_function finish_decl finish_function genop get_super_receiver grokdeclarator grokparms init_decl_processing int_size_in_bytes layout_decl layout_record lookup_name plain_type_1 process_init_constructor pushcase pushcase_range pushdecl require_complete_type rest_of_decl_compilation sdbout_type size_in_bytes stabilize_reference start_decl start_function store_init_value store_parm_decls symout_block_symbols }	{ }
error_with_decl		toplev.c	/^error_with_decl (decl, s, v)/ ;" function 20 { define_label duplicate_decls expand_end_bindings expand_expr finish_decl finish_struct fixup_gotos layout_union make_decl_rtl objc_check_decl pushdecl store_parm_decls }	{ DECL_NAME DECL_PRINT_NAME DECL_SOURCE_FILE DECL_SOURCE_LINE IDENTIFIER_POINTER count_error decl report_error_function }
error_with_file_and_line		toplev.c	/^error_with_file_and_line (file, line, s, v, v2)/ ;" function 18 { assemble_variable error error_for_asm }	{ count_error line progname report_error_function }
error_with_ivar		objc-actions.c	/^static void error_with_ivar(char *message, tree de/ ;" function 9 { check_ivars }	{ BUFSIZE DECL_SOURCE_FILE DECL_SOURCE_LINE decl errbuf errorcount genDeclaration }
error_with_method		objc-actions.c	/^static void error_with_method(char *message, char / ;" function 9 { reallyStartMethod }	{ BUFSIZE errbuf errorcount genMethodDecl }
errorcount		toplev.c	/^int errorcount = 0;/ ;" global 1 { Mtoplev compile_file count_error error_with_ivar error_with_method }	{ }
errstmt		objc-parse.y	/^errstmt:  error ';'/ ;" yacctoken 1 { }	{ }
exact_log2		toplev.c	/^exact_log2 (x)/ ;" function 9 { end_final expand_divmod expand_expr expand_mult force_const_mem simplify_set_cc0_and }	{ HOST_BITS_PER_INT }
exp_equiv_p		cse.c	/^exp_equiv_p (x, y, validate)/ ;" function 75 { cse_insn exp_equiv_p lookup lookup_as_function lookup_for_remove refers_to_p }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XINT XSTR XVECEXP XVECLEN exp_equiv_p reg_in_table reg_qty reg_tick rtx_code }
expand_anon_union_decl		stmt.c	/^expand_anon_union_decl (decl, cleanup, decl_elts)/ ;" function 33 { }	{ DECL_RTL GET_MODE TREE_CHAIN TREE_PURPOSE TREE_TYPE TREE_VALUE TYPE_MODE block block_stack decl expand_decl gen_rtx nesting rtx temp_tree_cons tree }
expand_asm		stmt.c	/^expand_asm (body)/ ;" function 7 { }	{ TREE_STRING_POINTER emit_insn gen_rtx last_expr_type }
expand_asm_operands		stmt.c	/^expand_asm_operands (string, outputs, inputs, clob/ ;" function 205 { c_expand_asm_operands }	{ MEM_VOLATILE_P NULL_TREE SET_SRC TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE TREE_VALUE TYPE_MODE XSTR XVECEXP alloca build_nt emit_insn error error_mark_node expand_expr gen_reg_rtx gen_rtx last_expr_type line list_length protect_from_queue reg_names rtvec rtvec_alloc rtx save_expr_regs string tree }
expand_assignment		expr.c	/^expand_assignment (to, from, want_value, suggest_r/ ;" function 95 { expand_decl_init expand_expr expand_increment }	{ DECL_MODE DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT GET_MODE_BITSIZE TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_THIS_VOLATILE TREE_TYPE TREE_UNSIGNED TYPE_ALIGN TYPE_MODE TYPE_SIZE TYPE_SIZE_UNIT expand_expr machine_mode rtx stabilize_reference store_expr store_field tree }
expand_binop		optabs.c	/^expand_binop (mode, binoptab, op0, op1, target, un/ ;" function 253 { emit_push_insn expand_binop expand_bit_and expand_builtin expand_dec expand_divmod expand_expr expand_fix expand_float expand_inc expand_increment expand_mult expand_shift extract_split_bit_field force_operand sign_expand_binop store_fixed_bit_field }	{ GEN_FCN GET_CODE GET_MODE GET_MODE_CLASS INC_MODE NEXT_INSN REG_NOTES add_optab and_optab andcb_optab ashl_optab convert_move convert_to_mode copy_to_mode_reg copy_to_reg delete_insns_since emit_insn emit_library_call expand_binop flag_force_mem flag_no_function_cse force_not_mem force_reg gen_lowpart gen_reg_rtx gen_rtx get_last_insn hard_libcall_value ior_optab lshl_optab machine_mode mode_class protect_from_queue rtx rtx_equal_p smul_optab smul_widen_optab sub_optab umul_optab umul_widen_optab xor_optab }
expand_bit_and		expmed.c	/^expand_bit_and (mode, op0, op1, target)/ ;" function 12 { do_store_flag expand_divmod expand_expr extract_fixed_bit_field store_fixed_bit_field }	{ and_optab expand_binop rtx }
expand_builtin		expr.c	/^expand_builtin (exp, target, subtarget, mode, igno/ ;" function 163 { expand_expr }	{ CONSTANT_P DECL_FUNCTION_CODE GET_CODE GET_MODE NEXT_INSN STACK_BYTES TREE_CODE TREE_OPERAND TREE_TYPE TREE_VALUE add_optab anti_adjust_stack const0_rtx convert_to_mode copy_to_reg current_function_calls_alloca do_pending_stack_adjust emit_insn emit_move_insn expand_binop expand_call expand_expr expand_unop ffs_optab force_reg frame_pointer_needed gen_add2_insn gen_rtx get_insns get_last_insn plus_constant reorder_insns round_push rtx stack_pointer_rtx tree tree_code type }
expand_call		expr.c	/^expand_call (exp, target, ignore)/ ;" function 833 { expand_builtin expand_expr preexpand_calls }	{ ADD_PARM_SIZE ARGS_SIZE_RTX CONSTANT_P DECL_NAME DECL_RTL DECL_SAVED_INSNS FUNCTION_ARG_PADDING GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE IDENTIFIER_POINTER NEXT_INSN NOTE_INSN_SETJMP NO_DEFER_POP OK_DEFER_POP REGNO REG_NOTES REG_P RETURN_IN_MEMORY STACK_BYTES TREE_ADDRESSABLE TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_PURPOSE TREE_READONLY TREE_THIS_VOLATILE TREE_TYPE TREE_VALUE TYPE_ALIGN TYPE_ARG_TYPES TYPE_MODE TYPE_SIZE XEXP adjust_stack aggregate_value_p alloca anti_adjust_stack arg_data args_size assign_stack_local build build_pointer_type cleanups_of_this_call const0_rtx convert_units copy_to_mode_reg copy_to_reg current_function_calls_alloca current_function_calls_setjmp current_function_decl do_pending_stack_adjust emit_barrier emit_block_move emit_call_1 emit_insn emit_move_insn emit_note (etc) }
expand_cleanups		stmt.c	/^expand_cleanups (list, dont_do)/ ;" function 14 { expand_cleanups expand_end_bindings expand_goto_internal fixup_cleanups }	{ TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_VALUE const0_rtx expand_cleanups expand_expr tree }
expand_continue_loop		stmt.c	/^expand_continue_loop ()/ ;" function 8 { }	{ expand_goto_internal last_expr_type loop_stack }
expand_dec		expmed.c	/^expand_dec (target, dec)/ ;" function 9 { expand_divmod }	{ GET_MODE emit_move_insn expand_binop rtx sub_optab }
expand_decl		stmt.c	/^expand_decl (decl, cleanup)/ ;" function 202 { expand_anon_union_decl finish_decl finish_struct start_decl }	{ DECL_ALIGN DECL_INITIAL DECL_MODE DECL_RTL DECL_SIZE DECL_SIZE_UNIT GET_CODE MEM_IN_STRUCT_P MEM_VOLATILE_P NULL_TREE REG_USERVAR_P RTX_UNCHANGING_P TREE_ADDRESSABLE TREE_CODE TREE_EXTERNAL TREE_INT_CST_LOW TREE_LITERAL TREE_READONLY TREE_REGDECL TREE_STATIC TREE_TYPE TREE_VOLATILE XEXP anti_adjust_stack assign_stack_local block block_stack const0_rtx convert_units copy_to_reg decl direction do_pending_stack_adjust emit_insn emit_move_insn error_mark_node expand_expr flag_float_store force_operand frame_pointer_needed gen_add2_insn gen_reg_rtx gen_rtx mark_reg_pointer nesting obey_regdecls plus_constant round_push rtx stack_block_stack stack_pointer_rtx temp_tree_cons tree type use_variable }
expand_decl_init		stmt.c	/^expand_decl_init (decl)/ ;" function 24 { finish_decl }	{ DECL_INITIAL DECL_SOURCE_FILE DECL_SOURCE_LINE TREE_CODE TREE_STATIC TREE_TYPE convert decl emit_line_note emit_queue error_mark_node expand_assignment integer_zero_node tree_code }
expand_divmod		expmed.c	/^expand_divmod (rem_flag, code, mode, op0, op1, tar/ ;" function 200 { expand_expr round_push }	{ GET_CODE GET_MODE INTVAL REG_FUNCTION_VALUE_P REG_P add_optab build_int_2 const0_rtx const1_rtx copy_to_suggested_reg emit_cmp_insn emit_jump_insn emit_label exact_log2 expand_binop expand_bit_and expand_dec expand_inc expand_mult expand_shift expand_twoval_binop expand_unop gen_label_rtx gen_reg_rtx gen_rtx integer_one_node neg_optab plus_constant reg_mentioned_p rtx sdiv_optab sdivmod_optab sign_expand_binop smod_optab sub_optab udiv_optab udivmod_optab umod_optab }
expand_end_bindings		stmt.c	/^expand_end_bindings (vars, mark_ends, dont_jump_in/ ;" function 91 { expand_inline_function }	{ DECL_RTL NOTE_INSN_BLOCK_END NOTE_INSN_DELETED NOTE_LINE_NUMBER POPSTACK TREE_ADDRESSABLE TREE_CHAIN TREE_CODE TREE_PACKED TREE_USED block block_stack decl do_pending_stack_adjust emit_label emit_move_insn emit_note error_with_decl expand_cleanups first_insn fixup_gotos label_chain nesting obey_regdecls rtx stack_block_stack stack_pointer_rtx tree use_variable warn_unused warning_with_decl }
expand_end_case		stmt.c	/^expand_end_case (orig_index)/ ;" function 265 { }	{ GET_CODE GET_MODE GET_MODE_BITSIZE INTVAL INT_CST_LT NEXT_INSN NULL_TREE POPSTACK TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_TYPE TREE_UNSIGNED TYPE_MODE alloca balance_case_nodes build build_decl build_int_2 case_node case_stack check_for_full_enumeration_handling cmp_optab combine const0_rtx convert convert_to_mode copy_to_reg do_pending_stack_adjust do_tablejump emit_barrier emit_case_nodes emit_jump emit_jump_if_reachable emit_jump_insn emit_label emit_queue error_mark_node expand_expr expand_label gen_label_rtx gen_rtvec_v gen_rtx get_last_insn group_case_nodes integer_zero_node label_rtx nesting protect_from_queue reorder_insns rtx tree tree_int_cst_equal tree_int_cst_lt type_for_size warn_switch }
expand_end_case_dummy		stmt.c	/^expand_end_case_dummy ()/ ;" function 4 { }	{ POPSTACK case_stack }
expand_end_cond		stmt.c	/^expand_end_cond ()/ ;" function 10 { }	{ POPSTACK cond_stack do_pending_stack_adjust emit_label last_expr_type nesting }
expand_end_else		stmt.c	/^expand_end_else ()/ ;" function 13 { }	{ POPSTACK cond_stack do_pending_stack_adjust emit_label last_expr_type nesting }
expand_end_loop		stmt.c	/^expand_end_loop ()/ ;" function 55 { }	{ GET_CODE NEXT_INSN NOTE_INSN_LOOP_END PATTERN POPSTACK PREV_INSN SET_DEST SET_SRC XEXP do_pending_stack_adjust emit_barrier_after emit_jump emit_jump_insn_after emit_label emit_label_after emit_note gen_label_rtx get_last_insn last_expr_type loop_stack optimize pc_rtx reorder_insns rtx }
expand_end_stmt_expr		stmt.c	/^expand_end_stmt_expr (t)/ ;" function 30 { }	{ NULL_TREE OK_DEFER_POP RTL_EXPR_RTL RTL_EXPR_SEQUENCE TREE_THIS_VOLATILE TREE_TYPE TREE_VOLATILE const0_rtx end_sequence expr_stmts_for_value get_insns last_expr_type last_expr_value rtl_expr_chain rtx tree_cons void_type_node volatile_refs_p }
expand_exit_loop		stmt.c	/^expand_exit_loop ()/ ;" function 8 { }	{ expand_goto_internal last_expr_type loop_stack }
expand_exit_loop_if_false		stmt.c	/^expand_exit_loop_if_false (cond)/ ;" function 9 { }	{ NULL do_jump last_expr_type loop_stack }
expand_exit_something		stmt.c	/^expand_exit_something ()/ ;" function 13 { }	{ expand_goto_internal last_expr_type nesting nesting_stack }
expand_expr		expr.c	/^expand_expr (exp, target, tmode, modifier)/ ;" function 1066 { ARGS_SIZE_RTX assign_parms c_expand_asm_operands compare do_jump emit_case_nodes expand_asm_operands expand_assignment expand_builtin expand_call expand_cleanups expand_decl expand_end_case expand_expr expand_expr_stmt expand_function_start expand_increment expand_inline_function expand_mult_add expand_return expand_shift expr_size output_constant store_expr store_field store_one_arg tail_recursion_args variable_size }	{ CALL_EXPR_RTL CONSTANT_P CONSTRUCTOR_ELTS DECL_FUNCTION_CODE DECL_INITIAL DECL_MODE DECL_OFFSET DECL_RTL DECL_SIZE DECL_SIZE_UNIT GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_WIDER_MODE HOST_BITS_PER_INT INTVAL MEM_IN_STRUCT_P MEM_VOLATILE_P NO_DEFER_POP OK_DEFER_POP REGNO RTL_EXPR_RTL RTL_EXPR_SEQUENCE RTX_UNCHANGING_P SAVE_EXPR_RTL STMT_BODY TREE_CHAIN TREE_CODE TREE_CST_RTL TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_LITERAL TREE_OPERAND TREE_PURPOSE TREE_READONLY TREE_STATIC TREE_STRING_LENGTH TREE_STRING_POINTER TREE_THIS_VOLATILE TREE_TYPE TREE_UNSIGNED TREE_USED TREE_VALUE TREE_VOLATILE TYPE_ALIGN TYPE_MODE TYPE_NONCOPIED_PARTS TYPE_POINTER_TO TYPE_PRECISION TYPE_SIZE TYPE_SIZE_UNIT XEXP abs_optab add_optab ashl_optab ashr_optab assign_stack_local bcc_gen_fctn build build_int_2 (etc) }
expand_expr_stmt		stmt.c	/^expand_expr_stmt (exp)/ ;" function 19 { }	{ TREE_TYPE TREE_VOLATILE const0_rtx emit_filename emit_lineno emit_queue error_mark_node expand_expr expr_stmts_for_value extra_warnings flag_syntax_only last_expr_type last_expr_value warn_if_unused_value warn_unused warning_with_file_and_line }
expand_fix		optabs.c	/^expand_fix (to, from, unsignedp)/ ;" function 112 { expand_expr }	{ GET_MODE GET_MODE_BITSIZE HOST_BITS_PER_INT REAL_VALUE_LDEXP REAL_VALUE_TYPE add_optab can_fix_p convert_move convert_to_mode emit_library_call emit_move_insn emit_unop_insn expand_binop flag_force_mem force_not_mem ftruncify gen_reg_rtx gen_rtx hard_libcall_value immed_real_const_1 protect_from_queue rtx sub_optab }
expand_fixup		stmt.c	/^expand_fixup (tree_label, rtl_label, last_insn)/ ;" function 82 { expand_goto_internal }	{ block block_stack cond_stack do_pending_stack_adjust get_last_insn goto_fixup goto_fixup_chain last_insn loop_stack nesting oballoc tree_cons }
expand_float		optabs.c	/^expand_float (real_to, from, unsignedp)/ ;" function 113 { expand_expr }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE REAL_VALUE_LDEXP REAL_VALUE_TYPE add_optab can_float_p convert_move convert_to_mode copy_to_reg dconst0_rtx do_pending_stack_adjust emit_cmp_insn emit_jump_insn emit_label emit_library_call emit_move_insn emit_unop_insn expand_binop fconst0_rtx flag_force_mem force_not_mem gen_label_rtx gen_reg_rtx gen_rtx hard_libcall_value immed_real_const_1 protect_from_queue rtx }
expand_function_end		stmt.c	/^expand_function_end (filename, line)/ ;" function 140 { finish_function output_inline_function }	{ DECL_ARGUMENTS DECL_RESULT DECL_RTL GET_CODE NOTE_INSN_FUNCTION_END REGNO REG_FUNCTION_VALUE_P TREE_CHAIN TREE_CODE TREE_TYPE TREE_USED XEXP build_pointer_type clear_pending_stack_adjust current_function_calls_alloca current_function_decl current_function_returns_pcc_struct current_function_returns_struct decl do_pending_stack_adjust emit_insn emit_insn_after emit_jump_insn emit_label emit_line_note_force emit_move_insn emit_note end_sequence fixup_gotos gen_reg_rtx gen_rtx get_insns hard_function_value immediate_size_expand line max_parm_reg obey_regdecls parm_birth_insn regno_reg_rtx return_label rtx save_expr_regs sequence_stack stack_pointer_rtx tree type use_variable use_variable_after warn_unused warning_with_decl }
expand_function_start		stmt.c	/^expand_function_start (subr, parms_have_cleanups)/ ;" function 116 { store_parm_decls }	{ DECL_MODE DECL_RESULT DECL_RESULT_TYPE DECL_RTL GET_CODE NOTE_INSN_DELETED REG_FUNCTION_VALUE_P TREE_CHAIN TREE_CODE TREE_TYPE TREE_VALUE aggregate_value_p assemble_static_space assign_parms cleanup_label current_function_returns_pcc_struct current_function_returns_pointer current_function_returns_struct emit_move_insn emit_note expand_expr flag_pcc_struct_return force_next_line_note gen_label_rtx gen_reg_rtx gen_rtx get_last_insn get_pending_sizes int_size_in_bytes max_parm_reg obey_regdecls optimize parm_birth_insn regno_reg_rtx return_label rtx struct_value_incoming_rtx tail_recursion_reentry tree use_variable }
expand_goto		stmt.c	/^expand_goto (body)/ ;" function 5 { }	{ expand_goto_internal label_rtx }
expand_goto_internal		stmt.c	/^expand_goto_internal (body, label, last_insn)/ ;" function 50 { expand_continue_loop expand_exit_loop expand_exit_something expand_goto expand_null_return_1 expand_return }	{ DECL_NAME GET_CODE IDENTIFIER_POINTER INSN_UID PREV_INSN TREE_ADDRESSABLE TREE_PACKED block block_stack emit_jump emit_move_insn error expand_cleanups expand_fixup first_insn last_insn nesting rtx stack_pointer_rtx }
expand_inc		expmed.c	/^expand_inc (target, inc)/ ;" function 9 { expand_divmod }	{ GET_MODE add_optab emit_move_insn expand_binop rtx }
expand_increment		expr.c	/^expand_increment (exp, post)/ ;" function 102 { expand_expr }	{ DECL_MODE GEN_FCN GET_CODE INTVAL TREE_CODE TREE_OPERAND TREE_TYPE TREE_UNSIGNED TYPE_MODE add_optab build copy_to_reg emit_move_insn enqueue_insn expand_assignment expand_binop expand_expr force_reg gen_rtx get_last_insn machine_mode optab rtx stabilize stabilize_reference sub_optab tree }
expand_inline_function		integrate.c	/^expand_inline_function (fndecl, parms, target, ign/ ;" function 511 { expand_call }	{ CONSTANT_P DECL_ARGUMENTS DECL_ARG_TYPE DECL_FRAME_SIZE DECL_INITIAL DECL_MODE DECL_OFFSET DECL_RESULT DECL_RESULT_TYPE DECL_RTL DECL_SAVED_INSNS DECL_SOURCE_FILE DECL_SOURCE_LINE FIRST_FUNCTION_INSN FIRST_LABELNO FUNCTION_ARGS_SIZE GET_CODE GET_MODE GET_MODE_SIZE INSN_UID LAST_LABELNO MAX_REGNUM NEXT_INSN NOTE_INSN_FUNCTION_BEG NOTE_INSN_FUNCTION_END NOTE_LINE_NUMBER NOTE_SOURCE_FILE NULL PATTERN REG_FUNCTION_VALUE_P REG_NOTES RTX_INTEGRATED_P SET_DEST SET_SRC TREE_ADDRESSABLE TREE_CHAIN TREE_READONLY TREE_TYPE TREE_VALUE TREE_VOLATILE TYPE_MODE XEXP XVECEXP XVECLEN aggregate_value_p alloca arg_pointer_rtx assign_stack_local cc0_rtx change_address convert_to_mode copy_asm_operands_vector copy_decl_tree copy_parm_decls copy_rtx copy_rtx_and_substitute copy_to_mode_reg copy_to_reg decl do_pending_stack_adjust (etc) }
expand_label		stmt.c	/^expand_label (body)/ ;" function 16 { emit_case_nodes expand_end_case pushcase pushcase_range }	{ block do_pending_stack_adjust emit_label label_chain label_rtx oballoc stack_block_stack }
expand_loop_continue_here		stmt.c	/^expand_loop_continue_here ()/ ;" function 6 { }	{ NOTE_INSN_LOOP_CONT do_pending_stack_adjust emit_label emit_note loop_stack }
expand_modifier		expr.h	/^enum expand_modifier {EXPAND_NORMAL, EXPAND_SUM, E/ ;" struct 1 { }	{ }
expand_mult		expmed.c	/^expand_mult (mode, op0, op1, target, unsignedp)/ ;" function 63 { expand_divmod expand_expr force_operand gen_iv_mult round_push }	{ GET_CODE INTVAL REG_FUNCTION_VALUE_P REG_P build_int_2 exact_log2 expand_binop expand_shift expand_unop floor_log2 force_operand gen_rtx neg_optab rtx smul_optab }
expand_mult_add		expmed.c	/^expand_mult_add (x, mult, add, mode, unsignedp)/ ;" function 11 { emit_iv_init_code }	{ GET_MODE_BITSIZE build expand_expr fold make_tree tree type type_for_size }
expand_null_return		stmt.c	/^expand_null_return ()/ ;" function 14 { c_expand_return expand_return }	{ block block_stack expand_null_return_1 last_insn nesting rtx }
expand_null_return_1		stmt.c	/^expand_null_return_1 (last_insn, use_goto)/ ;" function 33 { expand_null_return expand_return }	{ cleanup_label clear_pending_stack_adjust current_function_returns_pcc_struct do_pending_stack_adjust emit_barrier emit_jump_insn expand_goto_internal gen_label_rtx last_expr_type last_insn return_label rtx }
expand_return		stmt.c	/^expand_return (retval)/ ;" function 141 { c_expand_return }	{ DECL_ARGUMENTS DECL_RESULT DECL_RTL GET_CODE NULL_TREE TREE_CODE TREE_OPERAND TREE_TYPE block block_stack cleanup_label const0_rtx const1_rtx current_function_returns_pcc_struct emit_barrier emit_insn emit_label emit_label_after emit_move_insn emit_queue expand_expr expand_goto_internal expand_null_return expand_null_return_1 frame_offset gen_label_rtx gen_rtx get_last_insn jumpifnot last_insn nesting optimize rtx tail_recursion_args tail_recursion_label tail_recursion_reentry this_function tree void_type_node }
expand_shift		expmed.c	/^expand_shift (code, mode, shifted, amount, target,/ ;" function 146 { do_store_flag expand_divmod expand_expr expand_mult extract_fixed_bit_field extract_split_bit_field store_fixed_bit_field }	{ GET_CODE GET_MODE_BITSIZE GET_MODE_SIZE INTVAL ashl_optab ashr_optab convert_to_mode delete_insns_since emit_insn expand_binop expand_expr flag_force_mem force_not_mem force_reg gen_reg_rtx gen_rtx get_last_insn lshl_optab lshr_optab optab_methods protect_from_queue rotl_optab rotr_optab rtx sub_optab }
expand_start_bindings		stmt.c	/^expand_start_bindings (exit_flag)/ ;" function 30 { expand_inline_function }	{ NOTE_INSN_BLOCK_BEG NULL_TREE block block_stack emit_note first_insn gen_label_rtx label_chain nesting nesting_depth nesting_stack rtx stack_block_stack tree_cons xmalloc }
expand_start_case		stmt.c	/^expand_start_case (exit_flag, expr, type)/ ;" function 30 { c_expand_start_case }	{ NOTE_INSN_DELETED case_stack do_pending_stack_adjust emit_note expr gen_label_rtx get_last_insn nesting nesting_depth nesting_stack type xmalloc }
expand_start_case_dummy		stmt.c	/^expand_start_case_dummy ()/ ;" function 19 { }	{ case_stack nesting nesting_depth nesting_stack xmalloc }
expand_start_cond		stmt.c	/^expand_start_cond (cond, exitflag)/ ;" function 20 { }	{ NULL cond_stack do_jump gen_label_rtx nesting nesting_depth nesting_stack xmalloc }
expand_start_else		stmt.c	/^expand_start_else ()/ ;" function 9 { }	{ cond_stack emit_jump emit_label gen_label_rtx }
expand_start_loop		stmt.c	/^expand_start_loop (exit_flag)/ ;" function 23 { expand_start_loop_continue_elsewhere }	{ NOTE_INSN_LOOP_BEG do_pending_stack_adjust emit_label emit_note emit_queue gen_label_rtx loop_stack nesting nesting_depth nesting_stack xmalloc }
expand_start_loop_continue_elsewhere		stmt.c	/^expand_start_loop_continue_elsewhere (exit_flag)/ ;" function 6 { }	{ expand_start_loop gen_label_rtx loop_stack }
expand_start_stmt_expr		stmt.c	/^expand_start_stmt_expr ()/ ;" function 13 { }	{ NO_DEFER_POP RTL_EXPR_RTL expr_stmts_for_value make_node resume_momentary rtx start_sequence suspend_momentary tree }
expand_twoval_binop		optabs.c	/^expand_twoval_binop (binoptab, op0, op1, targ0, ta/ ;" function 57 { expand_divmod expand_twoval_binop_convert }	{ GEN_FCN GET_MODE GET_MODE_CLASS INC_MODE emit_insn expand_twoval_binop_convert flag_force_mem force_not_mem gen_reg_rtx machine_mode mode_class protect_from_queue }
expand_twoval_binop_convert		optabs.c	/^expand_twoval_binop_convert (binoptab, mode, op0, / ;" function 21 { expand_twoval_binop }	{ convert_move expand_twoval_binop gen_reg_rtx rtx }
expand_unop		optabs.c	/^expand_unop (mode, unoptab, op0, target, unsignedp/ ;" function 122 { convert_move expand_builtin expand_divmod expand_expr expand_mult expand_unop ftruncify negate_rtx }	{ GEN_FCN GET_MODE GET_MODE_CLASS INC_MODE NEXT_INSN REG_NOTES convert_move convert_to_mode copy_to_mode_reg copy_to_reg emit_insn emit_library_call expand_unop flag_force_mem flag_no_function_cse force_not_mem force_reg gen_lowpart gen_reg_rtx gen_rtx get_last_insn hard_libcall_value machine_mode mode_class protect_from_queue rtx }
expr		objc-parse.y	/^expr:	nonnull_exprlist/ ;" yacctoken 1 { build_c_cast build_category_initializer build_expr_stmt build_msg_pool_reference build_selector_translation_table build_shared_structure_initializer convert convert_to_integer convert_to_pointer convert_to_real expand_start_case fold init_def_list init_module_descriptor init_selector integer_all_onesp integer_onep integer_zerop only_reg_use_p save_expr truthvalue_conversion }	{ }
expr_last		objc-actions.c	/^static tree expr_last(tree complex_expr)/ ;" function 9 { reallyStartMethod start_method_def }	{ TREE_OPERAND tree }
expr_no_commas		objc-parse.y	/^expr_no_commas:/ ;" yacctoken 1 { }	{ }
expr_size		explow.c	/^expr_size (exp)/ ;" function 5 { compare expand_call expand_expr store_expr }	{ TREE_TYPE expand_expr size_in_bytes }
expr_stmts_for_value		stmt.c	/^int expr_stmts_for_value;/ ;" global 1 { expand_end_stmt_expr expand_expr_stmt expand_start_stmt_expr }	{ }
expression_obstack		tree.c	/^struct obstack *expression_obstack;/ ;" global 1 { end_temporary_allocation init_tree make_node permanent_allocation pop_momentary push_momentary resume_momentary resume_temporary_allocation suspend_momentary temporary_allocation }	{ }
exprlist		objc-parse.y	/^exprlist:/ ;" yacctoken 1 { }	{ }
extdef		objc-parse.y	/^extdef:/ ;" yacctoken 1 { }	{ }
extdefs		objc-parse.y	/^extdefs:/ ;" yacctoken 1 { }	{ }
extend_token_buffer		objc-parse.y	/^extend_token_buffer (p)/ ;" function 10 { yylex }	{ maxtoken token_buffer xrealloc }
extra_warnings		toplev.c	/^int extra_warnings = 0;/ ;" global 1 { Mtoplev duplicate_decls expand_expr_stmt finish_function is_public lang_decode_option rest_of_compilation }	{ }
extract_bit_field		expmed.c	/^extract_bit_field (str_rtx, bitsize, bitnum, unsig/ ;" function 321 { expand_expr store_field }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE GET_MODE_WIDER_MODE SUBREG_REG SUBREG_WORD XEXP change_address convert_to_mode delete_insns_since emit_insn extract_fixed_bit_field flag_force_mem force_reg gen_lowpart gen_reg_rtx gen_rtx get_last_insn machine_mode plus_constant protect_from_queue rtx }
extract_fixed_bit_field		expmed.c	/^extract_fixed_bit_field (tmode, op0, offset, bitsi/ ;" function 139 { extract_bit_field extract_split_bit_field store_split_bit_field }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE HOST_BITS_PER_INT REG_FUNCTION_VALUE_P XEXP build_int_2 change_address convert_to_mode expand_bit_and expand_shift extract_split_bit_field force_reg gen_rtx machine_mode plus_constant rtx tree }
extract_split_bit_field		expmed.c	/^extract_split_bit_field (op0, bitsize, bitpos, uns/ ;" function 49 { extract_fixed_bit_field }	{ GET_CODE SUBREG_REG SUBREG_WORD XEXP build_int_2 change_address expand_binop expand_shift extract_fixed_bit_field gen_rtx ior_optab plus_constant rtx }
f_options		toplev.c	/^struct { char *string; int *variable; int on_value/ ;" global 24 { Mtoplev }	{ }
fancy_abort		toplev.c	/^fancy_abort ()/ ;" function 4 { }	{ fatal }
fatal		toplev.c	/^fatal (s, v)/ ;" function 7 { fancy_abort pipe_closed really_sorry symout_init xmalloc xrealloc }	{ error }
fatal_insn_not_found		toplev.c	/^fatal_insn_not_found (insn)/ ;" function 7 { }	{ debug_rtx error }
fatal_io_error		toplev.c	/^fatal_io_error (name)/ ;" function 6 { compile_file symout_finish }	{ progname }
fconst0_rtx		emit-rtl.c	/^rtx fconst0_rtx;		\/* (CONST_DOUBLE:SF 0) *\// ;" global 1 { CONST0_RTX expand_float fold_rtx immed_real_const_1 init_emit_once }	{ }
ffs_optab		optabs.c	/^optab ffs_optab;/ ;" global 1 { expand_builtin expand_expr init_optabs }	{ }
file_stack		input.h	/^struct file_stack/ ;" struct 7 { check_newline compile_file report_error_function }	{ }
filter_undefined_types		symout.c	/^filter_undefined_types (types)/ ;" function 15 { symout_finish symout_function_end }	{ TREE_CHAIN TREE_PURPOSE TYPE_SYMTAB_ADDRESS tree }
final		final.c	/^final (first, file, write_symbols, optimize, presc/ ;" function 20 { mark_used_regs propagate_block rest_of_compilation }	{ CC_STATUS_INIT NEXT_INSN final_scan_insn init_recog last_ignored_compare new_block optimize rtx write_symbols }
final_biv_value		loop.c	/^final_biv_value (bl, loop_end)/ ;" function 7 { strength_reduce }	{ }
final_end_function		final.c	/^final_end_function (first, file, write_symbols, op/ ;" function 34 { rest_of_compilation }	{ app_on get_frame_size last_linenum pending_blocks sdbout_end_epilogue sdbout_end_function write_symbols }
final_scan_insn		final.c	/^final_scan_insn  (insn, file, write_symbols, optim/ ;" function 488 { final final_scan_insn }	{ CC_STATUS_INIT CODE_LABEL_NUMBER GET_CODE INSN_CODE INSN_DELETED_P NEXT_INSN NOTE_INSN_BLOCK_BEG NOTE_INSN_BLOCK_END NOTE_INSN_DELETED NOTE_INSN_FUNCTION_BEG NOTE_INSN_LOOP_BEG NOTE_INSN_LOOP_END NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PREV_INSN PUT_CODE SET_DEST SET_SRC XEXP XSTR XVECEXP XVECLEN alter_cond alter_subreg app_on asm_noperands asm_out_file block_depth cc_prev_status cc_status const0_rtx constrain_operands count_basic_blocks decode_asm_operands final_scan_insn final_sequence find_reg_note flag_no_peephole gen_rtx insn_noperands last_ignored_compare last_linenum max_block_depth new_block next_block_index optimize output_asm_insn output_source_line pc_rtx pending_blocks profile_block_flag recog_memoized rtx rtx_equal_p sdbout_begin_block sdbout_begin_function sdbout_end_block string this_is_asm_operands (etc) }
final_sequence		final.c	/^rtx final_sequence;/ ;" global 1 { dbr_sequence_length final_scan_insn init_final }	{ }
final_start_function		final.c	/^final_start_function (first, file, write_symbols, / ;" function 105 { rest_of_compilation }	{ NOTE_INSN_DELETED NOTE_LINE_NUMBER assemble_integer_zero block_depth current_function_needs_context current_function_returns_struct data_section floor_log2 get_frame_size min next_block_index output_source_line pending_blocks profile_block_flag profile_flag profile_label_no text_section this_is_asm_operands write_symbols }
final_time		toplev.c	/^int final_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
find_addr_reg		aux-output.c	/^find_addr_reg (addr)/ ;" function 20 { output_move_double }	{ CONSTANT_P GET_CODE XEXP }
find_basic_blocks		flow.c	/^find_basic_blocks (f)/ ;" function 167 { flow_analysis }	{ BLOCK_NUM GET_CODE INSN_UID LABEL_REFS NEXT_INSN NOTE_INSN_DELETED NOTE_INSN_LOOP_BEG NOTE_INSN_LOOP_END NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PREV_INSN PUT_CODE RTX_CODE SET_SRC XEXP alloca basic_block_drops_in basic_block_end basic_block_head basic_block_loop_depth block_live_static delete_insn mark_label_ref n_basic_blocks rtx simplejump_p }
find_constant_term_loc		recog.c	/^find_constant_term_loc (p)/ ;" function 41 { adj_offsettable_operand find_constant_term_loc offsettable_address_p }	{ CONSTANT_P GET_CODE XEXP find_constant_term_loc rtx rtx_code }
find_cross_jump		jump.c	/^find_cross_jump (e1, e2, minimum, f1, f2)/ ;" function 80 { jump_optimize }	{ GET_CODE JUMP_LABEL PATTERN PREV_INSN prev_real_insn rtx rtx_renumbered_equal_p sets_cc0_p }
find_dummy_reload		reload.c	/^find_dummy_reload (in, out, inloc, outloc, class, / ;" function 87 { find_reloads push_reload }	{ GET_CODE GET_MODE GET_MODE_SIZE PATTERN REGNO SUBREG_REG TEST_HARD_REG_BIT const0_rtx find_regno_note fixed_regs hard_reg_set_here_p hard_regs_live_known refers_to_regno_p reg_class_contents reg_renumber reload_out rtx this_insn }
find_equiv_reg		reload.c	/^find_equiv_reg (goal, insn, class, other, reload_r/ ;" function 290 { choose_reload_regs emit_reload_insns find_reloads jump_optimize push_reload }	{ CONSTANT_P GET_CODE GET_MODE INSN_UID MEM_VOLATILE_P PATTERN PREV_INSN REGNO REG_NOTES REG_NOTE_KIND SET_DEST SET_SRC TEST_HARD_REG_BIT XEXP XVECEXP XVECLEN call_used_regs flag_float_store n_reloads push_operand refers_to_regno_p reg_class_contents reload_first_uid reload_in reload_reg_rtx rtx rtx_addr_varies_p rtx_code rtx_equal_p rtx_renumbered_equal_p }
find_free_reg		local-alloc.c	/^find_free_reg (class, mode, qty, accept_call_clobb/ ;" function 91 { block_alloc find_free_reg }	{ CALLER_SAVE_PROFITABLE COPY_HARD_REG_SET HARD_REG_SET IOR_COMPL_HARD_REG_SET IOR_HARD_REG_SET SET_HARD_REG_BIT TEST_HARD_REG_BIT call_fixed_reg_set call_used_reg_set caller_save_needed find_free_reg fixed_reg_set flag_caller_saves post_mark_life qty_n_calls_crossed qty_n_refs qty_phys_sugg reg_alloc_order reg_class_contents regs_live_at }
find_inc_amount		reload.c	/^find_inc_amount (x, inced)/ ;" function 41 { find_inc_amount find_reloads_address_1 push_reload }	{ GET_CODE GET_MODE GET_MODE_SIZE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN find_inc_amount rtx rtx_code }
find_mem_givs		loop.c	/^find_mem_givs (x, insn, maybe_never, loop_end)/ ;" function 66 { find_mem_givs strength_reduce }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN find_mem_givs general_induction_var induction oballoc record_giv rtx rtx_code }
find_reg		global-alloc.c	/^find_reg (allocno, losers, all_regs_p, accept_call/ ;" function 133 { find_reg global_alloc retry_global_alloc }	{ AND_COMPL_HARD_REG_SET CALLER_SAVE_PROFITABLE CLEAR_HARD_REG_SET CONFLICTP COPY_HARD_REG_SET HARD_REG_SET IOR_COMPL_HARD_REG_SET IOR_HARD_REG_SET PSEUDO_REGNO_MODE SET_HARD_REG_BIT TEST_HARD_REG_BIT allocno_reg call_fixed_reg_set call_used_reg_set caller_save_needed find_reg fixed_reg_set flag_caller_saves frame_pointer_needed hard_reg_conflicts machine_mode max_allocno no_global_alloc_regs reg_alloc_order reg_class_contents reg_n_calls_crossed reg_n_refs reg_preferred_class reg_renumber regs_someone_prefers }
find_reg_note		rtlanal.c	/^find_reg_note (insn, kind, datum)/ ;" function 13 { combine_instructions consec_sets_giv consec_sets_invariant_p cse_insn delete_insn_forces delete_jump emit_reload_insns expand_inline_function final_scan_insn ignore_some_movables move_movables propagate_block reload scan_loop skip_consec_insns strength_reduce try_combine }	{ REG_NOTES REG_NOTE_KIND XEXP rtx }
find_regno_note		rtlanal.c	/^find_regno_note (insn, kind, regno)/ ;" function 13 { combine_regs delete_output_reload find_dummy_reload global_conflicts mark_used_regs reg_is_set }	{ REGNO REG_NOTES REG_NOTE_KIND XEXP rtx }
find_reloads		reload.c	/^find_reloads (insn, replace, ind_ok, live_known, r/ ;" function 1100 { reload reload_as_needed }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE INTVAL PATTERN REGNO RTX_CODE SET_DEST SET_SRC SUBREG_REG SUBREG_WORD XEXP alternative_allows_memconst asm_noperands combine_reloads const0_rtx decode_asm_operands decompose decomposition error_for_asm find_dummy_reload find_equiv_reg find_reloads_address find_reloads_toplev force_const_double_mem force_const_mem gen_rtx hard_regs_live_known immune_p indirect_ok machine_mode n_earlyclobbers n_memlocs n_occurrences n_reloads n_replacements offsettable_memref_p operands_match_p optimize output_address output_reloadnum push_reload push_replacement recog_memoized reg_class_size reg_class_subunion reg_equiv_address reg_equiv_constant reg_equiv_mem reg_fits_class_p reg_renumber reload_earlyclobbers reload_in reload_inc reload_inmode reload_needed_for reload_needed_for_multiple reload_optional reload_out (etc) }
find_reloads_address		reload.c	/^find_reloads_address (mode, memrefloc, ad, loc, op/ ;" function 157 { find_reloads find_reloads_toplev }	{ GET_CODE GET_MODE REGNO XEXP arg_pointer_rtx copy_rtx double_reg_address_ok find_reloads_address_1 frame_pointer_rtx indirect_ok make_memloc push_reload reg_equiv_address reg_equiv_constant reg_equiv_mem reg_renumber rtx strict_memory_address_p subst_indexed_address subst_reg_equivs subst_reg_equivs_changed }
find_reloads_address_1		reload.c	/^find_reloads_address_1 (x, context, loc, operand)/ ;" function 189 { find_reloads_address find_reloads_address_1 }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH PATTERN REGNO REG_NOTES REG_NOTE_KIND RTX_CODE XEXP find_inc_amount find_reloads_address_1 gen_rtx make_memloc push_reload push_replacement reg_equiv_address reg_equiv_constant reg_equiv_mem reg_renumber reload_inc rtx this_insn }
find_reloads_toplev		reload.c	/^find_reloads_toplev (x)/ ;" function 85 { find_reloads find_reloads_toplev }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE GET_RTX_FORMAT GET_RTX_LENGTH INTVAL REGNO RTX_CODE SUBREG_REG SUBREG_WORD XEXP find_reloads_address find_reloads_toplev gen_rtx plus_constant reg_equiv_address reg_equiv_constant reg_equiv_mem reg_renumber rtx }
find_use_as_address		flow.c	/^find_use_as_address (x, reg, plusconst)/ ;" function 57 { find_use_as_address mark_used_regs try_pre_increment }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INTVAL XEXP XVECEXP XVECLEN find_use_as_address rtx rtx_code }
finish_class		objc-actions.c	/^tree / ;" function 49 { compile_file }	{ IDENTIFIER_POINTER NULLT TREE_CODE build build_tree_list check_methods define_decl get_identifier implementation_context implementation_template objc_object_reference ridpointers tree tree_cons utlbuf }
finish_decl		c-decl.c	/^finish_decl (decl, init, asmspec_tree)/ ;" function 143 { build_message_selector_pool build_module_descriptor build_selector_translation_table define_decl generate_category generate_dispatch_table generate_ivars_list generate_objc_symtab_decl generate_shared_structures grokfield push_parm_decl }	{ DECL_INITIAL DECL_SIZE NULL_TREE TREE_ADDRESSABLE TREE_CODE TREE_EXTERNAL TREE_LITERAL TREE_PUBLIC TREE_STATIC TREE_STRING_POINTER TREE_TYPE TREE_USED TYPE_DOMAIN TYPE_MAX_VALUE allocation_temporary_p complete_array_type current_binding_level decl end_temporary_allocation error_mark_node error_with_decl expand_decl expand_decl_init flag_traditional global_binding_level init integer_zero_node layout_decl pedantic permanent_allocation rest_of_decl_compilation resume_temporary_allocation store_init_value tree tree_int_cst_lt type }
finish_enum		c-decl.c	/^finish_enum (enumtype, values)/ ;" function 57 { }	{ TREE_CHAIN TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_UNSIGNED TREE_VALUE TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_PRECISION TYPE_SIZE TYPE_VALUES fixup_unsigned_type flag_short_enums in_parm_level_p tree warning }
finish_function		c-decl.c	/^finish_function (lineno)/ ;" function 58 { finish_method_def }	{ DECL_ARGUMENTS DECL_CONTEXT DECL_INITIAL DECL_RESULT DECL_SAVED_INSNS NULL TREE_THIS_VOLATILE TREE_TYPE current_function_calls_setjmp current_function_decl current_function_returns_null current_function_returns_value error_mark_node expand_function_end extra_warnings flag_traditional input_filename lineno permanent_allocation poplevel rest_of_compilation setjmp_protect tree void_type_node warn_return_type warning }
finish_method_def		objc-actions.c	/^void / ;" function 8 { }	{ NULLT finish_function method_context }
finish_objc		objc-actions.c	/^void finish_objc()/ ;" function 144 { compile_file }	{ IDENTIFIER_POINTER SIZEHASHTABLE TREE_CHAIN TREE_CODE TREE_VALUE _OBJC_CLASS_decl _OBJC_METACLASS_decl add_class app_disable assemble_asm attr build_message_selector_pool build_module_descriptor build_selector_translation_table cls_method_hash_list cls_ref_chain dump_interface gen_declaration gen_declaration_file generate_category generate_dispatch_tables generate_forward_declaration_to_string_table generate_ivar_lists generate_objc_symtab_decl generate_shared_structures hash imp_entry imp_list implementation_context implementation_template my_build_string nst_method_hash_list sel_ref_chain sel_refdef_chain string tree type utlbuf warn_selector warn_with_method }
finish_struct		c-decl.c	/^finish_struct (t, fieldlist)/ ;" function 210 { build_category_template build_class_template build_ivar_list_template build_ivar_template build_method_list_template build_method_template build_module_descriptor build_objc_selector_template build_objc_symtab_template build_private_template build_super_template continue_class }	{ C_TYPE_FIELDS_READONLY DECL_ALIGN DECL_CONTEXT DECL_INITIAL DECL_NAME DECL_SIZE DECL_SIZE_UNIT MAX NULL NULL_TREE TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_PACKED TREE_READONLY TREE_TYPE TYPE_ALIGN TYPE_FIELDS TYPE_MAIN_VARIANT TYPE_NEXT_VARIANT TYPE_PRECISION TYPE_SIZE current_binding_level decl error_with_decl expand_decl flag_traditional global_binding_level in_parm_level_p integer_type_node layout_decl layout_type pedantic rest_of_decl_compilation resume_momentary suspend_momentary tree unsigned_type_node warning warning_with_decl }
finput		objc-parse.y	/^FILE *finput;			\/* input file./ ;" global 1 { check_newline compile_file do_pragma readescape skip_white_space yylex }	{ }
first_insn		emit-rtl.c	/^static rtx first_insn = NULL;/ ;" global 1 { add_insn delete_insns_since emit_insn_before emit_jump_insn_before end_sequence expand_end_bindings expand_goto_internal expand_start_bindings fixup_gotos gen_sequence get_insns ignore_some_movables init_emit push_to_sequence reorder_insns save_for_inline set_new_first_and_last_insn start_sequence }	{ }
first_label_num		emit-rtl.c	/^static int first_label_num;/ ;" global 1 { get_first_label_num init_emit }	{ }
first_parm_offset		integrate.c	/^static int first_parm_offset;/ ;" global 1 { access_parm_map assign_parms copy_rtx_and_substitute expand_inline_function }	{ }
fix_register		regclass.c	/^fix_register (name, fixed, call_used)/ ;" function 23 { Mtoplev }	{ call_used_regs fixed_regs reg_names warning }
fixed_aggregate_altered		loop.c	/^static int fixed_aggregate_altered;/ ;" global 1 { invariant_p note_addr_stored verify_loop }	{ }
fixed_reg_set		regclass.c	/^HARD_REG_SET fixed_reg_set;/ ;" global 1 { find_free_reg find_reg init_reg_sets_1 stupid_find_reg }	{ }
fixed_regs		regclass.c	/^char fixed_regs[FIRST_PSEUDO_REGISTER];/ ;" global 1 { assign_parms combine_regs find_dummy_reload fix_register init_reg_sets init_reg_sets_1 make_decl_rtl mark_reg_clobber mark_reg_death mark_reg_store order_regs_for_reload }	{ }
fixtab		optabs.c	/^static enum insn_code fixtab[2][2][2];/ ;" global 1 { can_fix_p init_fixtab }	{ }
fixtrunctab		optabs.c	/^static enum insn_code fixtrunctab[2][2][2];/ ;" global 1 { can_fix_p init_fixtab }	{ }
fixup_cleanups		stmt.c	/^fixup_cleanups (list, before_jump)/ ;" function 13 { fixup_gotos }	{ NEXT_INSN expand_cleanups get_last_insn reorder_insns rtx }
fixup_gotos		stmt.c	/^fixup_gotos (thisblock, stack_level, cleanup_list,/ ;" function 82 { expand_end_bindings expand_function_end }	{ INSN_UID PREV_INSN TREE_ADDRESSABLE TREE_CHAIN TREE_VALUE block emit_insn_after error_with_decl first_insn fixup_cleanups gen_move_insn goto_fixup goto_fixup_chain stack_pointer_rtx tree }
fixup_memory_subreg		stmt.c	/^fixup_memory_subreg (x, insn)/ ;" function 22 { fixup_var_refs_1 walk_fixup_memory_subreg }	{ GET_MODE GET_MODE_SIZE MIN SUBREG_REG SUBREG_WORD XEXP change_address emit_insn_before end_sequence gen_sequence machine_mode memory_address_p plus_constant rtx start_sequence }
fixup_stack_1		stmt.c	/^fixup_stack_1 (x, insn)/ ;" function 41 { fixup_stack_1 fixup_stack_slots fixup_var_refs_1 }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH RTX_CODE XEXP XVECEXP XVECLEN change_address emit_insn_before fixup_stack_1 frame_pointer_rtx gen_move_insn gen_reg_rtx memory_address_p rtx }
fixup_stack_slots		stmt.c	/^fixup_stack_slots ()/ ;" function 15 { }	{ GET_CODE NEXT_INSN PATTERN fixup_stack_1 get_insns invalid_stack_slot rtx }
fixup_unsigned_type		stor-layout.c	/^fixup_unsigned_type (type)/ ;" function 19 { finish_enum make_unsigned_type start_enum }	{ HOST_BITS_PER_INT TREE_TYPE TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_PRECISION build_int_2 layout_type type }
fixup_var_refs		stmt.c	/^fixup_var_refs (var)/ ;" function 36 { put_var_into_stack }	{ RTL_EXPR_SEQUENCE TREE_CHAIN TREE_VALUE XEXP const0_rtx end_sequence fixup_var_refs_insns get_insns get_last_insn push_to_sequence rtl_expr_chain rtx sequence_stack tree }
fixup_var_refs_1		stmt.c	/^fixup_var_refs_1 (var, x, insn)/ ;" function 211 { fixup_var_refs_1 fixup_var_refs_insns }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_RTX_FORMAT GET_RTX_LENGTH INTVAL PUT_MODE RTX_CODE SET_DEST SET_SRC SUBREG_REG XEXP XVECEXP XVECLEN adj_offsettable_operand copy_rtx emit_insn_after emit_insn_before fixup_memory_subreg fixup_stack_1 fixup_var_refs_1 gen_move_insn gen_reg_rtx gen_rtx offsettable_memref_p optimize_bit_field rtx }
fixup_var_refs_insns		stmt.c	/^fixup_var_refs_insns (var, insn, toplevel)/ ;" function 35 { fixup_var_refs }	{ GET_CODE NEXT_INSN PATTERN PREV_INSN REG_NOTES SET_DEST SET_SRC XEXP delete_insn fixup_var_refs_1 last_parm_insn rtx rtx_equal_p walk_fixup_memory_subreg }
flag_caller_saves		toplev.c	/^int flag_caller_saves = 1;/ ;" global 1 { find_free_reg find_reg }	{ }
flag_combine_regs		toplev.c	/^int flag_combine_regs = 0;/ ;" global 1 { try_combine }	{ }
flag_cond_mismatch		c-decl.c	/^int flag_cond_mismatch;/ ;" global 1 { build_conditional_expr lang_decode_option }	{ }
flag_defer_pop		toplev.c	/^int flag_defer_pop = 1;/ ;" global 1 { emit_call_1 }	{ }
flag_delayed_branch		toplev.c	/^int flag_delayed_branch;/ ;" global 1 { dbr_sequence_length rest_of_compilation }	{ }
flag_float_store		toplev.c	/^int flag_float_store = 0;/ ;" global 1 { assign_parms convert_to_real cse_insn expand_decl find_equiv_reg }	{ }
flag_force_addr		toplev.c	/^int flag_force_addr = 0;/ ;" global 1 { expand_expr memory_address memory_address_noforce }	{ }
flag_force_mem		toplev.c	/^int flag_force_mem = 0;/ ;" global 1 { compare compare1 emit_cmp_insn emit_unop_insn expand_binop expand_expr expand_fix expand_float expand_shift expand_twoval_binop expand_unop extract_bit_field store_bit_field }	{ }
flag_inline_functions		toplev.c	/^int flag_inline_functions;/ ;" global 1 { clear_pending_stack_adjust rest_of_compilation }	{ }
flag_keep_inline_functions		toplev.c	/^int flag_keep_inline_functions;/ ;" global 1 { rest_of_compilation }	{ }
flag_no_asm		c-decl.c	/^int flag_no_asm;/ ;" global 1 { lang_decode_option yylex }	{ }
flag_no_common		toplev.c	/^int flag_no_common = 0;/ ;" global 1 { assemble_variable }	{ }
flag_no_function_cse		toplev.c	/^int flag_no_function_cse = 0;/ ;" global 1 { copy_rtx_and_substitute expand_binop expand_call expand_unop prepare_call_address }	{ }
flag_no_peephole		toplev.c	/^int flag_no_peephole = 0;/ ;" global 1 { final_scan_insn jump_optimize }	{ }
flag_omit_frame_pointer		toplev.c	/^int flag_omit_frame_pointer = 0;/ ;" global 1 { clear_pending_stack_adjust init_function_start }	{ }
flag_pcc_struct_return		toplev.c	/^int flag_pcc_struct_return = 0;/ ;" global 1 { aggregate_value_p expand_call expand_function_start function_cannot_inline_p init_function_start }	{ }
flag_shared_data		toplev.c	/^int flag_shared_data;/ ;" global 1 { assemble_static_space assemble_variable data_section }	{ }
flag_short_enums		toplev.c	/^int flag_short_enums;/ ;" global 1 { Mtoplev finish_enum lang_decode_option }	{ }
flag_signed_char		toplev.c	/^int flag_signed_char;/ ;" global 1 { Mtoplev init_decl_processing lang_decode_option }	{ }
flag_strength_reduce		toplev.c	/^int flag_strength_reduce = 0;/ ;" global 1 { scan_loop }	{ }
flag_syntax_only		toplev.c	/^int flag_syntax_only = 0;/ ;" global 1 { expand_expr_stmt rest_of_compilation }	{ }
flag_traditional		c-decl.c	/^int flag_traditional;/ ;" global 1 { actualparameterlist build_binary_op_nodefault default_conversion digest_init duplicate_decls finish_decl finish_function finish_struct grokdeclarator implicitly_declare init_decl_processing lang_decode_option pushdecl redeclaration_error_message yylex }	{ }
flag_volatile		toplev.c	/^int flag_volatile;/ ;" global 1 { expand_expr }	{ }
flag_writable_strings		toplev.c	/^int flag_writable_strings = 0;/ ;" global 1 { compare_constant_1 do_pragma get_or_assign_label lang_decode_option record_constant_1 }	{ }
float_handled		toplev.c	/^int float_handled;/ ;" global 1 { float_signal set_float_handler }	{ }
float_handler		toplev.c	/^jmp_buf float_handler;/ ;" global 1 { float_signal set_float_handler }	{ }
float_signal		toplev.c	/^float_signal ()/ ;" function 8 { Mtoplev }	{ float_handled float_handler warning }
float_type_node		c-decl.c	/^tree float_type_node;/ ;" global 1 { compparms1 default_conversion duplicate_decls gen_declspecs get_floating_type grokdeclarator init_decl_processing yylex }	{ }
floattab		optabs.c	/^static enum insn_code floattab[2][2];/ ;" global 1 { can_float_p init_floattab }	{ }
flodiv_optab		optabs.c	/^optab flodiv_optab;/ ;" global 1 { expand_expr init_optabs }	{ }
floor_log2		toplev.c	/^floor_log2 (x)/ ;" function 9 { allocno_compare assemble_function expand_mult final_start_function }	{ HOST_BITS_PER_INT }
flow_analysis		flow.c	/^flow_analysis (f, nregs, file)/ ;" function 51 { rest_of_compilation }	{ GET_CODE INSN_UID NEXT_INSN RTX_CODE alloca basic_block_drops_in basic_block_end basic_block_head basic_block_loop_depth dump_flow_info find_basic_blocks life_analysis max_uid n_basic_blocks oballoc rtx uid_block_number uid_volatile }
flow_dump		toplev.c	/^int flow_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
flow_dump_file		toplev.c	/^FILE *flow_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
flow_time		toplev.c	/^int flow_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
fndef		objc-parse.y	/^fndef:/ ;" yacctoken 1 { }	{ }
fold		fold-const.c	/^fold (expr) / ;" function 608 { array_type_nelts build_array_ref build_binary_op_nodefault build_unary_op convert convert_to_integer expand_expr expand_mult_add fold genop make_tree pointer_diff pointer_int_sum save_expr }	{ DECL_INITIAL HOST_BITS_PER_INT INT_CST_LT INT_CST_LT_UNSIGNED NULL_TREE REAL_VALUES_EQUAL REAL_VALUES_LESS REAL_VALUE_ATOF REAL_VALUE_NEGATE TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_LITERAL TREE_OPERAND TREE_REAL_CST TREE_SET_CODE TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE TREE_UNSIGNED TREE_VOLATILE TYPE_PRECISION build build_int_2 build_real combine convert expr fold fold_convert force_fit_type integer_all_onesp integer_one_node integer_onep integer_type_node integer_zero_node integer_zerop operand_equal_p real_zerop split_tree tree tree_code tree_code_length tree_code_type tree_int_cst_lt type }
fold_cc0		cse.c	/^fold_cc0 (mode, x)/ ;" function 119 { cse_insn fold_rtx predecide_loop_entry }	{ CONST_DOUBLE_LOW FIXED_BASE_PLUS_P GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_CLASS HOST_BITS_PER_INT INTVAL REAL_VALUES_LESS XEXP equiv_constant fold_rtx machine_mode qty_const real_extract rtx }
fold_convert		fold-const.c	/^fold_convert (t)/ ;" function 72 { fold }	{ HOST_BITS_PER_INT REAL_VALUES_LESS REAL_VALUE_TYPE TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_LITERAL TREE_OPERAND TREE_REAL_CST TREE_TYPE TYPE_MAX_VALUE TYPE_MIN_VALUE build_int_2 build_real build_real_from_int_cst force_fit_type neg_double real_value_from_int_cst tree type warning }
fold_out_const_cc0		integrate.c	/^fold_out_const_cc0 (cond_rtx, then_rtx, else_rtx, / ;" function 134 { try_fold_cc0 }	{ GET_CODE INTVAL copy_rtx_and_substitute rtx_equal_p }
fold_rtx		cse.c	/^fold_rtx (x, copyflag)/ ;" function 693 { cse_insn fold_cc0 fold_rtx predecide_loop_entry }	{ CONSTANT_P CONST_DOUBLE_LOW GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_CLASS GET_MODE_MASK GET_MODE_SIZE GET_RTX_FORMAT GET_RTX_LENGTH HOST_BITS_PER_INT INTVAL PUT_MODE REAL_VALUE_NEGATE REAL_VALUE_TYPE XEXP XINT cc0_rtx const0_rtx const1_rtx copy_rtx dconst0_rtx equiv_constant fconst0_rtx fold_cc0 fold_rtx gen_rtx immed_real_const_1 machine_mode memory_address_p plus_constant prev_insn_cc0 prev_insn_explicit_cc0 real_extract rtx rtx_alloc rtx_code rtx_cost }
follow_jumps		jump.c	/^follow_jumps (label, ignore_loops)/ ;" function 36 { jump_optimize tension_vector_labels }	{ GET_CODE JUMP_LABEL NEXT_INSN NOTE_INSN_LOOP_BEG NOTE_LINE_NUMBER next_real_insn rtx }
forbidden_regs		reload1.c	/^static short forbidden_regs[FIRST_PSEUDO_REGISTER]/ ;" global 1 { new_spill_reg reload retry_global_alloc spill_hard_reg }	{ }
force_const_double_mem		varasm.c	/^force_const_double_mem (r)/ ;" function 21 { emit_move_insn emit_push_insn find_reloads move_block_to_reg }	{ CONST_DOUBLE_CHAIN CONST_DOUBLE_MEM GET_MODE XEXP cc0_rtx const0_rtx force_const_mem gen_rtx memory_address_p real_constant_chain }
force_const_mem		varasm.c	/^force_const_mem (mode, x)/ ;" function 144 { emit_move_insn find_reloads force_const_double_mem }	{ ASM_OUTPUT_DOUBLE ASM_OUTPUT_FLOAT CONSTANT_POOL_ADDRESS_P CONST_DOUBLE_CHAIN CONST_DOUBLE_LOW CONST_DOUBLE_MEM GET_CODE GET_MODE_SIZE RTX_UNCHANGING_P XEXP asm_out_file cc0_rtx compare_constant_rtx const_hash_rtx const_labelno const_rtx_hash_table constant_descriptor exact_log2 gen_rtx hash permanent_obstack real_constant_chain real_extract record_constant_rtx rtx text_section }
force_fit_type		fold-const.c	/^force_fit_type (t)/ ;" function 49 { combine fold fold_convert }	{ HOST_BITS_PER_INT TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_TYPE TREE_UNSIGNED TYPE_PRECISION }
force_movables		loop.c	/^force_movables (movables)/ ;" function 32 { scan_loop }	{ INSN_UID PATTERN SET_DEST movable regno_last_uid savings }
force_next_line_note		emit-rtl.c	/^force_next_line_note ()/ ;" function 4 { expand_function_start }	{ last_linenum }
force_not_mem		explow.c	/^force_not_mem (x)/ ;" function 10 { compare compare1 emit_cmp_insn emit_unop_insn expand_binop expand_fix expand_float expand_shift expand_twoval_binop expand_unop store_bit_field }	{ GET_CODE GET_MODE emit_move_insn gen_reg_rtx rtx }
force_operand		expr.c	/^force_operand (value, target)/ ;" function 45 { copy_to_mode_reg copy_to_reg emit_library_call expand_call expand_decl expand_expr expand_mult force_operand memory_address push_block }	{ CONSTANT_P GET_CODE GET_MODE INTVAL XEXP add_optab expand_binop expand_mult force_operand gen_rtx optab rtx sub_optab }
force_reg		explow.c	/^force_reg (mode, x)/ ;" function 16 { access_parm_map break_out_memory_refs copy_rtx_and_substitute emit_cmp_insn emit_unop_insn expand_binop expand_builtin expand_call expand_expr expand_increment expand_shift expand_unop extract_bit_field extract_fixed_bit_field memory_address prepare_call_address store_bit_field }	{ CONSTANT_P GET_CODE REG_NOTES emit_move_insn gen_reg_rtx gen_rtx rtx }
forget_old_reloads_1		reload1.c	/^forget_old_reloads_1 (x)/ ;" function 38 { emit_reload_insns reload_as_needed }	{ GET_CODE GET_MODE REGNO reg_has_output_reload reg_is_output_reload reg_last_reload_reg reg_reloaded_contents spill_reg_order }
forget_volatility		reload.c	/^forget_volatility (x)/ ;" function 40 { forget_volatility }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN forget_volatility rtx rtx_code }
forward_declare_categories		objc-actions.c	/^static void forward_declare_categories()/ ;" function 21 { generate_objc_symtab_decl }	{ NULLT TREE_CODE build_tree_list decl define_decl imp_entry imp_list implementation_context objc_category_template ridpointers synth_id_with_class_suffix tree tree_cons }
fp_addr_p		integrate.c	/^static char *fp_addr_p;/ ;" global 1 { }	{ }
fp_delta		integrate.c	/^static int fp_delta;/ ;" global 1 { copy_address copy_rtx_and_substitute expand_inline_function }	{ }
frame_offset		stmt.c	/^static int frame_offset;/ ;" global 1 { assign_stack_local expand_return get_frame_size init_function_start }	{ }
frame_pointer_address_altered		reload1.c	/^static int frame_pointer_address_altered;/ ;" global 1 { alter_frame_pointer_addresses eliminate_frame_pointer }	{ }
frame_pointer_needed		final.c	/^int frame_pointer_needed;/ ;" global 1 { assign_parms assign_stack_local block_alloc expand_builtin expand_call expand_decl find_reg init_function_start life_analysis reload spill_hard_reg }	{ }
frame_pointer_rtx		emit-rtl.c	/^rtx frame_pointer_rtx;		\/* (REG:Pmode FRAME_POINTE/ ;" global 1 { FIXED_BASE_PLUS_P alter_frame_pointer_addresses assign_stack_local check_frame_pointer_required copy_address copy_rtx_and_substitute copy_rtx_if_shared expand_inline_function find_reloads_address fixup_stack_1 grow_save_block immune_p init_emit_once invariant_p memory_address subst_reg_equivs use_variable use_variable_after }	{ }
free_binding_level		c-decl.c	/^static struct binding_level *free_binding_level;/ ;" global 1 { init_decl_processing poplevel pushlevel }	{ }
free_element		cse.c	/^free_element (elt)/ ;" function 6 { new_basic_block remove }	{ free_element_chain }
free_element_chain		cse.c	/^static struct table_elt *free_element_chain;/ ;" global 1 { cse_main free_element get_element }	{ }
ftrunc_optab		optabs.c	/^optab ftrunc_optab;/ ;" global 1 { can_fix_p ftruncify init_optabs }	{ }
ftruncify		optabs.c	/^ftruncify (x)/ ;" function 6 { expand_fix }	{ GET_MODE expand_unop ftrunc_optab gen_reg_rtx rtx }
function_cannot_inline_p		integrate.c	/^function_cannot_inline_p (fndecl)/ ;" function 65 { rest_of_compilation }	{ DECL_ARGUMENTS DECL_RTL GET_CODE INTEGRATE_THRESHOLD NEXT_INSN NULL_TREE RETURN_IN_MEMORY TREE_ADDRESSABLE TREE_CHAIN TREE_CODE TREE_INLINE TREE_TYPE TREE_VALUE TYPE_ARG_TYPES TYPE_MODE flag_pcc_struct_return get_first_nonparm_insn get_max_uid parms rtx tree tree_last void_type_node }
function_defined		varasm.c	/^static int function_defined;/ ;" global 1 { make_decl_rtl make_function_rtl }	{ }
funny_match		recog.c	/^struct funny_match/ ;" struct 5 { constrain_operands }	{ }
g_types		loop.c	/^enum g_types { DEST_ADDR, DEST_REG };/ ;" struct 1 { }	{ }
gdbfile		gdbfiles.h	/^struct gdbfile/ ;" struct 8 { set_current_gdbfile symout_sources }	{ }
gdbfiles		final.c	/^struct gdbfile *gdbfiles;/ ;" global 1 { init_final set_current_gdbfile symout_sources }	{ }
genDeclaration		objc-actions.c	/^static / ;" function 66 { adornDecl build_message_expr dump_interface error_with_ivar genMethodDecl genPrototype objc_debug }	{ DECL_NAME IDENTIFIER_POINTER NULLT TREE_CODE TREE_PURPOSE TREE_TYPE TREE_VALUE declarator genDeclarator gen_declspecs isComplexDecl tree }
genDeclarator		objc-actions.c	/^char *genDeclarator(tree decl_expr, char *buf, cha/ ;" function 73 { genDeclaration genDeclarator }	{ IDENTIFIER_POINTER NULLT TREE_CODE TREE_OPERAND TREE_TYPE adornDecl genDeclarator isComplexDecl tmpbuf tree tree_code }
genMethodDecl		objc-actions.c	/^char *genMethodDecl(tree method, char *buf) / ;" function 53 { dump_interface error_with_method objc_debug warn_with_method }	{ IDENTIFIER_POINTER RAW_TYPESPEC TREE_CHAIN TREE_PURPOSE TREE_TYPE genDeclaration objc_object_reference tree }
genPrototype		objc-actions.c	/^void genPrototype(FILE *fp, tree decl)/ ;" function 7 { }	{ BUFSIZE decl errbuf genDeclaration }
gen_add2_insn		optabs.c	/^gen_add2_insn (x, y)/ ;" function 6 { adjust_stack anti_adjust_stack expand_builtin expand_decl gen_input_reload inc_for_reload move_by_pieces_1 }	{ GEN_FCN add_optab }
gen_declaration		toplev.c	/^int gen_declaration = 0;/ ;" global 1 { Mtoplev compile_file finish_objc }	{ }
gen_declaration_file		toplev.c	/^FILE *gen_declaration_file;/ ;" global 1 { compile_file finish_objc }	{ }
gen_declspecs		objc-actions.c	/^static / ;" function 117 { genDeclaration }	{ IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_STATIC_TEMPLATE TREE_VALUE TYPE_NAME char_type_node double_type_node float_type_node integer_type_node long_double_type_node long_integer_type_node long_unsigned_type_node short_integer_type_node short_unsigned_type_node signed_char_type_node tree unsigned_char_type_node unsigned_type_node }
gen_extend_insn		optabs.c	/^gen_extend_insn (x, y, mto, mfrom, unsignedp)/ ;" function 9 { }	{ GEN_FCN sign_extend_optab zero_extend_optab }
gen_fake_label		sdbout.c	/^gen_fake_label ()/ ;" function 10 { sdbout_parms sdbout_record_type_name }	{ SDB_GENERATE_FAKE permalloc unnamed_struct_number }
gen_highpart		emit-rtl.c	/^gen_highpart (mode, x)/ ;" function 35 { convert_move prepare_call_address }	{ GET_CODE GET_MODE GET_MODE_SIZE XEXP change_address gen_rtx max min plus_constant }
gen_inline_header_rtx		emit-rtl.c	/^gen_inline_header_rtx (insn, last_insn,/ ;" function 15 { save_for_inline }	{ NULL args_size cur_insn_uid gen_rtx last_insn rtx }
gen_input_reload		reload1.c	/^gen_input_reload (reloadreg, in, before_insn)/ ;" function 18 { emit_reload_insns }	{ GET_CODE PREV_INSN XEXP emit_insn_before gen_add2_insn gen_move_insn }
gen_iv_mult		loop.c	/^gen_iv_mult (mode, op0, op1, target)/ ;" function 25 { product_cheap_p }	{ emit_move_insn end_sequence expand_mult gen_sequence rtx start_sequence }
gen_label_rtx		emit-rtl.c	/^gen_label_rtx ()/ ;" function 6 { convert_move do_cross_jump do_jump expand_divmod expand_end_case expand_end_loop expand_expr expand_float expand_function_start expand_inline_function expand_null_return_1 expand_return expand_start_bindings expand_start_case expand_start_cond expand_start_else expand_start_loop expand_start_loop_continue_elsewhere label_rtx loop_skip_over predecide_loop_entry save_for_inline }	{ LABEL_NUSES gen_rtx label_num rtx }
gen_lowpart		emit-rtl.c	/^gen_lowpart (mode, x)/ ;" function 54 { convert_move convert_to_mode expand_binop expand_unop extract_bit_field gen_lowpart_for_combine optimize_bit_field prepare_call_address store_bit_field store_fixed_bit_field }	{ CONST_DOUBLE_LOW GET_CODE GET_MODE GET_MODE_MASK GET_MODE_SIZE GET_MODE_UNIT_SIZE INTVAL SUBREG_REG SUBREG_WORD XEXP change_address gen_rtx max min plus_constant }
gen_lowpart_for_combine		combine.c	/^gen_lowpart_for_combine (mode, x)/ ;" function 38 { simplify_and_const_int subst }	{ GET_CODE GET_MODE GET_MODE_SIZE MEM_VOLATILE_P XEXP const0_rtx gen_lowpart gen_rtx max min plus_constant }
gen_move_insn		optabs.c	/^gen_move_insn (x, y)/ ;" function 8 { emit_mult_restore emit_mult_save emit_reload_insns fixup_gotos fixup_stack_1 fixup_var_refs_1 gen_input_reload inc_for_reload protect_from_queue regclass }	{ GEN_FCN GET_MODE machine_mode mov_optab }
gen_push_operand		expr.c	/^gen_push_operand ()/ ;" function 11 { emit_push_insn }	{ gen_rtx stack_pointer_rtx }
gen_reg_rtx		emit-rtl.c	/^gen_reg_rtx (mode)/ ;" function 29 { assign_parms convert_move convert_to_mode copy_rtx_and_substitute copy_to_mode_reg copy_to_reg copy_to_suggested_reg do_store_flag do_tablejump eliminate_biv emit_library_call emit_unop_insn expand_asm_operands expand_binop expand_decl expand_divmod expand_expr expand_fix expand_float expand_function_end expand_function_start expand_inline_function expand_shift expand_twoval_binop expand_twoval_binop_convert expand_unop extract_bit_field fixup_stack_1 fixup_var_refs_1 force_not_mem force_reg ftruncify make_safe_from optimize_bit_field protect_from_queue store_constructor strength_reduce }	{ gen_rtx oballoc reg_rtx_no regno_pointer_flag regno_pointer_flag_length regno_reg_rtx rtx }
gen_rtvec		emit-rtl.c	/^gen_rtvec (va_alist)/ ;" function 20 { }	{ NULL_RTVEC alloca gen_rtvec_v rtx }
gen_rtvec_v		emit-rtl.c	/^gen_rtvec_v (n, argp)/ ;" function 17 { copy_for_inline copy_rtx_if_shared expand_end_case gen_rtvec }	{ NULL_RTVEC rtvec rtvec_alloc rtx }
gen_rtx		emit-rtl.c	/^gen_rtx (va_alist)/ ;" function 62 { ARGS_SIZE_RTX access_parm_map add_incs adj_offsettable_operand alter_frame_pointer_addresses assign_parms assign_stack_local basic_induction_var break_out_memory_refs change_address check_dbra_loop choose_reload_regs clear_storage compare compare1 constant_high_bytes convert_move copy_all_regs copy_for_inline copy_rtx_and_substitute cse_insn decompose do_pending_stack_adjust do_store_flag do_tablejump eliminate_biv eliminate_constant_term emit_block_move emit_call_1 emit_library_call emit_move_insn emit_mult_restore emit_mult_save emit_push_insn emit_reload_insns end_final enqueue_insn equiv_constant expand_anon_union_decl expand_asm expand_asm_operands expand_binop expand_builtin expand_call expand_decl expand_divmod expand_end_case expand_expr expand_function_end expand_function_start expand_increment expand_inline_function expand_mult expand_return expand_shift extract_bit_field extract_fixed_bit_field extract_split_bit_field final_scan_insn find_reloads (etc) }	{ GET_RTX_FORMAT GET_RTX_LENGTH INTVAL XEXP XINT XSTR XVEC const0_rtx const1_rtx machine_mode rtvec rtx rtx_alloc rtx_code }
gen_sequence		emit-rtl.c	/^gen_sequence ()/ ;" function 32 { emit_iv_init_code fixup_memory_subreg gen_iv_mult }	{ GET_CODE NEXT_INSN NULL PATTERN first_insn gen_rtx rtvec rtvec_alloc rtx }
gen_sub2_insn		optabs.c	/^gen_sub2_insn (x, y)/ ;" function 6 { adjust_stack anti_adjust_stack inc_for_reload move_by_pieces_1 }	{ GEN_FCN sub_optab }
general_induction_var		loop.c	/^general_induction_var (x, src_regno, add_val, mult/ ;" function 566 { consec_sets_giv find_mem_givs general_induction_var strength_reduce }	{ ADD_BENEFIT GET_CODE INTVAL MULT_BENEFIT REGNO SHIFT_BENEFIT TRUE XEXP alloca const0_rtx const1_rtx gen_rtx general_induction_var induct_struct induct_var induction invariant_p rtx rtx_code }
general_operand		recog.c	/^general_operand (op, mode)/ ;" function 50 { block_alloc check_asm_operands copy_to_mode_reg copy_to_reg indirect_operand memory_address memory_operand mode_independent_operand nonimmediate_operand nonmemory_operand register_operand }	{ CONSTANT_P GET_CODE GET_MODE MEM_VOLATILE_P SUBREG_REG XEXP mode_dependent_address_p rtx rtx_code volatile_ok }
generate_category		objc-actions.c	/^static void generate_category(tree cat)/ ;" function 27 { finish_objc }	{ NULLT TREE_USED _OBJC_CLASS_METHODS_decl _OBJC_INSTANCE_METHODS_decl add_objc_string build_category_initializer build_msg_pool_reference decl finish_decl initlist objc_category_template ridpointers start_decl synth_id_with_class_suffix tree tree_cons }
generate_dispatch_table		objc-actions.c	/^static tree generate_dispatch_table(tree type, cha/ ;" function 17 { generate_dispatch_tables }	{ NULLT build_int_2 build_nt build_tree_list decl finish_decl initlist nreverse ridpointers start_decl synth_id_with_class_suffix tree tree_cons type }
generate_dispatch_tables		objc-actions.c	/^static void generate_dispatch_tables()/ ;" function 51 { finish_objc }	{ NULLT TREE_TYPE TREE_USED _OBJC_CLASS_METHODS_decl _OBJC_INSTANCE_METHODS_decl _TAG_METHOD_LIST build_dispatch_table_initializer build_method_list_template build_method_template build_tree_list generate_dispatch_table get_identifier groktypename implementation_context initlist objc_method_template tree xref_tag }
generate_forward_declaration_to_string_table		objc-actions.c	/^static void generate_forward_declaration_to_string/ ;" function 14 { finish_objc }	{ NULLT TREE_USED _OBJC_STRINGS_decl build_nt define_decl get_identifier ridpointers tree tree_cons }
generate_ivar_lists		objc-actions.c	/^static void generate_ivar_lists()/ ;" function 55 { finish_objc }	{ NULLT TREE_TYPE TREE_USED TYPE_FIELDS _OBJC_CLASS_VARIABLES_decl _OBJC_INSTANCE_VARIABLES_decl _TAG_IVAR_LIST build_ivar_list_initializer build_ivar_list_template build_ivar_template build_tree_list generate_ivars_list get_identifier groktypename implementation_template initlist ivar_decls objc_class_template objc_ivar_template tree xref_tag }
generate_ivars_list		objc-actions.c	/^static tree generate_ivars_list(tree type, char *n/ ;" function 16 { generate_ivar_lists }	{ NULLT build_int_2 build_nt build_tree_list decl finish_decl initlist nreverse ridpointers start_decl synth_id_with_class_suffix tree tree_cons type }
generate_objc_symtab_decl		objc-actions.c	/^static void generate_objc_symtab_decl()/ ;" function 24 { finish_objc }	{ NULLT TREE_USED _OBJC_SYMBOLS_decl build_category_template build_objc_symtab_template build_tree_list cat_count finish_decl forward_declare_categories get_identifier init_objc_symtab objc_category_template objc_symtab_template ridpointers start_decl tree tree_cons }
generate_shared_structures		objc-actions.c	/^static void generate_shared_structures()/ ;" function 79 { finish_objc }	{ DECL_NAME NULLT TREE_TYPE TYPE_SIZE _OBJC_CLASS_METHODS_decl _OBJC_CLASS_VARIABLES_decl _OBJC_CLASS_decl _OBJC_INSTANCE_METHODS_decl _OBJC_INSTANCE_VARIABLES_decl _OBJC_METACLASS_decl add_class_reference add_objc_string build build_int_2 build_msg_pool_reference build_shared_structure_initializer build_tree_list build_unary_op decl finish_decl groktypename implementation_template initlist lookup_interface objc_class_template ridpointers start_decl tree tree_cons }
genop		stor-layout.c	/^genop (opc, op1, op2)/ ;" function 33 { ADD_PARM_SIZE SUB_PARM_SIZE convert_units layout_record layout_type layout_union }	{ TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW build combine error_mark_node fold size_one_node sizetype }
getArgTypeList		objc-actions.c	/^tree getArgTypeList(tree meth, int context, int su/ ;" function 42 { build_message_expr comp_method_with_proto comp_proto_with_proto }	{ METHOD_DEF NULLT TREE_CHAIN TREE_TYPE _selector_type build_tree_list chainon groktypename id_type self_decl super_type tree void_type_node }
get_class_ivars		objc-actions.c	/^get_class_ivars(tree interface)/ ;" function 4 { }	{ build_ivar_chain }
get_class_reference		objc-actions.c	/^get_class_reference(tree interface)/ ;" function 12 { }	{ IDENTIFIER_LENGTH IDENTIFIER_POINTER NULLT add_class_reference build_function_call build_tree_list my_build_string objc_getClass_decl tree }
get_element		cse.c	/^get_element ()/ ;" function 11 { insert }	{ free_element_chain n_elements_made oballoc table_elt }
get_first_label_num		emit-rtl.c	/^get_first_label_num ()/ ;" function 4 { save_for_inline }	{ first_label_num }
get_first_nonparm_insn		stmt.c	/^get_first_nonparm_insn ()/ ;" function 6 { function_cannot_inline_p save_for_inline }	{ NEXT_INSN get_insns last_parm_insn }
get_floating_type		c-typeck.c	/^get_floating_type (mode)/ ;" function 11 { }	{ TYPE_MODE double_type_node float_type_node long_double_type_node }
get_frame_size		stmt.c	/^get_frame_size ()/ ;" function 8 { expand_inline_function final_end_function final_start_function save_for_inline }	{ frame_offset }
get_identifier		tree.c	/^get_identifier (text)/ ;" function 50 { add_objc_decls build_category_template build_class_template build_dispatch_table_initializer build_ivar_list_initializer build_ivar_list_template build_ivar_template build_keyword_selector build_message_selector_pool build_method_list_template build_method_template build_module_descriptor build_objc_selector_template build_objc_symtab_template build_selector_translation_table build_super_template builtin_function emit_library_call finish_class generate_dispatch_tables generate_forward_declaration_to_string_table generate_ivar_lists generate_objc_symtab_decl get_super_receiver init_decl_processing init_lex init_module_descriptor reallyStartMethod receiver_is_class_object start_class start_method_def synth_forward_declarations synth_id_with_class_suffix synth_module_prologue yylex }	{ HASHBITS IDENTIFIER_LENGTH IDENTIFIER_POINTER MAX_HASH_TABLE TREE_CHAIN do_identifier_warnings hash_table id_clash_len make_node permanent_obstack tree warn_id_clash warning }
get_insns		emit-rtl.c	/^get_insns ()/ ;" function 4 { expand_builtin expand_end_stmt_expr expand_function_end fixup_stack_slots fixup_var_refs get_first_nonparm_insn rest_of_compilation save_for_inline }	{ first_insn }
get_integer_term		cse.c	/^get_integer_term (x)/ ;" function 17 { use_related_value }	{ GET_CODE INTVAL XEXP }
get_last_insn		emit-rtl.c	/^get_last_insn ()/ ;" function 4 { assign_parms do_store_flag drop_through_at_end_p emit_jump_if_reachable emit_nop emit_unop_insn expand_binop expand_builtin expand_call expand_end_case expand_end_loop expand_fixup expand_function_start expand_increment expand_return expand_shift expand_start_case expand_unop extract_bit_field fixup_cleanups fixup_var_refs optimize_bit_field store_bit_field }	{ last_insn }
get_max_uid		emit-rtl.c	/^get_max_uid ()/ ;" function 4 { eliminate_frame_pointer function_cannot_inline_p reload }	{ cur_insn_uid }
get_narrower		tree.c	/^get_narrower (op, unsignedp_ptr)/ ;" function 72 { build_binary_op_nodefault shorten_compare }	{ DECL_MODE DECL_SIZE DECL_SIZE_UNIT TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_THIS_VOLATILE TREE_TYPE TREE_UNSIGNED TREE_VOLATILE TYPE_PRECISION build tree type type_for_size }
get_obstack_code		tree.c	/^int get_obstack_code (struct obstack *obstack)/ ;" function 11 { Mtoplev }	{ maybepermanent_obstack momentary_obstack permanent_obstack temporary_obstack }
get_or_assign_label		varasm.c	/^get_or_assign_label (exp)/ ;" function 74 { output_constant_def }	{ MAX_HASH_TABLE TREE_CODE TREE_STRING_LENGTH TREE_TYPE TYPE_ALIGN asm_out_file compare_constant const_hash const_hash_table const_labelno constant_descriptor data_section flag_writable_strings hash int_size_in_bytes output_addressed_constants output_constant permanent_obstack record_constant text_section }
get_parm_info		c-decl.c	/^get_parm_info (void_at_end)/ ;" function 51 { continue_method_def synth_module_prologue }	{ DECL_ARG_TYPE NULL_TREE TREE_CHAIN TREE_CODE TREE_TYPE TREE_VALUE TYPE_PRECISION decl error getdecls gettags integer_type_node nreverse parms saveable_tree_cons storedecls tree type void_type_node }
get_pending_sizes		stor-layout.c	/^get_pending_sizes ()/ ;" function 6 { expand_function_start }	{ pending_sizes tree }
get_permanent_types		stor-layout.c	/^get_permanent_types ()/ ;" function 7 { compile_file dbxout_init dbxout_symbol rest_of_compilation sdbout_init sdbout_symbol }	{ permanent_type_chain permanent_type_end tree }
get_related_value		cse.c	/^get_related_value (x)/ ;" function 18 { insert use_related_value }	{ GET_CODE XEXP }
get_static_reference		objc-actions.c	/^tree get_static_reference(tree interface)/ ;" function 4 { }	{ xref_tag }
get_structure_value_addr		stmt.c	/^get_structure_value_addr (sizex)/ ;" function 25 { expand_call expand_expr }	{ GET_CODE INTVAL XEXP assign_stack_local max_structure_value_size structure_value }
get_super_receiver		objc-actions.c	/^tree get_super_receiver()/ ;" function 63 { }	{ IDENTIFIER_LENGTH IDENTIFIER_POINTER NULLT NULL_TREE TREE_CODE TREE_TYPE _OBJC_SUPER_decl __clsSuper_ref _clsSuper_ref add_class_reference build_component_ref build_compound_expr build_function_call build_modify_expr build_tree_list build_unary_op chainon error error_mark_node get_identifier implementation_context implementation_template method_context my_build_string objc_getClass_decl objc_getMetaClass_decl self_decl self_id tree }
get_temporary_types		stor-layout.c	/^get_temporary_types ()/ ;" function 7 { dbxout_function rest_of_compilation rest_of_decl_compilation }	{ temporary_type_chain temporary_type_end tree }
get_unwidened		tree.c	/^get_unwidened (op, for_type)/ ;" function 82 { build_modify_expr build_unary_op c_expand_start_case convert_to_integer }	{ DECL_MODE DECL_SIZE DECL_SIZE_UNIT TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_THIS_VOLATILE TREE_TYPE TREE_UNSIGNED TREE_VOLATILE TYPE_PRECISION build tree type type_for_size }
getdecls		c-decl.c	/^getdecls ()/ ;" function 4 { compile_file expand_inline_function get_parm_info store_parm_decls }	{ current_binding_level }
gettags		c-decl.c	/^gettags ()/ ;" function 4 { assemble_function compile_file dbxout_symbol get_parm_info sdbout_symbol store_parm_decls }	{ current_binding_level }
gettime		toplev.c	/^gettime ()/ ;" function 35 { TIMEVAR compile_file rest_of_compilation }	{ quiet_flag }
global_alloc		global-alloc.c	/^global_alloc (file)/ ;" function 124 { rest_of_compilation }	{ CLEAR_HARD_REG_SET HARD_REG_SET INT_BITS PSEUDO_REGNO_SIZE SET_HARD_REG_BIT alloca allocno_compare allocno_order allocno_reg allocno_row_words allocno_size allocnos_live basic_block_head conflicts dump_conflicts find_reg global_conflicts hard_reg_conflicts hard_reg_preferences max_allocno max_regno n_basic_blocks no_global_alloc_regs reg_allocno reg_live_length reg_n_refs reg_preferred_or_nothing reg_renumber regs_someone_prefers reload }
global_alloc_time		toplev.c	/^int global_alloc_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
global_binding_level		c-decl.c	/^static struct binding_level *global_binding_level;/ ;" global 1 { finish_decl finish_struct global_bindings_p grokdeclarator implicitly_declare init_decl_processing lookup_name lookup_name_current_level pushdecl pushlevel pushtag redeclaration_error_message start_decl }	{ }
global_bindings_p		c-decl.c	/^global_bindings_p ()/ ;" function 4 { variable_size }	{ current_binding_level global_binding_level }
global_conflicts		global-alloc.c	/^global_conflicts ()/ ;" function 124 { global_alloc }	{ COPY_HARD_REG_SET GET_CODE HOST_BITS_PER_INT NEXT_INSN PATTERN PSEUDO_REGNO_MODE REGNO REG_NOTES REG_NOTE_KIND RTX_CODE SET_ALLOCNO_LIVE XEXP alloca allocno_row_words allocnos_live basic_block_end basic_block_head basic_block_live_at_start find_regno_note hard_regs_live mark_reg_clobber mark_reg_death mark_reg_live_nc mark_reg_store max_allocno max_parallel max_regno n_basic_blocks n_regs_set note_stores record_conflicts reg_allocno reg_renumber regs_set regset regset_size rtx }
global_reg_dump		toplev.c	/^int global_reg_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
global_reg_dump_file		toplev.c	/^FILE *global_reg_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
global_regs		regclass.c	/^char global_regs[FIRST_PSEUDO_REGISTER];/ ;" global 1 { canon_hash init_reg_sets init_reg_sets_1 insn_dead_p make_decl_rtl mark_set_1 mark_used_regs }	{ }
goto_fixup		stmt.c	/^struct goto_fixup/ ;" struct 24 { expand_fixup fixup_gotos }	{ }
goto_fixup_chain		stmt.c	/^static struct goto_fixup *goto_fixup_chain;/ ;" global 1 { expand_fixup fixup_gotos init_function_start }	{ }
grokdeclarator		c-decl.c	/^grokdeclarator (declarator, declspecs, decl_contex/ ;" function 642 { grokfield groktypename push_parm_decl start_decl start_function }	{ DECL_ARG_TYPE IDENTIFIER_POINTER INT_CST_LT NULL_TREE RID_FIRST_MODIFIER TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_INLINE TREE_INT_CST_LOW TREE_OPERAND TREE_PUBLIC TREE_READONLY TREE_REGDECL TREE_STATIC TREE_THIS_VOLATILE TREE_TYPE TREE_VALUE TREE_VOLATILE TYPE_ARG_TYPES TYPE_DOMAIN TYPE_MAIN_VARIANT TYPE_MODE TYPE_PRECISION TYPE_SIZE allocation_temporary_p build_array_type build_binary_op build_decl build_function_type build_index_type build_int_2 build_pointer_type build_type_variant char_type_node current_binding_level current_extern_inline decl decl_context declarator double_type_node end_temporary_allocation error error_mark_node flag_traditional float_type_node global_binding_level grokparms integer_one_node integer_type_node integer_zero_node integer_zerop long_double_type_node long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node lookup_name pedantic resume_temporary_allocation (etc) }
grokfield		c-decl.c	/^grokfield (filename, line, declarator, declspecs, / ;" function 12 { add_instance_variable build_category_template build_class_template build_ivar_list_template build_ivar_template build_method_list_template build_method_template build_module_descriptor build_objc_selector_template build_objc_symtab_template build_super_template }	{ DECL_INITIAL NULL declarator finish_decl grokdeclarator tree }
grokparms		c-decl.c	/^grokparms (parms_info, funcdef_flag)/ ;" function 81 { grokdeclarator }	{ DECL_NAME IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_TYPE TREE_VALUE TYPE_MAIN_VARIANT TYPE_SIZE error error_mark_node last_function_parm_tags last_function_parms parm tree type warn_strict_prototypes warning }
groktypename		c-decl.c	/^groktypename (typename)/ ;" function 9 { build_message_expr build_msg_pool_reference build_private_template build_super_template comp_method_with_proto comp_proto_with_proto generate_dispatch_tables generate_ivar_lists generate_shared_structures getArgTypeList synth_module_prologue }	{ TREE_CODE TREE_PURPOSE TREE_VALUE grokdeclarator typename }
group_case_nodes		stmt.c	/^group_case_nodes (head)/ ;" function 27 { expand_end_case }	{ build_int_2 case_node_ptr combine label_rtx next_real_insn rtx tree_int_cst_equal }
grow_save_block		caller-save.c	/^grow_save_block (addr, size)/ ;" function 44 { insert_call_saves }	{ GET_CODE INTVAL XEXP assign_stack_local frame_pointer_rtx rtx save_block_size }
hard_function_value		explow.c	/^hard_function_value (valtype, func)/ ;" function 6 { expand_call expand_function_end }	{ }
hard_libcall_value		explow.c	/^hard_libcall_value (mode)/ ;" function 5 { convert_move emit_cmp_insn emit_library_call expand_binop expand_fix expand_float expand_unop }	{ }
hard_reg_conflicts		global-alloc.c	/^static HARD_REG_SET *hard_reg_conflicts;/ ;" global 1 { check_frame_pointer_required dump_conflicts find_reg global_alloc record_conflicts record_one_conflict }	{ }
hard_reg_n_uses		reload1.c	/^struct hard_reg_n_uses { int regno; int uses; };/ ;" struct 1 { order_regs_for_reload }	{ }
hard_reg_preferences		global-alloc.c	/^static HARD_REG_SET *hard_reg_preferences;/ ;" global 1 { global_alloc retry_global_alloc set_preference }	{ }
hard_reg_set_here_p		reload.c	/^hard_reg_set_here_p (regno, x)/ ;" function 27 { find_dummy_reload hard_reg_set_here_p }	{ GET_CODE GET_MODE REGNO SET_DEST SUBREG_REG XVECEXP XVECLEN hard_reg_set_here_p rtx }
hard_reg_use_compare		reload1.c	/^hard_reg_use_compare (p1, p2)/ ;" function 9 { order_regs_for_reload }	{ }
hard_regs_live		global-alloc.c	/^static HARD_REG_SET hard_regs_live;/ ;" global 1 { clear_reg_live global_conflicts insert_call_saves mark_reg_clobber mark_reg_death mark_reg_live_nc mark_reg_store record_conflicts record_one_conflict save_call_clobbered_regs set_reg_live }	{ }
hard_regs_live_known		reload.c	/^static int hard_regs_live_known;/ ;" global 1 { find_dummy_reload find_reloads }	{ }
hash		objc-actions.c	/^typedef struct hashedEntry 	*hash;/ ;" typedef 1 { add_class_method add_instance_method build_message_expr canon_hash cse_insn finish_objc force_const_mem get_or_assign_label hash_enter hash_init hash_lookup invalidate is_reserved_word objc_debug safe_hash }	{ }
hash_add_attr		objc-actions.c	/^static void hash_add_attr(hash entry, tree value)/ ;" function 20 { add_class_method add_instance_method }	{ ATTR_ALLOC_LIST_SIZE attr hashedAttribute }
hash_arg_in_memory		cse.c	/^static int hash_arg_in_memory;/ ;" global 1 { canon_hash cse_insn safe_hash }	{ }
hash_arg_in_struct		cse.c	/^static int hash_arg_in_struct;/ ;" global 1 { canon_hash cse_insn safe_hash }	{ }
hash_enter		objc-actions.c	/^static void hash_enter(hash *hashList, tree method/ ;" function 22 { add_class_method add_instance_method }	{ HASHFUNCTION HASH_ALLOC_LIST_SIZE SIZEHASHTABLE hash hashedEntry }
hash_init		objc-actions.c	/^static void hash_init()/ ;" function 17 { init_objc }	{ SIZEHASHTABLE cls_method_hash_list hash nst_method_hash_list }
hash_lookup		objc-actions.c	/^static hash hash_lookup(hash *hashList, tree sel_n/ ;" function 15 { add_class_method add_instance_method build_message_expr }	{ hash }
hash_table		tree.c	/^static tree hash_table[MAX_HASH_TABLE];	\/* id hash/ ;" global 1 { get_identifier hash init_tree }	{ }
hashedAttribute		objc-actions.c	/^struct hashedAttribute {/ ;" struct 4 { hash_add_attr }	{ }
hashedEntry		objc-actions.c	/^struct hashedEntry {/ ;" struct 5 { hash_enter }	{ }
have_add2_insn		optabs.c	/^have_add2_insn (mode)/ ;" function 5 { }	{ add_optab }
have_sub2_insn		optabs.c	/^have_sub2_insn (mode)/ ;" function 5 { }	{ add_optab }
id_clash_len		toplev.c	/^int id_clash_len;/ ;" global 1 { Mtoplev get_identifier }	{ }
id_type		objc-actions.c	/^static tree super_type, _selector_type, id_type, c/ ;" global 1 { build_message_expr getArgTypeList synth_module_prologue }	{ }
identifier		objc-parse.y	/^identifier:/ ;" yacctoken 1 { IDENTIFIER_LENGTH IDENTIFIER_POINTER }	{ }
identifiers		objc-parse.y	/^identifiers:/ ;" yacctoken 1 { }	{ }
ignore_some_movables		loop.c	/^ignore_some_movables (movables)/ ;" function 22 { scan_loop }	{ INSN_LUID XEXP find_reg_note first_insn movable rtx }
immed_double_const		varasm.c	/^immed_double_const (i0, i1, mode)/ ;" function 31 { expand_expr immed_real_const_1 }	{ CONST_DOUBLE_CHAIN CONST_DOUBLE_HIGH CONST_DOUBLE_LOW CONST_DOUBLE_MEM GET_MODE const0_rtx gen_rtx real_constant_chain rtx }
immed_real_const		varasm.c	/^immed_real_const (exp)/ ;" function 5 { expand_expr }	{ TREE_REAL_CST TREE_TYPE TYPE_MODE immed_real_const_1 }
immed_real_const_1		varasm.c	/^immed_real_const_1 (d, mode)/ ;" function 50 { expand_fix expand_float fold_rtx immed_real_const }	{ CONST_DOUBLE_CHAIN CONST_DOUBLE_LOW CONST_DOUBLE_MEM GET_MODE PUT_MODE REAL_VALUES_EQUAL REAL_VALUE_NEGATE REAL_VALUE_TYPE const0_rtx dconst0_rtx fconst0_rtx immed_double_const real_constant_chain real_extract rtx rtx_alloc }
immediate_operand		recog.c	/^immediate_operand (op, mode)/ ;" function 9 { reload }	{ CONSTANT_P GET_CODE GET_MODE }
immediate_size_expand		stor-layout.c	/^int immediate_size_expand;/ ;" global 1 { expand_function_end init_function_start variable_size }	{ }
immune_p		reload.c	/^immune_p (x, y, ydata)/ ;" function 40 { find_reloads }	{ CONSTANT_P GET_CODE decompose decomposition frame_pointer_rtx refers_to_regno_p rtx_equal_p stack_pointer_rtx }
imp_count		objc-actions.c	/^static int imp_count = 0;	\/* `@implementation' *\// ;" global 1 { build_objc_symtab_template continue_class init_def_list init_objc_symtab }	{ }
imp_entry		objc-actions.c	/^struct imp_entry {/ ;" struct 7 { continue_class finish_objc forward_declare_categories init_def_list }	{ }
imp_list		objc-actions.c	/^static struct imp_entry *imp_list = 0;/ ;" global 1 { continue_class finish_objc forward_declare_categories init_def_list }	{ }
implementation_context		objc-actions.c	/^static tree implementation_context = NULLT, / ;" global 1 { build_message_expr check_methods finish_class finish_objc forward_declare_categories generate_dispatch_tables get_super_receiver is_public reallyStartMethod start_class synth_id_with_class_suffix }	{ }
implementation_template		objc-actions.c	/^	    implementation_template = NULLT;/ ;" global 1 { build_message_expr continue_class finish_class finish_objc generate_ivar_lists generate_shared_structures get_super_receiver reallyStartMethod start_class }	{ }
implicitly_declare		c-decl.c	/^implicitly_declare (functionid)/ ;" function 45 { }	{ IDENTIFIER_IMPLICIT_DECL IDENTIFIER_POINTER TREE_EXTERNAL TREE_PUBLIC build_decl current_binding_level decl default_function_type end_temporary_allocation flag_traditional global_binding_level pushdecl rest_of_decl_compilation resume_temporary_allocation tree warn_implicit warning }
in_parm_level_p		c-decl.c	/^in_parm_level_p ()/ ;" function 4 { finish_enum finish_struct }	{ current_binding_level }
in_section		varasm.c	/^static enum in_section {no_section, in_text, in_da/ ;" global 2 { data_section text_section }	{ }
inc_for_reload		reload1.c	/^inc_for_reload (reloadreg, value, inc_amount, insn/ ;" function 87 { emit_reload_insns }	{ GET_CODE REGNO XEXP emit_insn_before gen_add2_insn gen_move_insn gen_rtx gen_sub2_insn reg_renumber rtx }
incomplete_type_error		c-typeck.c	/^incomplete_type_error (value, type)/ ;" function 58 { build_component_ref require_complete_type size_in_bytes }	{ DECL_NAME IDENTIFIER_POINTER TREE_CODE TREE_TYPE TYPE_DOMAIN TYPE_NAME error type }
indirect_ok		reload.c	/^static int indirect_ok;/ ;" global 1 { find_reloads find_reloads_address }	{ }
indirect_operand		recog.c	/^indirect_operand (op, mode)/ ;" function 7 { }	{ GET_MODE XEXP general_operand memory_operand }
induct_struct		loop.c	/^static struct induction **induct_struct;/ ;" global 1 { consec_sets_giv general_induction_var record_giv strength_reduce }	{ }
induct_var		loop.c	/^static enum iv_mode *induct_var;/ ;" global 1 { can_eliminate_biv_p consec_sets_giv eliminate_biv general_induction_var record_giv strength_reduce }	{ }
induction		loop.c	/^struct induction;/ ;" global 1 { can_eliminate_biv_p check_eliminate_biv consec_sets_giv eliminate_biv find_mem_givs general_induction_var record_giv strength_reduce }	{ }
inequality_comparisons_p		recog.c	/^inequality_comparisons_p (x)/ ;" function 51 { inequality_comparisons_p next_insn_tests_no_inequality next_insns_test_no_inequality }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN cc0_rtx inequality_comparisons_p rtx_code }
inhibit_defer_pop		expr.c	/^int inhibit_defer_pop;/ ;" global 1 { NO_DEFER_POP OK_DEFER_POP do_pending_stack_adjust emit_call_1 emit_library_call expand_call init_function_start }	{ }
inhibit_warnings		toplev.c	/^int inhibit_warnings = 0;/ ;" global 1 { Mtoplev count_error }	{ }
init		objc-parse.y	/^init:/ ;" yacctoken 1 { cse_insn digest_init expand_expr finish_decl process_init_constructor store_init_value }	{ }
init_comparisons		expr.c	/^init_comparisons ()/ ;" function 9 { init_optabs }	{ comparison_code }
init_const_rtx_hash_table		varasm.c	/^init_const_rtx_hash_table ()/ ;" function 4 { init_function_start }	{ const_rtx_hash_table }
init_decl_processing		c-decl.c	/^init_decl_processing ()/ ;" function 222 { compile_file }	{ CHAR_TYPE_SIZE DOUBLE_TYPE_SIZE FLOAT_TYPE_SIZE INT_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE LONG_LONG_TYPE_SIZE LONG_TYPE_SIZE NULL NULL_BINDING_LEVEL NULL_TREE SHORT_TYPE_SIZE TREE_TYPE TYPE_PRECISION TYPE_SIZE build_array_type build_decl build_function_type build_int_2 build_pointer_type builtin_function char_array_type_node char_type_node current_binding_level current_function_decl default_function_type double_ftype_double double_ftype_double_double double_type_node error_mark_node flag_signed_char flag_traditional float_type_node free_binding_level get_identifier global_binding_level int_array_type_node int_ftype_int int_ftype_ptr_ptr_int integer_one_node integer_type_node integer_zero_node lang_identifier layout_type long_double_type_node long_ftype_long long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node make_node make_signed_type make_unsigned_type named_labels null_pointer_node ptr_type_node pushdecl pushlevel ridpointers set_identifier_size short_integer_type_node (etc) }
init_def_list		objc-actions.c	/^static tree init_def_list()/ ;" function 26 { init_objc_symtab }	{ NULLT TREE_CODE build_nt build_unary_op cat_count expr imp_count imp_entry imp_list initlist nreverse tree tree_cons }
init_emit		emit-rtl.c	/^init_emit (write_symbols)/ ;" function 24 { init_function_start }	{ NULL cur_insn_uid first_insn first_label_num label_num last_filename last_insn last_linenum no_line_numbers oballoc reg_rtx_no regno_pointer_flag regno_pointer_flag_length regno_reg_rtx rtx sequence_stack write_symbols }
init_emit_once		emit-rtl.c	/^init_emit_once ()/ ;" function 67 { compile_file }	{ CONST_DOUBLE_LOW CONST_DOUBLE_MEM INTVAL PUT_MODE REAL_VALUE_ATOF arg_pointer_rtx cc0_rtx const0_rtx const1_rtx dconst0_rtx fconst0_rtx frame_pointer_rtx gen_rtx pc_rtx real_extract rtx_alloc stack_pointer_rtx static_chain_incoming_rtx static_chain_rtx struct_value_incoming_rtx struct_value_rtx }
init_expr		expr.c	/^init_expr ()/ ;" function 5 { init_function_start }	{ init_queue may_call_alloca }
init_extends		optabs.c	/^init_extends ()/ ;" function 11 { }	{ sign_extend_optab zero_extend_optab }
init_final		final.c	/^init_final (filename)/ ;" function 12 { compile_file }	{ app_on final_sequence gdbfiles lastfile max_block_depth next_block_index next_gdb_filenum pending_blocks xmalloc }
init_fixtab		optabs.c	/^init_fixtab ()/ ;" function 92 { init_optabs }	{ fixtab fixtrunctab }
init_floattab		optabs.c	/^init_floattab ()/ ;" function 25 { init_optabs }	{ floattab }
init_function_start		stmt.c	/^init_function_start (subr)/ ;" function 106 { output_inline_function store_parm_decls }	{ DECL_CONTEXT DECL_PRINT_NAME DECL_RESULT DECL_SOURCE_FILE DECL_SOURCE_LINE NOTE_INSN_DELETED NOTE_INSN_FUNCTION_BEG TREE_CODE TREE_TYPE aggregate_value_p block_stack caller_save_needed case_stack cond_stack cse_not_expected current_function_calls_alloca current_function_calls_setjmp current_function_decl current_function_name current_function_needs_context current_function_pops_args current_function_pretend_args_size current_function_returns_pcc_struct current_function_returns_struct emit_line_note emit_note flag_omit_frame_pointer flag_pcc_struct_return frame_offset frame_pointer_needed goto_fixup_chain immediate_size_expand inhibit_defer_pop init_const_rtx_hash_table init_emit init_expr init_pending_stack_adjust invalid_stack_slot loop_stack max_structure_value_size nesting_depth nesting_stack optimize rtl_expr_chain save_expr_regs stack_slot_list structure_value tail_recursion_label this_function write_symbols }
init_lex		objc-parse.y	/^init_lex ()/ ;" function 34 { compile_file }	{ get_identifier lineno max_wide maxtoken ridpointers token_buffer wide_buffer xmalloc }
init_module_descriptor		objc-actions.c	/^static tree init_module_descriptor()/ ;" function 30 { build_module_descriptor }	{ NULLT OBJC_VERSION TREE_INT_CST_LOW TYPE_SIZE _OBJC_SYMBOLS_decl add_objc_string build_int_2 build_msg_pool_reference build_nt build_tree_list build_unary_op expr get_identifier initlist input_filename nreverse objc_module_template tree tree_cons }
init_objc		objc-actions.c	/^void init_objc()/ ;" function 7 { compile_file start_class }	{ BUFSIZE errbuf hash_init synth_module_prologue utlbuf }
init_objc_symtab		objc-actions.c	/^static tree init_objc_symtab()/ ;" function 33 { generate_objc_symtab_decl }	{ NULLT _OBJC_SELECTOR_REFERENCES_decl build_int_2 build_nt build_tree_list cat_count imp_count init_def_list initlist max_selector_index nreverse sel_ref_chain tree tree_cons }
init_optab		optabs.c	/^init_optab (code)/ ;" function 13 { init_optabs }	{ NUM_MACHINE_MODES optab }
init_optabs		optabs.c	/^init_optabs ()/ ;" function 806 { compile_file }	{ abs_optab add_optab and_optab andcb_optab ashl_optab ashr_optab bcc_gen_fctn cmp_optab ffs_optab flodiv_optab ftrunc_optab init_comparisons init_fixtab init_floattab init_optab ior_optab lshl_optab lshr_optab mov_optab movstrict_optab neg_optab one_cmpl_optab rotl_optab rotr_optab sdiv_optab sdivmod_optab setcc_gen_fctn smod_optab smul_optab smul_widen_optab sub_optab tst_optab ucmp_optab udiv_optab udivmod_optab umod_optab umul_optab umul_widen_optab xor_optab }
init_pending_stack_adjust		expr.c	/^init_pending_stack_adjust ()/ ;" function 4 { init_function_start }	{ pending_stack_adjust }
init_queue		expr.c	/^init_queue ()/ ;" function 5 { init_expr }	{ pending_chain }
init_recog		recog.c	/^init_recog ()/ ;" function 5 { combine_instructions cse_main final loop_optimize regclass }	{ gen_rtx recog_addr_dummy volatile_ok }
init_reg_sets		regclass.c	/^init_reg_sets ()/ ;" function 82 { Mtoplev }	{ COPY_HARD_REG_SET GO_IF_HARD_REG_SUBSET HARD_REG_SET IOR_HARD_REG_SET TEST_HARD_REG_BIT call_used_regs fixed_regs global_regs initial_call_used_regs initial_fixed_regs reg_class_contents reg_class_size reg_class_subclasses reg_class_subunion reg_class_superclasses }
init_reg_sets_1		regclass.c	/^init_reg_sets_1 ()/ ;" function 47 { Mtoplev make_decl_rtl }	{ CLEAR_HARD_REG_SET SET_HARD_REG_BIT call_fixed_reg_set call_fixed_regs call_used_reg_set call_used_regs fixed_reg_set fixed_regs global_regs warning }
init_regset_vector		flow.c	/^init_regset_vector (vector, space, nelts, bytes_pe/ ;" function 15 { allocate_for_life_analysis life_analysis }	{ regset }
init_rtl		rtl.c	/^init_rtl ()/ ;" function 29 { compile_file }	{ NUM_RTX_CODE REAL_VALUE_TYPE rtunion rtx_format rtx_length }
init_selector		objc-actions.c	/^static tree init_selector(int offset)/ ;" function 6 { build_dispatch_table_initializer build_selector_translation_table }	{ TREE_TYPE _selector_type build_msg_pool_reference expr tree }
init_tree		tree.c	/^init_tree ()/ ;" function 18 { compile_file }	{ current_obstack expression_obstack hash_table maybepermanent_firstobj maybepermanent_obstack momentary_firstobj momentary_obstack permanent_obstack rtl_obstack saveable_obstack temporary_firstobj temporary_obstack tree_node_counter }
initdcl		objc-parse.y	/^initdcl:/ ;" yacctoken 1 { }	{ }
initdecls		objc-parse.y	/^initdecls:/ ;" yacctoken 1 { }	{ }
initial_call_used_regs		regclass.c	/^static char initial_call_used_regs[] = CALL_USED_R/ ;" global 1 { init_reg_sets }	{ }
initial_fixed_regs		regclass.c	/^static char initial_fixed_regs[] = FIXED_REGISTERS/ ;" global 1 { init_reg_sets }	{ }
initial_optimize_flag		toplev.c	/^int initial_optimize_flag = 0;/ ;" global 1 { Mtoplev do_pragma }	{ }
initializer_constant_valid_p		c-typeck.c	/^initializer_constant_valid_p (value)/ ;" function 51 { digest_init initializer_constant_valid_p process_init_constructor store_init_value }	{ TREE_CODE TREE_OPERAND TREE_STATIC TREE_TYPE initializer_constant_valid_p }
initlist		objc-parse.y	/^initlist:/ ;" yacctoken 1 { build_category_initializer build_dispatch_table_initializer build_ivar_list_initializer build_selector_translation_table build_shared_structure_initializer generate_category generate_dispatch_table generate_dispatch_tables generate_ivar_lists generate_ivars_list generate_shared_structures init_def_list init_module_descriptor init_objc_symtab }	{ }
inline_fp_rtx		integrate.c	/^static rtx inline_fp_rtx;/ ;" global 1 { copy_rtx_and_substitute expand_inline_function }	{ }
inline_target		integrate.c	/^static rtx inline_target;/ ;" global 1 { copy_rtx_and_substitute expand_inline_function }	{ }
input_file_stack		toplev.c	/^struct file_stack *input_file_stack;/ ;" global 1 { check_newline compile_file report_error_function }	{ }
input_file_stack_tick		toplev.c	/^int input_file_stack_tick;/ ;" global 1 { check_newline report_error_function }	{ }
input_filename		toplev.c	/^char *input_filename;/ ;" global 1 { add_instance_variable build_category_template build_class_template build_ivar_list_template build_ivar_template build_method_decl build_method_list_template build_method_template build_module_descriptor build_objc_selector_template build_objc_symtab_template build_super_template check_newline compile_file error finish_function init_module_descriptor make_node poplevel reallyStartMethod really_sorry sorry warning }	{ }
insert		cse.c	/^insert (x, classp, hash, mode)/ ;" function 119 { cse_insn insert }	{ CHEAPER CONSTANT_P FIXED_BASE_PLUS_P GET_CODE NBUCKETS REGNO get_element get_related_value insert lookup qty_const qty_const_insn rtx rtx_cost safe_hash table table_elt this_insn }
insert_call_saves		caller-save.c	/^insert_call_saves (insn)/ ;" function 34 { save_call_clobbered_regs }	{ GET_MODE_SIZE GET_MODE_UNIT_SIZE TEST_HARD_REG_BIT call_fixed_regs call_used_regs choose_hard_reg_mode emit_mult_restore emit_mult_save gen_rtx grow_save_block hard_regs_live machine_mode save_block_addr save_block_size save_reg_rtx }
insert_regs		cse.c	/^insert_regs (x, classp, modified)/ ;" function 51 { cse_insn }	{ GET_CODE GET_MODE GET_MODE_SIZE REGNO SUBREG_REG make_new_qty make_regs_eqv mention_regs reg_qty reg_rtx }
inside_loop		stmt.c	/^inside_loop ()/ ;" function 4 { expand_expr }	{ loop_stack }
insn_dead_p		flow.c	/^insn_dead_p (x, needed, strict_low_ok)/ ;" function 57 { insn_dead_p propagate_block }	{ GET_CODE REGNO REGSET_ELT_BITS RTX_CODE SET_DEST SET_SRC SUBREG_REG XVECEXP XVECLEN global_regs insn_dead_p rtx }
insn_map		integrate.c	/^static rtx *insn_map;/ ;" global 1 { copy_address copy_for_inline copy_rtx_and_substitute expand_inline_function save_for_inline }	{ }
insn_noperands		final.c	/^static int insn_noperands;/ ;" global 1 { final_scan_insn output_asm_insn }	{ }
instance_type		objc-actions.c	/^static tree instance_type;/ ;" global 1 { build_ivar_reference build_private_template }	{ }
int_array_type_node		c-decl.c	/^tree int_array_type_node;/ ;" global 1 { combine_strings init_decl_processing my_build_string yylex }	{ }
int_fits_type_p		tree.c	/^int_fits_type_p (c, type)/ ;" function 10 { build_binary_op_nodefault expand_expr pushcase pushcase_range yylex }	{ INT_CST_LT INT_CST_LT_UNSIGNED TREE_UNSIGNED TYPE_MAX_VALUE TYPE_MIN_VALUE type }
int_ftype_int		c-decl.c	/^tree int_ftype_int, long_ftype_long;/ ;" global 1 { init_decl_processing }	{ }
int_ftype_ptr_ptr_int		c-decl.c	/^tree void_ftype_ptr_ptr_int, int_ftype_ptr_ptr_int/ ;" global 1 { init_decl_processing }	{ }
int_size_in_bytes		tree.c	/^int_size_in_bytes (type)/ ;" function 14 { assemble_variable assign_parms expand_call expand_function_start expand_inline_function get_or_assign_label output_constructor plain_type plain_type_1 save_noncopied_parts sdbout_one_type store_constructor store_one_arg }	{ TREE_CODE TREE_INT_CST_LOW TYPE_MAIN_VARIANT TYPE_SIZE TYPE_SIZE_UNIT error_mark_node type }
integer_all_onesp		tree.c	/^integer_all_onesp (expr)/ ;" function 20 { fold }	{ HOST_BITS_PER_INT TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_TYPE TREE_UNSIGNED TYPE_PRECISION expr }
integer_mode_p		expr.c	/^integer_mode_p (mode)/ ;" function 5 { convert_to_mode }	{ }
integer_one_node		c-decl.c	/^tree integer_one_node;/ ;" global 1 { build_enumerator build_unary_op expand_divmod fold grokdeclarator init_decl_processing pointer_int_sum shorten_compare }	{ }
integer_onep		tree.c	/^integer_onep (expr)/ ;" function 7 { fold }	{ TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW expr }
integer_type_node		c-decl.c	/^tree integer_type_node;/ ;" global 1 { actualparameterlist array_type_nelts build_array_type build_binary_op_nodefault build_enumerator build_function_type build_int_2 combine_strings compparms1 dbxout_init dbxout_type default_conversion digest_init duplicate_decls expand_expr finish_struct fold gen_declspecs get_parm_info grokdeclarator init_decl_processing my_build_string plain_type_1 pushdecl readescape sdbout_type shorten_compare signed_or_unsigned_type signed_type start_enum start_function store_parm_decls type_for_size unsigned_type yylex }	{ }
integer_zero_node		c-decl.c	/^tree integer_zero_node;/ ;" global 1 { SUB_PARM_SIZE array_type_nelts build_function_call convert_to_integer expand_decl_init expand_end_case expand_expr finish_decl fold grokdeclarator init_decl_processing process_init_constructor real_zerop shorten_compare size_in_bytes split_tree start_enum truthvalue_conversion }	{ }
integer_zerop		tree.c	/^integer_zerop (expr)/ ;" function 7 { build_binary_op_nodefault build_conditional_expr convert_for_assignment convert_to_integer convert_to_pointer do_jump expand_expr fold grokdeclarator subrange_p symout_types truthvalue_conversion }	{ TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW expr }
integration_time		toplev.c	/^int integration_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
interface_chain		objc-actions.c	/^static tree interface_chain = NULLT;/ ;" global 1 { add_class lookup_interface }	{ }
invalid_stack_slot		stmt.c	/^static int invalid_stack_slot;/ ;" global 1 { assign_stack_local fixup_stack_slots init_function_start }	{ }
invalidate		cse.c	/^invalidate (x)/ ;" function 66 { cse_basic_block cse_insn invalidate invalidate_from_clobbers }	{ GET_CODE GET_MODE GET_MODE_SIZE HASH INTVAL NBUCKETS REGNO SUBREG_REG XEXP hash invalidate lookup_for_remove qty_const refers_to_mem_p reg_invalidate remove rtx table table_elt }
invalidate_from_clobbers		cse.c	/^invalidate_from_clobbers (w, x)/ ;" function 35 { cse_insn }	{ GET_CODE XEXP XVECEXP XVECLEN invalidate invalidate_memory rtx }
invalidate_memory		cse.c	/^invalidate_memory (writes)/ ;" function 19 { cse_basic_block invalidate_from_clobbers }	{ NBUCKETS cse_rtx_addr_varies_p remove table table_elt }
invariant_p		loop.c	/^invariant_p (x)/ ;" function 112 { all_sets_invariant_p basic_induction_var can_eliminate_biv_p consec_sets_invariant_p eliminate_biv general_induction_var invariant_p move_movables scan_loop }	{ CONSTANT_POOL_ADDRESS_P GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH MEM_IN_STRUCT_P MEM_VOLATILE_P RTX_UNCHANGING_P XEXP XVECEXP XVECLEN addr_overlap_p arg_pointer_rtx fixed_aggregate_altered frame_pointer_rtx invariant_p loop_store_addrs loop_store_addrs_idx loop_store_widths n_times_set rtx_addr_varies_p rtx_code unknown_address_altered unknown_aggregate_altered }
invert_exp		jump.c	/^invert_exp (x, olabel, nlabel)/ ;" function 41 { do_jump invert_exp invert_jump }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH RTX_CODE XEXP XVECEXP XVECLEN invert_exp rtx }
invert_jump		jump.c	/^invert_jump (jump, nlabel)/ ;" function 12 { jump_optimize loop_skip_over }	{ INSN_CODE JUMP_LABEL LABEL_NUSES PATTERN delete_insn invert_exp rtx }
invert_truthvalue		c-typeck.c	/^invert_truthvalue (arg)/ ;" function 62 { build_unary_op }	{ TREE_CODE TREE_OPERAND TREE_SET_CODE TREE_TYPE build build_unary_op }
ior_optab		optabs.c	/^optab ior_optab;/ ;" global 1 { expand_binop expand_expr extract_split_bit_field init_optabs store_fixed_bit_field }	{ }
isComplexDecl		objc-actions.c	/^int isComplexDecl(tree type)/ ;" function 6 { genDeclaration genDeclarator }	{ TREE_CODE type }
is_ivar		objc-actions.c	/^tree is_ivar(tree decl_chain, tree ident)/ ;" function 7 { is_public }	{ DECL_NAME NULL_TREE TREE_CHAIN }
is_public		objc-actions.c	/^int is_public(tree anExpr, tree anIdentifier)/ ;" function 47 { }	{ IDENTIFIER_POINTER TREE_CODE TREE_PUBLIC TREE_STATIC_TEMPLATE TREE_TYPE TYPE_FIELDS TYPE_NAME _PRIVATE_record decl error extra_warnings implementation_context is_ivar objc_object_reference tree tree_code warning }
is_reserved_word		objc-parse.y	/^is_reserved_word (str, len)/ ;" function 99 { yylex }	{ MAX_HASH_VALUE MAX_WORD_LENGTH MIN_WORD_LENGTH NORID hash resword }
isalnum		objc-parse.y	/^#define isalnum(char) ((char >= 'a' && char <= 'z'/ ;" macro 1 { yylex }	{ }
isdigit		objc-parse.y	/^#define isdigit(char) (char >= '0' && char <= '9')/ ;" macro 1 { yylex }	{ }
iv_class		loop.c	/^struct iv_class;/ ;" global 1 { check_dbra_loop record_giv strength_reduce }	{ }
iv_mode		loop.c	/^enum iv_mode { UNKNOWN_INDUCT, BASIC_INDUCT, NOT_B/ ;" struct 2 { strength_reduce }	{ }
ivar_decl		objc-parse.y	/^ivar_decl:/ ;" yacctoken 1 { }	{ }
ivar_decl_list		objc-parse.y	/^ivar_decl_list:   / ;" yacctoken 1 { }	{ }
ivar_declarator		objc-parse.y	/^ivar_declarator:/ ;" yacctoken 1 { }	{ }
ivar_decls		objc-parse.y	/^ivar_decls:/ ;" yacctoken 1 { add_instance_variable build_ivar_chain check_ivars continue_class dump_interface generate_ivar_lists }	{ }
ivars		objc-parse.y	/^ivars:/ ;" yacctoken 1 { }	{ }
jump2_opt_dump		toplev.c	/^int jump2_opt_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
jump2_opt_dump_file		toplev.c	/^FILE *jump2_opt_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
jump_back_p		jump.c	/^jump_back_p (insn, target)/ ;" function 39 { jump_optimize }	{ GET_CODE GET_MODE GET_MODE_CLASS JUMP_LABEL PATTERN SET_DEST SET_SRC XEXP cc0_rtx condjump_p pc_rtx prev_real_insn reverse_condition rtx rtx_code rtx_renumbered_equal_p simplejump_p }
jump_chain		jump.c	/^rtx *jump_chain;/ ;" global 1 { jump_optimize }	{ }
jump_opt_dump		toplev.c	/^int jump_opt_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
jump_opt_dump_file		toplev.c	/^FILE *jump_opt_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
jump_optimize		jump.c	/^jump_optimize (f, cross_jump, noop_moves)/ ;" function 495 { rest_of_compilation }	{ GET_CODE GET_MODE INSN_CODE INSN_DELETED_P INSN_UID JUMP_LABEL LABEL_NUSES MEM_VOLATILE_P NEXT_INSN NOTE_INSN_FUNCTION_END NOTE_LINE_NUMBER PATTERN PREV_INSN SET_DEST SET_SRC XEXP alloca condjump_p current_function_returns_null delete_insn delete_jump do_cross_jump emit_barrier_after find_cross_jump find_equiv_reg flag_no_peephole follow_jumps gen_rtx invert_jump jump_back_p jump_chain last_insn mark_jump_label max_uid next_label next_real_insn no_labels_between_p optimize prev_real_insn redirect_jump rtx rtx_equal_p simplejump_p tension_vector_labels true_regnum }
jump_time		toplev.c	/^int jump_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
jumpif		expr.c	/^jumpif (exp, label)/ ;" function 6 { }	{ do_jump }
jumpifnot		expr.c	/^jumpifnot (exp, label)/ ;" function 6 { expand_expr expand_return }	{ do_jump }
keep_next_if_subblocks		c-decl.c	/^static int keep_next_if_subblocks;/ ;" global 1 { pushlevel store_parm_decls }	{ }
keep_next_level		c-decl.c	/^keep_next_level ()/ ;" function 4 { }	{ keep_next_level_flag }
keep_next_level_flag		c-decl.c	/^static int keep_next_level_flag;/ ;" global 1 { keep_next_level pushlevel }	{ }
kept_level_p		c-decl.c	/^kept_level_p ()/ ;" function 7 { }	{ current_binding_level }
keywordarg		objc-parse.y	/^keywordarg:/ ;" yacctoken 1 { }	{ }
keywordarglist		objc-parse.y	/^keywordarglist:/ ;" yacctoken 1 { }	{ }
keyworddecl		objc-parse.y	/^keyworddecl:/ ;" yacctoken 1 { }	{ }
keywordexpr		objc-parse.y	/^keywordexpr:	/ ;" yacctoken 1 { }	{ }
keywordname		objc-parse.y	/^keywordname:/ ;" yacctoken 1 { }	{ }
keywordnamelist		objc-parse.y	/^keywordnamelist:/ ;" yacctoken 1 { }	{ }
keywordselector		objc-parse.y	/^keywordselector:/ ;" yacctoken 1 { }	{ }
label_chain		stmt.c	/^struct label_chain/ ;" struct 7 { expand_end_bindings expand_label expand_start_bindings }	{ }
label_map		integrate.c	/^static rtx *label_map;/ ;" global 1 { copy_for_inline copy_rtx_and_substitute expand_inline_function save_for_inline try_fold_cc0 }	{ }
label_num		emit-rtl.c	/^static int label_num = 1;/ ;" global 1 { gen_label_rtx init_emit max_label_num }	{ }
label_rtx		stmt.c	/^label_rtx (label)/ ;" function 11 { emit_case_nodes expand_end_case expand_goto expand_label group_case_nodes }	{ DECL_RTL TREE_CODE gen_label_rtx }
labels_in_range_p		loop.c	/^labels_in_range_p (insn, end)/ ;" function 13 { scan_loop }	{ GET_CODE INSN_LUID NEXT_INSN }
lang_decode_option		c-decl.c	/^lang_decode_option (p)/ ;" function 58 { Mtoplev }	{ dollars_in_ident extra_warnings flag_cond_mismatch flag_no_asm flag_short_enums flag_signed_char flag_traditional flag_writable_strings warn_cast_qual warn_implicit warn_pointer_arith warn_return_type warn_strict_prototypes warn_switch warn_unused warn_write_strings }
lang_identifier		c-tree.h	/^struct lang_identifier/ ;" struct 7 { IDENTIFIER_ERROR_LOCUS IDENTIFIER_GLOBAL_VALUE IDENTIFIER_IMPLICIT_DECL IDENTIFIER_LABEL_VALUE IDENTIFIER_LOCAL_VALUE init_decl_processing }	{ }
language		symseg.h	/^enum language {language_c};/ ;" struct 1 { symout_finish }	{ }
language_lvalue_valid		c-typeck.c	/^language_lvalue_valid (exp)/ ;" function 5 { lvalue_p }	{ }
language_string		c-decl.c	/^char *language_string = "GNU C";/ ;" global 1 { Mtoplev }	{ }
last_call_cuid		combine.c	/^static int last_call_cuid;/ ;" global 1 { combine_instructions record_dead_and_set_regs try_combine }	{ }
last_call_suid		stupid.c	/^static int last_call_suid;/ ;" global 1 { stupid_life_analysis stupid_mark_refs }	{ }
last_error_function		toplev.c	/^static tree last_error_function = NULL;/ ;" global 1 { announce_function report_error_function }	{ }
last_error_tick		toplev.c	/^static int last_error_tick;/ ;" global 1 { report_error_function }	{ }
last_expr_type		stmt.c	/^static tree last_expr_type;/ ;" global 1 { clear_last_expr expand_asm expand_asm_operands expand_continue_loop expand_end_cond expand_end_else expand_end_loop expand_end_stmt_expr expand_exit_loop expand_exit_loop_if_false expand_exit_something expand_expr_stmt expand_null_return_1 }	{ }
last_expr_value		stmt.c	/^static rtx last_expr_value;/ ;" global 1 { expand_end_stmt_expr expand_expr_stmt }	{ }
last_filename		emit-rtl.c	/^static char *last_filename = 0;/ ;" global 1 { emit_note init_emit }	{ }
last_function_parm_tags		c-decl.c	/^static tree last_function_parm_tags;/ ;" global 1 { grokparms start_function }	{ }
last_function_parms		c-decl.c	/^static tree last_function_parms;/ ;" global 1 { grokparms start_function }	{ }
last_ignored_compare		final.c	/^static rtx last_ignored_compare = 0;/ ;" global 1 { final final_scan_insn }	{ }
last_insn		emit-rtl.c	/^static rtx last_insn = NULL;/ ;" global 1 { add_insn add_insn_after delete_insns_since emit_jump_if_reachable emit_nop end_sequence expand_fixup expand_goto_internal expand_null_return expand_null_return_1 expand_return gen_inline_header_rtx get_last_insn init_emit jump_optimize loop_optimize push_to_sequence reorder_insns save_for_inline set_last_insn set_new_first_and_last_insn start_sequence }	{ }
last_jump_suid		stupid.c	/^static int last_jump_suid;/ ;" global 1 { stupid_life_analysis stupid_mark_refs }	{ }
last_label_suid		stupid.c	/^static int last_label_suid;/ ;" global 1 { stupid_life_analysis stupid_mark_refs }	{ }
last_linenum		emit-rtl.c	/^static int last_linenum = 0;/ ;" global 1 { emit_line_note_force emit_note final_end_function final_scan_insn force_next_line_note init_emit output_source_line }	{ }
last_parm_insn		stmt.c	/^static rtx last_parm_insn;/ ;" global 1 { assign_parms fixup_var_refs_insns get_first_nonparm_insn }	{ }
last_use_this_basic_block		loop.c	/^last_use_this_basic_block (regno, insn)/ ;" function 14 { record_giv }	{ GET_CODE INSN_UID NEXT_INSN regno_last_uid rtx }
lastfile		final.c	/^char *lastfile;		\/* Now used in dbxout.c *\// ;" global 1 { dbxout_symbol init_final output_source_line set_current_gdbfile }	{ }
layout_decl		stor-layout.c	/^layout_decl (decl, known_align)/ ;" function 105 { assemble_variable build_conditional_expr build_decl duplicate_decls finish_decl finish_struct layout_record layout_union store_parm_decls }	{ DECL_ALIGN DECL_MODE DECL_SIZE DECL_SIZE_UNIT GET_MODE_ALIGNMENT GET_MODE_BITSIZE GET_MODE_SIZE MAX TREE_ADDRESSABLE TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_PACKED TREE_TYPE TREE_UNSIGNED TYPE_ALIGN TYPE_MODE TYPE_SIZE TYPE_SIZE_UNIT agg_mode build_int decl error_mark_node machine_mode size_one_node tree tree_code type variable_size void_type_node }
layout_record		stor-layout.c	/^layout_record (rec)/ ;" function 191 { layout_type }	{ CEIL DECL_ALIGN DECL_FIELD_CONTEXT DECL_NAME DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT DECL_VOFFSET DECL_VOFFSET_UNIT MAX MIN NULL NULL_TREE STRUCTURE_SIZE_BOUNDARY TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_TYPE TREE_VALUE TYPE_ALIGN TYPE_FIELDS TYPE_SIZE TYPE_SIZE_UNIT build_int convert_units error_mark_node genop layout_decl tree tree_cons }
layout_type		stor-layout.c	/^layout_type (type)/ ;" function 233 { build_array_type build_function_type build_method_type build_offset_type build_pointer_type build_reference_type complete_array_type duplicate_decls finish_struct fixup_unsigned_type init_decl_processing make_signed_type }	{ GET_MODE_ALIGNMENT GET_MODE_BITSIZE GET_MODE_CLASS GET_MODE_SIZE MAX TREE_CHAIN TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_LITERAL TREE_PACKED TREE_PERMANENT TREE_TYPE TREE_UNSIGNED TYPE_ALIGN TYPE_DOMAIN TYPE_FIELDS TYPE_MAIN_VARIANT TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_MODE TYPE_NEXT_VARIANT TYPE_PRECISION TYPE_SEP TYPE_SEP_UNIT TYPE_SIZE TYPE_SIZE_UNIT agg_mode allocation_temporary_p build_int build_pointer_type chain_type end_temporary_allocation genop layout_record layout_union machine_mode resume_momentary resume_temporary_allocation size_one_node size_zero_node suspend_momentary tree type variable_size }
layout_union		stor-layout.c	/^layout_union (rec)/ ;" function 84 { layout_type }	{ CEIL DECL_ALIGN DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT DECL_VOFFSET DECL_VOFFSET_UNIT MAX MIN NULL STRUCTURE_SIZE_BOUNDARY TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_STATIC TREE_TYPE TYPE_ALIGN TYPE_FIELDS TYPE_SIZE TYPE_SIZE_UNIT build_int convert_units error_with_decl genop layout_decl tree }
libcall_dead_p		flow.c	/^libcall_dead_p (x, needed)/ ;" function 19 { propagate_block }	{ GET_CODE REGNO REGSET_ELT_BITS RTX_CODE SET_SRC rtx }
life_analysis		flow.c	/^life_analysis (f, nregs)/ ;" function 280 { flow_analysis }	{ BLOCK_NUM CONTAINING_INSN GET_CODE INSN_VOLATILE LABEL_NEXTREF LABEL_REFS NEXT_INSN NOTE_INSN_DELETED NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PREV_INSN PUT_CODE REGNO REGSET_ELT_BITS REG_BLOCK_GLOBAL REG_USERVAR_P SET_DEST SET_SRC XEXP alloca allocate_for_life_analysis basic_block_drops_in basic_block_end basic_block_head basic_block_live_at_start frame_pointer_needed init_regset_vector max_regno n_basic_blocks propagate_block reg_basic_block reg_live_length reg_next_use regno_reg_rtx regs_ever_live regs_live_at_setjmp regset regset_bytes regset_size rtx rtx_code stack_pointer_rtx volatile_refs_p }
line		symseg.h	/^struct line/ ;" struct 6 { build_asm_stmt build_case build_compound build_exit build_expr_stmt build_goto build_if build_let build_loop build_return c_expand_asm_operands check_newline define_label emit_line_note emit_line_note_force emit_note error_for_asm error_with_file_and_line expand_asm_operands expand_function_end pushdecl report_error_function sdbout_begin_block sdbout_begin_function sdbout_end_block sdbout_end_function symout_source_file warning_with_file_and_line }	{ }
lineno		toplev.c	/^int lineno;/ ;" global 1 { add_instance_variable build_category_template build_class_template build_ivar_list_template build_ivar_template build_method_decl build_method_list_template build_method_template build_module_descriptor build_objc_selector_template build_objc_symtab_template build_super_template check_newline error finish_function init_lex make_node readescape really_sorry skip_white_space sorry warning yylex }	{ }
list_length		tree.c	/^list_length (t)/ ;" function 11 { INTEGRATE_THRESHOLD assign_parms c_expand_asm_operands commontype compare_constant_1 complete_array_type expand_asm_operands expand_call expand_inline_function record_constant_1 start_decl store_constructor symout_types }	{ TREE_CHAIN tree }
local_alloc		local-alloc.c	/^local_alloc ()/ ;" function 92 { rest_of_compilation }	{ CLEAR alloca block_alloc machine_mode max_regno n_basic_blocks next_qty oballoc qty_birth qty_death qty_min_class qty_mode qty_n_calls_crossed qty_n_refs qty_phys_reg qty_phys_sugg qty_preferred_or_nothing qty_size reg_basic_block reg_n_deaths reg_offset reg_qty reg_renumber }
local_alloc_time		toplev.c	/^int local_alloc_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
local_reg_dump		toplev.c	/^int local_reg_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
local_reg_dump_file		toplev.c	/^FILE *local_reg_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
long_double_type_node		c-decl.c	/^tree long_double_type_node;/ ;" global 1 { gen_declspecs get_floating_type grokdeclarator init_decl_processing yylex }	{ }
long_ftype_long		c-decl.c	/^tree int_ftype_int, long_ftype_long;/ ;" global 1 { init_decl_processing }	{ }
long_integer_type_node		c-decl.c	/^tree long_integer_type_node;/ ;" global 1 { commontype encode_type gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type yylex }	{ }
long_long_integer_type_node		c-decl.c	/^tree long_long_integer_type_node;/ ;" global 1 { grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type yylex }	{ }
long_long_unsigned_type_node		c-decl.c	/^tree long_long_unsigned_type_node;/ ;" global 1 { grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type yylex }	{ }
long_unsigned_type_node		c-decl.c	/^tree long_unsigned_type_node;/ ;" global 1 { commontype encode_type gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type yylex }	{ }
lookup		cse.c	/^lookup (x, hash, mode)/ ;" function 13 { cse_insn insert lookup_as_function use_related_value }	{ exp_equiv_p table table_elt }
lookup_as_function		cse.c	/^lookup_as_function (x, code)/ ;" function 19 { cse_insn }	{ GET_CODE GET_MODE NBUCKETS XEXP exp_equiv_p lookup safe_hash table_elt }
lookup_class_method_static		objc-actions.c	/^tree lookup_class_method_static(tree interface, tr/ ;" function 33 { build_message_expr }	{ NULLT lookup_interface lookup_method tree }
lookup_for_remove		cse.c	/^lookup_for_remove (x, hash, mode)/ ;" function 26 { invalidate }	{ GET_CODE REGNO exp_equiv_p table table_elt }
lookup_instance_method_static		objc-actions.c	/^tree lookup_instance_method_static(tree interface,/ ;" function 33 { build_message_expr }	{ NULLT lookup_interface lookup_method tree }
lookup_interface		objc-actions.c	/^tree lookup_interface(tree anIdentifier)/ ;" function 11 { build_ivar_chain build_message_expr generate_shared_structures lookup_class_method_static lookup_instance_method_static objc_comptypes start_class yylex }	{ NULLT TREE_CHAIN interface_chain tree }
lookup_label		c-decl.c	/^lookup_label (id)/ ;" function 20 { define_label }	{ DECL_MODE DECL_SOURCE_LINE IDENTIFIER_LABEL_VALUE NULL_TREE build_decl decl named_labels tree tree_cons }
lookup_method		objc-actions.c	/^tree lookup_method(tree mchain, tree method)/ ;" function 16 { add_class_method add_instance_method build_message_expr check_methods lookup_class_method_static lookup_instance_method_static reallyStartMethod }	{ NULLT TREE_CHAIN TREE_CODE tree }
lookup_name		c-decl.c	/^lookup_name (name)/ ;" function 13 { grokdeclarator pushdecl yylex }	{ IDENTIFIER_GLOBAL_VALUE IDENTIFIER_LOCAL_VALUE TREE_TYPE current_binding_level error_mark_node global_binding_level tree }
lookup_name_current_level		c-decl.c	/^lookup_name_current_level (name)/ ;" function 17 { pushdecl start_function }	{ DECL_NAME IDENTIFIER_GLOBAL_VALUE IDENTIFIER_LOCAL_VALUE TREE_CHAIN current_binding_level global_binding_level tree }
lookup_static_chain		explow.c	/^lookup_static_chain (context)/ ;" function 5 { prepare_call_address }	{ }
lookup_tag		c-decl.c	/^lookup_tag (form, name, binding_level, thislevel_o/ ;" function 29 { shadow_tag start_enum start_struct xref_tag }	{ IDENTIFIER_POINTER NULL_TREE TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_VALUE binding_level error tree }
lookup_tag_reverse		c-decl.c	/^lookup_tag_reverse (type)/ ;" function 16 { shadow_tag }	{ NULL_TREE TREE_CHAIN TREE_PURPOSE TREE_VALUE binding_level current_binding_level tree type }
loop_continue		loop.c	/^static rtx loop_continue;/ ;" global 1 { scan_loop verify_loop }	{ }
loop_depth		flow.c	/^static int loop_depth;/ ;" global 1 { mark_set_1 mark_used_regs propagate_block try_pre_increment_1 }	{ }
loop_dump		toplev.c	/^int loop_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
loop_dump_file		toplev.c	/^FILE *loop_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
loop_dump_stream		loop.c	/^static FILE *loop_dump_stream;/ ;" global 1 { can_eliminate_biv_p check_dbra_loop check_eliminate_biv loop_optimize move_movables record_giv scan_loop strength_reduce }	{ }
loop_has_call		loop.c	/^static int loop_has_call;/ ;" global 1 { check_dbra_loop scan_loop strength_reduce verify_loop }	{ }
loop_optimize		loop.c	/^loop_optimize (f, dumpfile)/ ;" function 83 { rest_of_compilation }	{ GET_CODE INSN_LUID INSN_UID NEXT_INSN NOTE_INSN_LOOP_BEG NOTE_LINE_NUMBER PREV_INSN alloca init_recog last_insn loop_dump_stream max_luid max_reg_num max_uid moved_once old_max_reg rtx scan_loop uid_luid verify_loop }
loop_reg_used_before_p		loop.c	/^loop_reg_used_before_p (insn, loop_start, scan_sta/ ;" function 10 { scan_loop }	{ INSN_LUID PATTERN SET_DEST reg_used_between_p rtx }
loop_skip_over		loop.c	/^loop_skip_over (start, end, loop_entry_jump)/ ;" function 45 { scan_loop }	{ GET_CODE JUMP_LABEL LABEL_NUSES NEXT_INSN PATTERN PREV_INSN copy_rtx delete_insn emit_insn_before emit_jump_insn_before emit_label_after gen_label_rtx invert_jump next_real_insn prev_real_insn rtx sets_cc0_p }
loop_stack		stmt.c	/^struct nesting *loop_stack;/ ;" global 1 { expand_continue_loop expand_end_loop expand_exit_loop expand_exit_loop_if_false expand_fixup expand_loop_continue_here expand_start_loop expand_start_loop_continue_elsewhere init_function_start inside_loop }	{ }
loop_store_addrs		loop.c	/^static rtx loop_store_addrs[NUM_STORES];/ ;" global 1 { invariant_p note_addr_stored }	{ }
loop_store_addrs_idx		loop.c	/^static int loop_store_addrs_idx;/ ;" global 1 { invariant_p note_addr_stored verify_loop }	{ }
loop_store_widths		loop.c	/^static int loop_store_widths[NUM_STORES];/ ;" global 1 { invariant_p note_addr_stored }	{ }
loop_time		toplev.c	/^int loop_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
loops_enclosed		loop.c	/^static int loops_enclosed;/ ;" global 1 { basic_induction_var verify_loop }	{ }
lrotate_double		fold-const.c	/^lrotate_double (l1, h1, count, prec, lv, hv)/ ;" function 33 { combine }	{ decode encode rrotate_double }
lshift_double		fold-const.c	/^lshift_double (l1, h1, count, prec, lv, hv, arith)/ ;" function 34 { combine }	{ decode encode rshift_double }
lshl_optab		optabs.c	/^optab lshl_optab;/ ;" global 1 { expand_binop expand_expr expand_shift init_optabs }	{ }
lshr_optab		optabs.c	/^optab lshr_optab;/ ;" global 1 { expand_expr expand_shift init_optabs }	{ }
lvalue_or_else		tree.c	/^lvalue_or_else (ref, string)/ ;" function 9 { build_modify_expr build_unary_op }	{ error lvalue_p string }
lvalue_p		tree.c	/^lvalue_p (ref)/ ;" function 34 { build_array_ref default_conversion lvalue_or_else lvalue_p }	{ TREE_CODE TREE_OPERAND TREE_TYPE language_lvalue_valid lvalue_p tree_code }
machine_mode		tree.h	/^enum machine_mode {/ ;" struct 3 { DEF_MACHMODE INC_MODE agg_mode assign_parms can_eliminate_biv_p choose_reload_regs combine_movables compare convert_move copy_address copy_rtx_and_substitute cse_insn do_store_flag eliminate_biv emit_cmp_insn emit_library_call emit_move_insn emit_reload_insns emit_unop_insn expand_assignment expand_binop expand_expr expand_increment expand_inline_function expand_twoval_binop expand_unop extract_bit_field extract_fixed_bit_field find_reg find_reloads fixup_memory_subreg fold_cc0 fold_rtx gen_move_insn gen_rtx insert_call_saves layout_decl layout_type local_alloc plus_constant prdeclmodeinfo prtypemodeinfo read_rtx reload reload_reg_class_lower store_bit_field store_constructor store_fixed_bit_field subreg_lowpart_p }	{ }
main		toplev.c	/^main (argc, argv, envp)/ ;" function 367 { }	{ FATAL_EXIT_CODE NUM_TREE_CODES OVERRIDE_OPTIONS SUCCESS_EXIT_CODE __VERSION__ asm_file_name combine_dump compile_file cse_dump dbr_sched_dump doing_objc_thang dump_base_name error errorcount extra_warnings f_options fix_register flag_short_enums flag_signed_char float_signal flow_dump gen_declaration get_obstack_code global_reg_dump id_clash_len inhibit_warnings init_reg_sets init_reg_sets_1 initial_optimize_flag jump2_opt_dump jump_opt_dump lang_decode_option language_string local_reg_dump loop_dump maybepermanent_obstack momentary_obstack obey_regdecls obstack_code_name optimize pedantic permanent_obstack pipe_closed print_target_switch_defaults profile_block_flag profile_flag progname quiet_flag rtl_dump save_argc save_argv set_target_switch sorrycount string sym_file_name target_flags temporary_obstack tree_code_name tree_node_count tree_node_counter (etc) }
main_input_filename		toplev.c	/^char *main_input_filename;/ ;" global 1 { check_newline compile_file output_source_line }	{ }
make_binding_level		c-decl.c	/^make_binding_level ()/ ;" function 5 { pushlevel }	{ binding_level xmalloc }
make_decl_rtl		varasm.c	/^make_decl_rtl (decl, asmspec, top_level)/ ;" function 93 { builtin_function rest_of_decl_compilation }	{ DECL_ASSEMBLER_NAME DECL_INITIAL DECL_MODE DECL_RTL GET_MODE MEM_IN_STRUCT_P MEM_VOLATILE_P RTX_UNCHANGING_P TREE_CODE TREE_EXTERNAL TREE_READONLY TREE_REGDECL TREE_TYPE TREE_VOLATILE TYPE_MODE decl decode_reg_name error error_with_decl fixed_regs function_defined gen_rtx global_regs init_reg_sets_1 pedantic saveable_obstack var_labelno warning }
make_function_rtl		varasm.c	/^make_function_rtl (decl)/ ;" function 11 { start_function }	{ DECL_ASSEMBLER_NAME DECL_MODE DECL_RTL decl function_defined gen_rtx }
make_insn_raw		emit-rtl.c	/^make_insn_raw (pattern, pat_formals)/ ;" function 16 { emit_call_insn emit_insn emit_insn_after emit_insn_before }	{ INSN_CODE INSN_UID LOG_LINKS NULL PATTERN REG_NOTES cur_insn_uid rtx rtx_alloc }
make_jump_insn_raw		emit-rtl.c	/^make_jump_insn_raw (pattern, pat_formals)/ ;" function 17 { emit_jump_insn emit_jump_insn_after emit_jump_insn_before }	{ INSN_CODE INSN_UID JUMP_LABEL LOG_LINKS NULL PATTERN REG_NOTES cur_insn_uid rtx rtx_alloc }
make_memloc		reload.c	/^make_memloc (ad, regno)/ ;" function 13 { find_reloads_address find_reloads_address_1 }	{ GET_MODE XEXP gen_rtx memlocs n_memlocs reg_equiv_address rtx rtx_equal_p }
make_new_qty		cse.c	/^make_new_qty (reg)/ ;" function 9 { insert_regs }	{ next_qty qty_first_reg qty_last_reg reg_qty }
make_node		tree.c	/^make_node (code)/ ;" function 126 { build build_array_type build_asm_stmt build_case build_complex build_compound build_decl build_exit build_expr_stmt build_function_type build_goto build_if build_index_type build_int_2 build_keyword_decl build_let build_loop build_method_decl build_method_type build_nt build_offset_type build_op_identifier build_pointer_type build_real build_real_from_int_cst build_reference_type build_return build_string build_tree_list combine_strings comp_method_with_proto comp_proto_with_proto convert_to_real dbxout_symbol expand_start_stmt_expr get_identifier init_decl_processing make_signed_type make_tree make_unsigned_type perm_tree_cons saveable_tree_cons shadow_tag start_class start_enum start_struct temp_tree_cons tree_cons xref_tag }	{ DECL_ALIGN DECL_SIZE_UNIT DECL_SOURCE_FILE DECL_SOURCE_LINE DECL_VOFFSET_UNIT TREE_CHAIN TREE_LITERAL TREE_PERMANENT TREE_SET_CODE TREE_TYPE TREE_UID TYPE_ALIGN TYPE_MAIN_VARIANT TYPE_SIZE_UNIT all_types_permanent current_obstack expression_obstack input_filename lineno objc_tree_class_type objc_tree_keyword_decl objc_tree_method_decl permanent_obstack saveable_obstack tree tree_code_length tree_code_type tree_common tree_decl tree_exp tree_node_count tree_node_counter tree_node_size tree_real_cst tree_type type }
make_pointer_declarator		objc-parse.y	/^make_pointer_declarator (type_quals, target)/ ;" function 5 { }	{ build type_quals }
make_regs_eqv		cse.c	/^make_regs_eqv (new, old)/ ;" function 45 { insert_regs }	{ cse_basic_block_end cse_basic_block_start qty_first_reg qty_last_reg reg_next_eqv reg_prev_eqv reg_qty uid_cuid }
make_safe_from		emit-rtl.c	/^make_safe_from (x, other)/ ;" function 33 { }	{ CONSTANT_P GET_CODE GET_MODE REGNO SUBREG_REG XEXP emit_move_insn gen_reg_rtx reg_mentioned_p rtx }
make_signed_type		stor-layout.c	/^make_signed_type (precision)/ ;" function 37 { init_decl_processing }	{ HOST_BITS_PER_INT TREE_TYPE TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_PRECISION build_int_2 layout_type make_node sizetype tree type }
make_tree		expmed.c	/^make_tree (type, x)/ ;" function 22 { expand_mult_add }	{ GET_CODE INTVAL RTL_EXPR_RTL RTL_EXPR_SEQUENCE TREE_TYPE build_int_2 fold make_node tree type }
make_unsigned_type		stor-layout.c	/^make_unsigned_type (precision)/ ;" function 16 { init_decl_processing }	{ TYPE_PRECISION fixup_unsigned_type make_node sizetype tree type }
mark_addressable		c-typeck.c	/^mark_addressable (exp)/ ;" function 39 { build_array_ref build_unary_op default_conversion expand_call }	{ DECL_NAME IDENTIFIER_POINTER TREE_ADDRESSABLE TREE_CODE TREE_OPERAND TREE_PUBLIC TREE_REGDECL error put_var_into_stack tree warning }
mark_home_live		reload1.c	/^mark_home_live (regno)/ ;" function 11 { check_frame_pointer_required reload spill_hard_reg }	{ PSEUDO_REGNO_MODE reg_renumber regs_ever_live }
mark_jump_label		jump.c	/^mark_jump_label (x, insn, cross_jump)/ ;" function 51 { jump_optimize mark_jump_label }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH JUMP_LABEL LABEL_NUSES NEXT_INSN NOTE_INSN_FUNCTION_END NOTE_INSN_LOOP_BEG NOTE_LINE_NUMBER RTX_CODE XEXP XVECEXP XVECLEN mark_jump_label rtx }
mark_label_ref		flow.c	/^mark_label_ref (x, insn, checkdup)/ ;" function 46 { find_basic_blocks mark_label_ref }	{ CONTAINING_INSN GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INSN_UID LABEL_NEXTREF LABEL_REFS RTX_CODE XEXP XVECEXP XVECLEN block_live_static mark_label_ref rtx }
mark_life		local-alloc.c	/^mark_life (regno, mode, life)/ ;" function 13 { reg_is_born wipe_dead_reg }	{ CLEAR_HARD_REG_BIT SET_HARD_REG_BIT regs_live }
mark_reg_clobber		global-alloc.c	/^mark_reg_clobber (reg, setter)/ ;" function 52 { global_conflicts mark_reg_store }	{ GET_CODE GET_MODE REGNO SET_ALLOCNO_LIVE SET_HARD_REG_BIT SUBREG_REG SUBREG_WORD fixed_regs hard_regs_live record_one_conflict reg_allocno reg_renumber regs_set }
mark_reg_death		global-alloc.c	/^mark_reg_death (reg)/ ;" function 29 { global_conflicts }	{ CLEAR_ALLOCNO_LIVE CLEAR_HARD_REG_BIT GET_MODE REGNO fixed_regs hard_regs_live reg_allocno reg_renumber }
mark_reg_live_nc		global-alloc.c	/^mark_reg_live_nc (regno, mode)/ ;" function 11 { global_conflicts }	{ SET_HARD_REG_BIT hard_regs_live }
mark_reg_pointer		emit-rtl.c	/^mark_reg_pointer (reg)/ ;" function 5 { assign_parms break_out_memory_refs expand_decl restore_reg_data_1 }	{ REGNO REGNO_POINTER_FLAG }
mark_reg_store		global-alloc.c	/^mark_reg_store (orig_reg, setter)/ ;" function 59 { global_conflicts }	{ GET_CODE GET_MODE REGNO SET_ALLOCNO_LIVE SET_HARD_REG_BIT SET_SRC SUBREG_REG SUBREG_WORD fixed_regs hard_regs_live mark_reg_clobber record_one_conflict reg_allocno reg_renumber regs_set rtx set_preference }
mark_reload_reg_in_use		reload1.c	/^mark_reload_reg_in_use (regno, when_needed)/ ;" function 24 { choose_reload_regs }	{ reload_reg_in_use reload_reg_in_use_at_all reload_reg_in_use_for_inputs reload_reg_in_use_for_operands reload_reg_in_use_for_outputs }
mark_set_1		flow.c	/^mark_set_1 (needed, dead, x, insn, significant)/ ;" function 146 { mark_set_regs }	{ BLOCK_NUM GET_CODE GET_MODE LOG_LINKS REGNO REGSET_ELT_BITS REG_BLOCK_GLOBAL REG_BLOCK_UNKNOWN REG_NOTES REG_SIZE SET_DEST SUBREG_REG XEXP gen_rtx global_regs loop_depth reg_basic_block reg_live_length reg_n_deaths reg_n_refs reg_n_sets reg_next_use regs_ever_live rtx }
mark_set_regs		flow.c	/^mark_set_regs (needed, dead, x, insn, significant)/ ;" function 22 { propagate_block }	{ GET_CODE RTX_CODE XVECEXP XVECLEN mark_set_1 }
mark_used_regs		flow.c	/^mark_used_regs (needed, live, x, final, insn)/ ;" function 281 { mark_used_regs propagate_block }	{ BLOCK_NUM GET_CODE GET_MODE GET_MODE_SIZE GET_RTX_FORMAT GET_RTX_LENGTH INSN_VOLATILE INTVAL PATTERN REGNO REGSET_ELT_BITS REG_BLOCK_GLOBAL REG_BLOCK_UNKNOWN REG_NOTES REG_SIZE RTX_CODE SET_DEST SET_SRC SUBREG_REG XEXP XVECEXP XVECLEN const0_rtx dead_or_set_p final find_regno_note find_use_as_address gen_rtx global_regs loop_depth mark_used_regs reg_basic_block reg_n_deaths reg_n_refs reg_n_sets reg_next_use regs_ever_live rtx }
markvec		print-tree.c	/^static char *markvec;/ ;" global 1 { dump dump_tree }	{ }
max		emit-rtl.c	/^#define max(A,B) ((A) > (B) ? (A) : (B))/ ;" macro 1 { TYPE_MAX_VALUE TYPE_METHOD_BASETYPE TYPE_OFFSET_BASETYPE gen_highpart gen_lowpart gen_lowpart_for_combine reload restore_reg_data_1 subreg_lowpart_p }	{ }
max_allocno		global-alloc.c	/^static int max_allocno;/ ;" global 1 { check_frame_pointer_required dump_conflicts find_reg global_alloc global_conflicts record_one_conflict }	{ }
max_block_depth		final.c	/^static int max_block_depth;/ ;" global 1 { final_scan_insn init_final }	{ }
max_elements_made		cse.c	/^static int max_elements_made;/ ;" global 1 { cse_main }	{ }
max_label_num		emit-rtl.c	/^max_label_num ()/ ;" function 4 { save_for_inline }	{ label_num }
max_luid		loop.c	/^static int max_luid;/ ;" global 1 { loop_optimize }	{ }
max_parallel		regclass.c	/^int max_parallel;/ ;" global 1 { global_conflicts reg_scan }	{ }
max_parm_reg		stmt.c	/^static int max_parm_reg;/ ;" global 1 { assign_parms copy_for_inline expand_function_end expand_function_start max_parm_reg_num parm_stack_loc save_for_inline }	{ }
max_parm_reg_num		stmt.c	/^max_parm_reg_num ()/ ;" function 4 { save_for_inline }	{ max_parm_reg }
max_qty		cse.c	/^static int max_qty;/ ;" global 1 { cse_basic_block cse_main new_basic_block }	{ }
max_reg		cse.c	/^static int max_reg;/ ;" global 1 { cse_main new_basic_block save_for_inline }	{ }
max_reg_num		emit-rtl.c	/^max_reg_num ()/ ;" function 4 { assign_parms loop_optimize rest_of_compilation save_for_inline try_combine }	{ reg_rtx_no }
max_regno		flow.c	/^int max_regno;/ ;" global 1 { allocate_for_life_analysis block_alloc check_frame_pointer_required combine_regs dump_flow_info dump_global_regs dump_local_alloc expand_inline_function global_alloc global_conflicts life_analysis local_alloc order_regs_for_reload propagate_block reload reload_as_needed save_call_clobbered_regs spill_hard_reg stupid_life_analysis }	{ }
max_selector_index		objc-actions.c	/^static int  max_selector_index;		\/* total # of sel/ ;" global 1 { add_selector_reference init_objc_symtab objc_debug }	{ }
max_structure_value_size		stmt.c	/^static int max_structure_value_size;/ ;" global 1 { get_structure_value_addr init_function_start }	{ }
max_uid		loop.c	/^static int max_uid;/ ;" global 1 { eliminate_frame_pointer flow_analysis jump_optimize loop_optimize restore_reg_data save_for_inline stupid_life_analysis verify_loop }	{ }
max_wide		objc-parse.y	/^static int max_wide;		\/* Current nominal length of/ ;" global 1 { init_lex yylex }	{ }
maxtoken		objc-parse.y	/^static int maxtoken;		\/* Current nominal length of/ ;" global 1 { extend_token_buffer init_lex yylex }	{ }
may_call_alloca		expr.c	/^int may_call_alloca;/ ;" global 1 { expand_call init_expr }	{ }
may_trap_p		rtlanal.c	/^may_trap_p (x)/ ;" function 61 { may_trap_p scan_loop }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_CLASS GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN const0_rtx may_trap_p rtx_code rtx_varies_p }
maybe_attribute		objc-parse.y	/^maybe_attribute:/ ;" yacctoken 1 { }	{ }
maybe_type_qual		objc-parse.y	/^maybe_type_qual:/ ;" yacctoken 1 { }	{ }
maybeasm		objc-parse.y	/^maybeasm:/ ;" yacctoken 1 { }	{ }
maybecomma		objc-parse.y	/^maybecomma:/ ;" yacctoken 1 { }	{ }
maybecomma_warn		objc-parse.y	/^maybecomma_warn:/ ;" yacctoken 1 { }	{ }
maybepermanent_firstobj		tree.c	/^char *maybepermanent_firstobj;/ ;" global 1 { init_tree permanent_allocation preserve_data }	{ }
maybepermanent_obstack		tree.c	/^struct obstack maybepermanent_obstack;/ ;" global 1 { Mtoplev get_obstack_code init_tree permanent_allocation preserve_data resume_temporary_allocation save_for_inline temporary_allocation }	{ }
mem_last_set		combine.c	/^static int mem_last_set;/ ;" global 1 { combine_instructions record_dead_and_set_regs use_crosses_set_p }	{ }
memlocs		reload.c	/^static rtx memlocs[MAX_RECOG_OPERANDS * ((MAX_REGS/ ;" global 1 { make_memloc }	{ }
memory_address		explow.c	/^memory_address (mode, x)/ ;" function 92 { assign_parms change_address copy_rtx_and_substitute emit_move_insn emit_push_insn expand_call expand_expr expand_inline_function memory_address_noforce move_block_from_reg move_block_to_reg prepare_call_address push_block store_one_arg target_for_arg }	{ CONSTANT_P GET_CODE QUEUED_VAR XEXP arg_pointer_rtx break_out_memory_refs copy_to_reg cse_not_expected eliminate_constant_term flag_force_addr force_operand force_reg frame_pointer_rtx general_operand memory_address_p optimize plus_constant rtx }
memory_address_noforce		explow.c	/^memory_address_noforce (mode, x)/ ;" function 12 { do_tablejump }	{ flag_force_addr memory_address rtx }
memory_address_p		recog.c	/^memory_address_p (mode, addr)/ ;" function 10 { address_operand alter_reg assign_stack_local convert_move copy_rtx_and_substitute emit_move_insn expand_expr expand_inline_function fixup_memory_subreg fixup_stack_1 fold_rtx force_const_double_mem memory_address offsettable_address_p reload use_related_value }	{ }
memory_operand		recog.c	/^memory_operand (op, mode)/ ;" function 21 { indirect_operand }	{ GET_CODE GET_MODE SUBREG_REG general_operand reload_completed rtx }
mention_regs		cse.c	/^mention_regs (x)/ ;" function 32 { cse_insn insert_regs mention_regs }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO XEXP XVECEXP XVECLEN mention_regs reg_in_table reg_rtx reg_tick remove_invalid_refs rtx_code }
messageargs		objc-parse.y	/^messageargs:/ ;" yacctoken 1 { }	{ }
method_context		objc-actions.c	/^static tree method_context = NULLT;/ ;" global 1 { build_ivar_reference build_message_expr compiling_a_method continue_method_def finish_method_def get_super_receiver start_method_def }	{ }
method_slot		objc-actions.c	/^static int  method_slot = 0;	\/* used by start_meth/ ;" global 1 { reallyStartMethod start_class }	{ }
methoddecl		objc-parse.y	/^methoddecl:/ ;" yacctoken 1 { }	{ }
methoddef		objc-parse.y	/^methoddef:/ ;" yacctoken 1 { }	{ }
methodproto		objc-parse.y	/^methodproto:/ ;" yacctoken 1 { }	{ }
methodprotolist		objc-parse.y	/^methodprotolist:/ ;" yacctoken 1 { }	{ }
methodprotolist2		objc-parse.y	/^methodprotolist2:		 \/* eliminates a shift\/reduce c/ ;" yacctoken 1 { }	{ }
min		emit-rtl.c	/^#define min(A,B) ((A) < (B) ? (A) : (B))/ ;" macro 1 { alter_subreg end_final final_start_function gen_highpart gen_lowpart gen_lowpart_for_combine }	{ }
mode_class		rtl.c	/^enum mode_class mode_class[] = {/ ;" global 3 { GET_MODE_CLASS emit_cmp_insn expand_binop expand_twoval_binop expand_unop }	{ }
mode_dependent_address_p		recog.c	/^mode_dependent_address_p (addr)/ ;" function 8 { convert_move general_operand optimize_bit_field subst }	{ }
mode_independent_operand		recog.c	/^mode_independent_operand (op, mode)/ ;" function 18 { }	{ GET_CODE XEXP general_operand rtx }
mode_name		rtl.c	/^char *mode_name[] = {/ ;" global 3 { GET_MODE_NAME prdeclmodeinfo prtypemodeinfo }	{ }
mode_size		rtl.c	/^int mode_size[] = {/ ;" global 3 { GET_MODE_BITSIZE GET_MODE_SIZE REG_BYTES REG_SIZE }	{ }
mode_unit_size		rtl.c	/^int mode_unit_size[] = {/ ;" global 3 { GET_MODE_UNIT_SIZE }	{ }
mode_wider_mode		rtl.c	/^enum machine_mode mode_wider_mode[] = {/ ;" global 3 { GET_MODE_WIDER_MODE }	{ }
modes_equiv_for_class_p		reload1.c	/^modes_equiv_for_class_p (mode0, mode1, class)/ ;" function 18 { reload }	{ TEST_HARD_REG_BIT reg_class_contents }
momentary_firstobj		tree.c	/^char *momentary_firstobj;/ ;" global 1 { init_tree permanent_allocation }	{ }
momentary_level		tree.c	/^struct momentary_level/ ;" struct 10 { pop_momentary push_momentary }	{ }
momentary_obstack		tree.c	/^struct obstack momentary_obstack;/ ;" global 1 { Mtoplev clear_momentary get_obstack_code init_tree permanent_allocation pop_momentary push_momentary resume_momentary suspend_momentary }	{ }
momentary_stack		tree.c	/^struct momentary_level *momentary_stack;/ ;" global 1 { clear_momentary pop_momentary push_momentary temporary_allocation }	{ }
mov_optab		optabs.c	/^optab mov_optab;/ ;" global 1 { emit_move_insn gen_move_insn init_optabs }	{ }
movable		loop.c	/^struct movable/ ;" struct 32 { combine_movables force_movables ignore_some_movables move_movables regs_match_p scan_loop }	{ }
move_block_from_reg		expr.c	/^move_block_from_reg (regno, x, nregs)/ ;" function 19 { assign_parms }	{ GET_CODE GET_MODE_SIZE XEXP emit_move_insn gen_rtx memory_address plus_constant }
move_block_to_reg		expr.c	/^move_block_to_reg (regno, x, nregs)/ ;" function 24 { emit_push_insn store_one_arg }	{ GET_CODE GET_MODE_SIZE XEXP const0_rtx dconst0_rtx emit_move_insn force_const_double_mem gen_rtx memory_address plus_constant }
move_by_pieces		expr.c	/^move_by_pieces (to, from, len, align)/ ;" function 100 { emit_block_move emit_push_insn move_by_pieces }	{ CONSTANT_P GET_CODE GET_MODE_SIZE XEXP copy_addr_to_reg move_by_pieces move_by_pieces_1 move_by_pieces_ninsns plus_constant rtx }
move_by_pieces_1		expr.c	/^move_by_pieces_1 (genfun, mode, data)/ ;" function 46 { move_by_pieces }	{ GET_MODE_SIZE change_address emit_insn gen_add2_insn gen_rtx gen_sub2_insn plus_constant rtx }
move_by_pieces_ninsns		expr.c	/^move_by_pieces_ninsns (l, align)/ ;" function 33 { emit_block_move emit_push_insn move_by_pieces }	{ GET_MODE_SIZE }
move_cleanups_up		stmt.c	/^move_cleanups_up ()/ ;" function 10 { }	{ block block_stack chainon nesting }
move_deaths		combine.c	/^move_deaths (x, from_cuid, to_insn)/ ;" function 39 { move_deaths try_combine }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INSN_CUID REGNO REG_NOTES XEXP XVECEXP XVECLEN dead_or_set_p gen_rtx move_deaths reg_last_death remove_death rtx rtx_code }
move_deaths_2		combine.c	/^move_deaths_2 (x, from_cuid, from_insn, to_insn)/ ;" function 48 { move_deaths_2 try_distrib }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INSN_CUID REGNO REG_NOTES XEXP XVECEXP XVECLEN dead_or_set_p gen_rtx move_deaths_2 reg_last_death remove_death rtx rtx_code }
move_movables		loop.c	/^move_movables (movables, threshold, insn_count, lo/ ;" function 298 { scan_loop }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_BITSIZE INSN_LUID INSN_UID NEXT_INSN PATTERN REG_NOTES SET_DEST SET_SRC XEXP alloca consec_sets_invariant_p delete_insn emit_call_insn_before emit_insn_before find_reg_note gen_rtx invariant_p loop_dump_stream movable moved_once n_times_set n_times_used num_movables reg_map regno_first_uid regno_last_uid replace_call_address replace_regs rtx savings uid_luid }
moved_once		loop.c	/^static char *moved_once;/ ;" global 1 { loop_optimize move_movables }	{ }
movstrict_optab		optabs.c	/^optab movstrict_optab;/ ;" global 1 { init_optabs store_bit_field }	{ }
mul_double		fold-const.c	/^mul_double (l1, h1, l2, h2, lv, hv)/ ;" function 69 { combine div_and_round_double }	{ decode encode }
my_build_string		objc-actions.c	/^static tree my_build_string(int len, char *str)/ ;" function 19 { build_encode_expr build_message_selector_pool finish_objc get_class_reference get_super_receiver }	{ TREE_LITERAL TREE_STATIC TREE_TYPE build_array_type build_index_type build_int_2 build_string char_type_node int_array_type_node integer_type_node tree }
mydecl		objc-parse.y	/^mydecl:/ ;" yacctoken 1 { }	{ }
mydecls		objc-parse.y	/^mydecls:/ ;" yacctoken 1 { }	{ }
myparm		objc-parse.y	/^myparm:/ ;" yacctoken 1 { }	{ }
myparms		objc-parse.y	/^myparms:	/ ;" yacctoken 1 { }	{ }
myxdecls		objc-parse.y	/^myxdecls:/ ;" yacctoken 1 { }	{ }
n_basic_blocks		flow.c	/^int n_basic_blocks;/ ;" global 1 { allocate_for_life_analysis dump_flow_info find_basic_blocks flow_analysis global_alloc global_conflicts life_analysis local_alloc regclass regno_uninitialized reload reload_as_needed save_call_clobbered_regs }	{ }
n_earlyclobbers		reload.c	/^int n_earlyclobbers;/ ;" global 1 { choose_reload_regs find_reloads }	{ }
n_elements_made		cse.c	/^static int n_elements_made;/ ;" global 1 { cse_main get_element }	{ }
n_memlocs		reload.c	/^static int n_memlocs;/ ;" global 1 { find_reloads make_memloc }	{ }
n_occurrences		combine.c	/^static int n_occurrences;/ ;" global 1 { find_reloads subst try_combine try_distrib }	{ }
n_regs_set		global-alloc.c	/^static int n_regs_set;/ ;" global 1 { global_conflicts }	{ }
n_reloads		reload.c	/^int n_reloads;/ ;" global 1 { choose_reload_regs combine_reloads emit_reload_insns find_equiv_reg find_reloads push_reload reload reload_as_needed }	{ }
n_replacements		reload.c	/^static int n_replacements;/ ;" global 1 { combine_reloads find_reloads subst_reloads }	{ }
n_spills		reload1.c	/^static int n_spills;/ ;" global 1 { choose_reload_regs new_spill_reg reload reload_as_needed }	{ }
n_times_set		loop.c	/^static short *n_times_set;/ ;" global 1 { consec_sets_giv consec_sets_invariant_p count_loop_regs_set invariant_p move_movables record_giv scan_loop strength_reduce }	{ }
n_times_used		loop.c	/^static short *n_times_used;/ ;" global 1 { combine_movables move_movables record_giv scan_loop }	{ }
named_labels		c-decl.c	/^static tree named_labels;/ ;" global 1 { init_decl_processing lookup_label poplevel pushlevel }	{ }
namespace		symseg.h	/^enum namespace/ ;" struct 5 { symout_block_symbols symout_block_tags }	{ }
need_error_newline		toplev.c	/^static int need_error_newline;/ ;" global 1 { announce_function report_error_function }	{ }
neg_double		fold-const.c	/^neg_double (l1, h1, lv, hv)/ ;" function 15 { combine div_and_round_double fold_convert }	{ }
neg_optab		optabs.c	/^optab neg_optab;/ ;" global 1 { expand_divmod expand_expr expand_mult init_optabs negate_rtx }	{ }
negate_rtx		expmed.c	/^negate_rtx (mode, x)/ ;" function 20 { push_block }	{ GET_CODE GET_MODE GET_MODE_BITSIZE HOST_BITS_PER_INT INTVAL expand_unop gen_rtx neg_optab }
nesting		stmt.c	/^struct nesting/ ;" struct 78 { POPSTACK expand_anon_union_decl expand_decl expand_end_bindings expand_end_case expand_end_cond expand_end_else expand_exit_something expand_fixup expand_goto_internal expand_null_return expand_return expand_start_bindings expand_start_case expand_start_case_dummy expand_start_cond expand_start_loop move_cleanups_up }	{ }
nesting_depth		stmt.c	/^int nesting_depth;/ ;" global 1 { POPSTACK expand_start_bindings expand_start_case expand_start_case_dummy expand_start_cond expand_start_loop init_function_start }	{ }
nesting_stack		stmt.c	/^struct nesting *nesting_stack;/ ;" global 1 { POPSTACK expand_exit_something expand_start_bindings expand_start_case expand_start_case_dummy expand_start_cond expand_start_loop init_function_start }	{ }
new_basic_block		cse.c	/^new_basic_block ()/ ;" function 38 { cse_basic_block }	{ NBUCKETS all_minus_one consec_ints free_element max_qty max_reg next_qty prev_insn prev_insn_cc0 prev_insn_explicit_cc0 qty_const qty_const_insn qty_first_reg qty_last_reg reg_in_table reg_next_eqv reg_prev_eqv reg_qty reg_rtx reg_tick rtx table table_elt }
new_block		final.c	/^static int new_block = 1;/ ;" global 1 { final final_scan_insn }	{ }
new_spill_reg		reload1.c	/^new_spill_reg (i, class, max_needs, max_nongroups,/ ;" function 50 { reload }	{ counted_for_nongroups forbidden_regs n_spills potential_reload_regs reg_class_superclasses regs_ever_live spill_hard_reg spill_reg_order spill_regs }
next_address		symout.c	/^static int next_address;/ ;" global 1 { symout_block symout_block_symbols symout_block_tags symout_enum_values symout_finish symout_init symout_record_fields symout_source_file symout_sources symout_strings_skip symout_top_blocks symout_types }	{ }
next_block_index		final.c	/^int next_block_index;/ ;" global 1 { final_scan_insn final_start_function init_final }	{ }
next_block_number		dbxout.c	/^static int next_block_number;/ ;" global 1 { dbxout_block dbxout_init sdbout_begin_block sdbout_block }	{ }
next_gdb_filenum		final.c	/^static int next_gdb_filenum;/ ;" global 1 { init_final set_current_gdbfile }	{ }
next_insn		emit-rtl.c	/^next_insn (insn)/ ;" function 6 { }	{ NEXT_INSN }
next_insn_tests_no_inequality		recog.c	/^next_insn_tests_no_inequality (insn)/ ;" function 10 { subst try_combine }	{ GET_CODE NEXT_INSN PATTERN inequality_comparisons_p rtx }
next_insns_test_no_inequality		recog.c	/^next_insns_test_no_inequality (insn)/ ;" function 21 { output_btst }	{ GET_CODE NEXT_INSN PATTERN SET_DEST cc0_rtx inequality_comparisons_p reg_mentioned_p rtx }
next_label		jump.c	/^next_label (insn)/ ;" function 7 { jump_optimize }	{ GET_CODE NEXT_INSN }
next_nondeleted_insn		jump.c	/^next_nondeleted_insn (insn)/ ;" function 7 { }	{ INSN_DELETED_P NEXT_INSN }
next_qty		cse.c	/^static int next_qty;/ ;" global 1 { alloc_qty block_alloc cse_basic_block local_alloc make_new_qty new_basic_block }	{ }
next_real_insn		jump.c	/^next_real_insn (label)/ ;" function 18 { check_dbra_loop follow_jumps group_case_nodes jump_optimize loop_skip_over rtx_renumbered_equal_p strength_reduce }	{ GET_CODE NEXT_INSN RTX_CODE rtx }
next_type_number		dbxout.c	/^static int next_type_number;/ ;" global 1 { dbxout_init dbxout_type }	{ }
nextchar		objc-parse.y	/^static int nextchar = -1;/ ;" global 1 { yylex }	{ }
no_global_alloc_regs		global-alloc.c	/^static HARD_REG_SET no_global_alloc_regs;/ ;" global 1 { find_reg global_alloc }	{ }
no_labels_between		rtlanal.c	/^no_labels_between (from, to)/ ;" function 16 { }	{ GET_CODE PREV_INSN rtx }
no_labels_between_p		jump.c	/^no_labels_between_p (beg, end)/ ;" function 9 { jump_optimize }	{ GET_CODE NEXT_INSN rtx }
no_line_numbers		emit-rtl.c	/^static int no_line_numbers;/ ;" global 1 { emit_line_note emit_note init_emit }	{ }
node_has_high_bound		stmt.c	/^node_has_high_bound (node)/ ;" function 24 { emit_case_nodes node_is_bounded }	{ build_int_2 case_node_ptr combine tree tree_int_cst_equal tree_int_cst_lt }
node_has_low_bound		stmt.c	/^node_has_low_bound (node)/ ;" function 24 { emit_case_nodes node_is_bounded }	{ build_int_2 case_node_ptr combine tree tree_int_cst_equal tree_int_cst_lt }
node_is_bounded		stmt.c	/^node_is_bounded (node)/ ;" function 7 { emit_case_nodes }	{ node_has_high_bound node_has_low_bound }
nonempty_type_quals		objc-parse.y	/^nonempty_type_quals:/ ;" yacctoken 1 { }	{ }
nonimmediate_operand		recog.c	/^nonimmediate_operand (op, mode)/ ;" function 7 { }	{ CONSTANT_P GET_CODE general_operand }
nonmemory_operand		recog.c	/^nonmemory_operand (op, mode)/ ;" function 28 { }	{ CONSTANT_P GET_CODE GET_MODE SUBREG_REG general_operand reload_completed }
nonnull_asm_operands		objc-parse.y	/^nonnull_asm_operands:/ ;" yacctoken 1 { }	{ }
nonnull_exprlist		objc-parse.y	/^nonnull_exprlist:/ ;" yacctoken 1 { }	{ }
note_addr_stored		loop.c	/^note_addr_stored (x)/ ;" function 44 { verify_loop }	{ GET_CODE GET_MODE GET_MODE_SIZE MEM_IN_STRUCT_P NUM_STORES XEXP fixed_aggregate_altered loop_store_addrs loop_store_addrs_idx loop_store_widths num_mem_sets rtx rtx_addr_varies_p rtx_equal_p unknown_address_altered unknown_aggregate_altered }
note_insn_name		rtl.c	/^char *note_insn_name[] = { "NOTE_INSN_FUNCTION_BEG/ ;" global 5 { GET_NOTE_INSN_NAME }	{ }
note_mem_written		cse.c	/^note_mem_written (written, writes_ptr)/ ;" function 32 { cse_insn }	{ GET_CODE GET_MODE MEM_IN_STRUCT_P REGNO XEXP cse_rtx_addr_varies_p rtx write_data }
note_stores		rtlanal.c	/^note_stores (x, fun)/ ;" function 33 { block_alloc emit_reload_insns global_conflicts reg_set_p reload_as_needed save_call_clobbered_regs verify_loop }	{ GET_CODE SET_DEST XEXP XVECEXP XVECLEN rtx }
notype_declarator		objc-parse.y	/^notype_declarator:/ ;" yacctoken 1 { }	{ }
notype_initdcl		objc-parse.y	/^notype_initdcl:/ ;" yacctoken 1 { }	{ }
notype_initdecls		objc-parse.y	/^notype_initdecls:/ ;" yacctoken 1 { }	{ }
nreverse		tree.c	/^nreverse (t)/ ;" function 12 { build_category_initializer build_dispatch_table_initializer build_ivar_list_initializer build_selector_translation_table build_shared_structure_initializer generate_dispatch_table generate_ivars_list get_parm_info init_def_list init_module_descriptor init_objc_symtab poplevel process_init_constructor sdbout_init sdbout_symbol store_parm_decls }	{ TREE_CHAIN decl tree }
nst_method_hash_list		objc-actions.c	/^static hash *nst_method_hash_list = 0;/ ;" global 1 { add_instance_method build_message_expr finish_objc hash_init objc_debug }	{ }
null_pointer_node		c-decl.c	/^tree null_pointer_node;/ ;" global 1 { build_binary_op_nodefault build_conditional_expr convert_for_assignment convert_to_pointer init_decl_processing }	{ }
num_mem_sets		loop.c	/^static int num_mem_sets;/ ;" global 1 { check_dbra_loop note_addr_stored verify_loop }	{ }
num_movables		loop.c	/^static int num_movables;/ ;" global 1 { check_dbra_loop move_movables }	{ }
oballoc		tree.c	/^oballoc (size)/ ;" function 5 { allocate_for_life_analysis assign_parms consec_sets_giv expand_fixup expand_label find_mem_givs flow_analysis gen_reg_rtx get_element init_emit local_alloc pushcase pushcase_range reg_scan regclass restore_reg_data_1 simplify_and_const_int simplify_set_cc0_and stupid_life_analysis subst try_combine type_hash_add }	{ current_obstack }
obey_regdecls		toplev.c	/^int obey_regdecls = 0;/ ;" global 1 { Mtoplev assign_parms do_pragma expand_decl expand_end_bindings expand_function_end expand_function_start rest_of_compilation save_call_clobbered_regs }	{ }
obfree		tree.c	/^obfree (ptr)/ ;" function 5 { regclass undo_all }	{ current_obstack }
objc_category_template		objc-actions.c	/^static tree objc_class_template, objc_category_tem/ ;" global 1 { build_category_template forward_declare_categories generate_category generate_objc_symtab_decl }	{ }
objc_check_decl		objc-actions.c	/^void objc_check_decl(tree aDecl)/ ;" function 15 { rest_of_decl_compilation }	{ TREE_CODE TREE_STATIC_TEMPLATE TREE_TYPE error error_with_decl tree type }
objc_class_template		objc-actions.c	/^static tree objc_class_template, objc_category_tem/ ;" global 1 { build_class_template continue_class generate_ivar_lists generate_shared_structures synth_forward_declarations }	{ }
objc_comptypes		objc-actions.c	/^int objc_comptypes(tree lhs, tree rhs)/ ;" function 37 { comptypes }	{ TYPED_OBJECT TYPE_NAME lookup_interface objc_object_id tree }
objc_copy_list		objc-actions.c	/^static tree objc_copy_list(tree list, tree *head)/ ;" function 24 { build_ivar_chain }	{ DECL_INITIAL DECL_SIZE_UNIT NULL_TREE TREE_CHAIN TREE_PACKED build_int_2 chainon copy_node tree }
objc_debug		objc-actions.c	/^static void objc_debug(FILE *fp)/ ;" function 63 { }	{ BUFSIZE DECL_INITIAL IDENTIFIER_LENGTH IDENTIFIER_POINTER SIZEHASHTABLE TREE_CHAIN TREE_CODE TREE_VALUE _OBJC_MODULES_decl cls_method_hash_list errbuf genDeclaration genMethodDecl hash max_selector_index nst_method_hash_list sel_refdef_chain tree }
objc_getClass_decl		objc-actions.c	/^static tree objc_getClass_decl, objc_getMetaClass_/ ;" global 1 { get_class_reference get_super_receiver receiver_is_class_object synth_module_prologue }	{ }
objc_getClass_id		objc-actions.c	/^static tree objc_getClass_id, objc_getMetaClass_id/ ;" global 1 { synth_module_prologue }	{ }
objc_getMetaClass_decl		objc-actions.c	/^static tree objc_getClass_decl, objc_getMetaClass_/ ;" global 1 { get_super_receiver synth_module_prologue }	{ }
objc_getMetaClass_id		objc-actions.c	/^static tree objc_getClass_id, objc_getMetaClass_id/ ;" global 1 { synth_module_prologue }	{ }
objc_ivar_template		objc-actions.c	/^static tree objc_method_template, objc_ivar_templa/ ;" global 1 { generate_ivar_lists }	{ }
objc_method_template		objc-actions.c	/^static tree objc_method_template, objc_ivar_templa/ ;" global 1 { generate_dispatch_tables }	{ }
objc_module_template		objc-actions.c	/^static tree objc_symtab_template, objc_module_temp/ ;" global 1 { build_module_descriptor init_module_descriptor }	{ }
objc_object_id		objc-actions.c	/^static tree objc_object_id, _OBJC_SELECTOR_REFEREN/ ;" global 1 { objc_comptypes synth_module_prologue }	{ }
objc_object_reference		objc-actions.c	/^static tree objc_super_template, objc_object_refer/ ;" global 1 { build_keyword_decl build_method_decl build_super_template finish_class genMethodDecl is_public start_method_def synth_module_prologue }	{ }
objc_selector_template		objc-actions.c	/^static tree objc_selector_template;/ ;" global 1 { build_objc_selector_template }	{ }
objc_super_template		objc-actions.c	/^static tree objc_super_template, objc_object_refer/ ;" global 1 { add_objc_decls start_class }	{ }
objc_symtab_template		objc-actions.c	/^static tree objc_symtab_template, objc_module_temp/ ;" global 1 { build_objc_symtab_template generate_objc_symtab_decl }	{ }
objc_tree_class_type		tree.h	/^struct objc_tree_class_type/ ;" struct 13 { copy_node make_node }	{ }
objc_tree_keyword_decl		tree.h	/^struct objc_tree_keyword_decl/ ;" struct 7 { copy_node make_node }	{ }
objc_tree_method_decl		tree.h	/^struct objc_tree_method_decl/ ;" struct 11 { copy_node make_node }	{ }
objcdef		objc-parse.y	/^objcdef:/ ;" yacctoken 1 { }	{ }
objcencodeexpr		objc-parse.y	/^objcencodeexpr:/ ;" yacctoken 1 { }	{ }
objcmessageexpr		objc-parse.y	/^objcmessageexpr:/ ;" yacctoken 1 { }	{ }
objcselectorexpr		objc-parse.y	/^objcselectorexpr:/ ;" yacctoken 1 { }	{ }
obstack_chunk_alloc		tree.c	/^#define obstack_chunk_alloc xmalloc/ ;" macro 1 { }	{ xmalloc }
obstack_chunk_free		tree.c	/^#define obstack_chunk_free free/ ;" macro 1 { }	{ }
obstack_code_name		tree.c	/^char *obstack_code_name[] =/ ;" global 7 { Mtoplev }	{ }
offsettable_address_p		recog.c	/^offsettable_address_p (strictp, mode, y)/ ;" function 41 { offsettable_memref_p optimize_bit_field }	{ GET_CODE GET_MODE_SIZE INTVAL find_constant_term_loc memory_address_p plus_constant rtx rtx_code strict_memory_address_p }
offsettable_memref_p		recog.c	/^offsettable_memref_p (op)/ ;" function 6 { constrain_operands find_reloads fixup_var_refs_1 output_move_double }	{ GET_CODE GET_MODE XEXP offsettable_address_p }
old_max_reg		loop.c	/^static int old_max_reg;/ ;" global 1 { loop_optimize scan_loop strength_reduce }	{ }
one_cmpl_optab		optabs.c	/^optab one_cmpl_optab;/ ;" global 1 { convert_move expand_expr init_optabs }	{ }
only_reg_use_p		loop.c	/^only_reg_use_p (reg, expr, in)/ ;" function 52 { check_eliminate_biv only_reg_use_p }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO XEXP XVECEXP XVECLEN expr only_reg_use_p rtx_code }
operand_equal_p		fold-const.c	/^operand_equal_p (arg0, arg1)/ ;" function 18 { fold }	{ TREE_CODE TREE_OPERAND TREE_TYPE TYPE_MODE }
operands_match_p		reload.c	/^operands_match_p (x, y)/ ;" function 107 { constrain_operands find_reloads operands_match_p }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO RTX_CODE SUBREG_REG SUBREG_WORD XEXP XINT XSTR operands_match_p }
optab		expr.h	/^typedef struct optab/ ;" struct 9 { expand_expr expand_increment force_operand init_optab sign_expand_binop }	{ }
optab_methods		expr.h	/^enum optab_methods/ ;" struct 9 { expand_shift }	{ }
optarglist		objc-parse.y	/^optarglist:/ ;" yacctoken 1 { }	{ }
optimize		toplev.c	/^int optimize = 0;/ ;" global 1 { Mtoplev copy_rtx_and_substitute default_conversion delete_insn digest_init do_pragma emit_nop emit_reload_insns expand_end_loop expand_expr expand_function_start expand_return final final_scan_insn find_reloads init_function_start jump_optimize memory_address prepare_call_address regclass rest_of_compilation }	{ }
optimize_bit_field		stmt.c	/^optimize_bit_field (body, insn, equiv_mem)/ ;" function 127 { fixup_var_refs_1 reload }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE INSN_CODE INTVAL MIN NEXT_INSN PREV_INSN SET_DEST SET_SRC SUBREG_REG SUBREG_WORD XEXP adj_offsettable_operand convert_move gen_lowpart gen_reg_rtx gen_rtx get_last_insn mode_dependent_address_p offsettable_address_p reorder_insns rtx }
optparmlist		objc-parse.y	/^optparmlist:/ ;" yacctoken 1 { }	{ }
order_regs_for_reload		reload1.c	/^order_regs_for_reload ()/ ;" function 83 { reload }	{ call_used_regs fixed_regs hard_reg_n_uses hard_reg_use_compare max_regno potential_reload_regs reg_alloc_order reg_n_refs reg_renumber regs_ever_live regs_explicitly_used }
orig_asm_operands_vector		integrate.c	/^static rtvec orig_asm_operands_vector;/ ;" global 1 { copy_for_inline copy_rtx_and_substitute expand_inline_function save_for_inline }	{ }
outfile		print-tree.c	/^static FILE *outfile;/ ;" global 1 { cpart debug_rtx dump dump_tree part prdeclmodeinfo print_rtl print_rtx prtypeinfo prtypemodeinfo skip wruid }	{ }
output_addr_const		final.c	/^output_addr_const (file, x)/ ;" function 75 { PUT_SDB_VAL dbxout_finish_symbol output_addr_const output_asm_insn }	{ CODE_LABEL_NUMBER CONST_DOUBLE_HIGH CONST_DOUBLE_LOW GET_CODE GET_MODE INTVAL XEXP XSTR asm_out_file assemble_name output_addr_const output_operand_lossage }
output_address		final.c	/^output_address (x)/ ;" function 6 { find_reloads output_asm_insn }	{ asm_out_file walk_alter_subreg }
output_addressed_constants		varasm.c	/^output_addressed_constants (exp)/ ;" function 48 { assemble_variable get_or_assign_label output_addressed_constants }	{ CONSTRUCTOR_ELTS TREE_CHAIN TREE_CODE TREE_LITERAL TREE_OPERAND TREE_VALUE output_addressed_constants output_constant_def tree }
output_asm_insn		final.c	/^output_asm_insn (template, operands)/ ;" function 109 { final_scan_insn output_move_double }	{ GET_CODE INTVAL asm_out_file insn_noperands output_addr_const output_address output_asm_label output_operand output_operand_lossage this_is_asm_operands }
output_asm_label		final.c	/^output_asm_label (x)/ ;" function 14 { output_asm_insn }	{ CODE_LABEL_NUMBER GET_CODE XEXP asm_out_file assemble_name output_operand_lossage }
output_btst		aux-output.c	/^output_btst (operands, countop, dataop, insn, sign/ ;" function 39 { }	{ CC_NOT_NEGATIVE CC_NOT_POSITIVE CC_Z_IN_NOT_N GET_CODE INTVAL adj_offsettable_operand cc_status next_insns_test_no_inequality }
output_constant		varasm.c	/^output_constant (exp, size)/ ;" function 144 { assemble_variable get_or_assign_label output_constant output_constructor }	{ ASM_OUTPUT_DOUBLE ASM_OUTPUT_FLOAT TREE_CODE TREE_IMAGPART TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_OPERAND TREE_REALPART TREE_REAL_CST TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE TYPE_MODE asm_out_file assemble_string error expand_expr gen_rtx output_constant output_constructor rtx tree_code }
output_constant_def		varasm.c	/^output_constant_def (exp)/ ;" function 26 { expand_expr output_addressed_constants }	{ RTX_UNCHANGING_P TREE_CODE TREE_CST_RTL TREE_PERMANENT TREE_TYPE TYPE_MODE allocation_temporary_p end_temporary_allocation gen_rtx get_or_assign_label resume_temporary_allocation rtx }
output_constructor		varasm.c	/^output_constructor (exp, size)/ ;" function 171 { output_constant }	{ CONSTRUCTOR_ELTS DECL_MODE DECL_NAME DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT HOST_BITS_PER_INT IDENTIFIER_POINTER MIN TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_OPERAND TREE_TYPE TREE_VALUE TYPE_FIELDS asm_out_file error int_size_in_bytes output_constant tree }
output_inline_function		integrate.c	/^output_inline_function (fndecl)/ ;" function 35 { compile_file }	{ DECL_FRAME_SIZE DECL_SAVED_INSNS DECL_SOURCE_FILE DECL_SOURCE_LINE FIRST_PARM_INSN NEXT_INSN XEXP assign_stack_local current_function_decl expand_function_end init_function_start permanent_allocation rest_of_compilation restore_reg_data rtx set_new_first_and_last_insn stack_slot_list temporary_allocation }
output_move_const_double		aux-output.c	/^output_move_const_double (operands)/ ;" function 30 { }	{ standard_68881_constant_p standard_sun_fpa_constant_p }
output_move_const_single		aux-output.c	/^output_move_const_single (operands)/ ;" function 30 { }	{ standard_68881_constant_p standard_sun_fpa_constant_p }
output_move_double		aux-output.c	/^output_move_double (operands)/ ;" function 168 { }	{ CONSTANT_P CONST_DOUBLE_HIGH CONST_DOUBLE_LOW GET_CODE REGNO REG_P XEXP adj_offsettable_operand const0_rtx find_addr_reg gen_rtx offsettable_memref_p output_asm_insn reg_overlap_mentioned_p rtx singlemove_string stack_pointer_rtx }
output_operand		final.c	/^output_operand (x, code)/ ;" function 8 { output_asm_insn }	{ GET_CODE alter_subreg asm_out_file }
output_operand_lossage		final.c	/^output_operand_lossage (str)/ ;" function 8 { output_addr_const output_asm_insn output_asm_label }	{ error_for_asm this_is_asm_operands }
output_reloadnum		reload.c	/^static int output_reloadnum;/ ;" global 1 { find_reloads push_reload }	{ }
output_source_line		final.c	/^output_source_line (file, insn, write_symbols)/ ;" function 71 { final_scan_insn final_start_function }	{ NOTE_LINE_NUMBER NOTE_SOURCE_FILE N_SLINE N_SOL current_gdbfile last_linenum lastfile main_input_filename sdb_begin_function_line set_current_gdbfile write_symbols }
parm		objc-parse.y	/^parm:/ ;" yacctoken 1 { actualparameterlist assign_parms build_tree_list grokparms push_parm_decl store_parm_decls }	{ }
parm_birth_insn		stmt.c	/^static rtx parm_birth_insn;/ ;" global 1 { expand_function_end expand_function_start }	{ }
parm_declarator		objc-parse.y	/^parm_declarator:/ ;" yacctoken 1 { }	{ }
parm_map		integrate.c	/^static rtx *parm_map;/ ;" global 1 { access_parm_map expand_inline_function }	{ }
parm_reg_stack_loc		stmt.c	/^static rtx *parm_reg_stack_loc;/ ;" global 1 { assign_parms parm_stack_loc }	{ }
parm_stack_loc		stmt.c	/^parm_stack_loc (reg)/ ;" function 7 { put_var_into_stack }	{ REGNO max_parm_reg parm_reg_stack_loc }
parmdecl_map		integrate.c	/^static tree *parmdecl_map;/ ;" global 1 { copy_for_inline save_for_inline }	{ }
parmlist		objc-parse.y	/^parmlist:/ ;" yacctoken 1 { continue_method_def reallyStartMethod }	{ }
parmlist_1		objc-parse.y	/^parmlist_1:/ ;" yacctoken 1 { }	{ }
parmlist_2		objc-parse.y	/^parmlist_2:  \/* empty *\// ;" yacctoken 1 { }	{ }
parmlist_or_identifiers		objc-parse.y	/^parmlist_or_identifiers:/ ;" yacctoken 1 { }	{ }
parmlist_or_identifiers_1		objc-parse.y	/^parmlist_or_identifiers_1:/ ;" yacctoken 1 { }	{ }
parmlist_tags_warning		c-decl.c	/^parmlist_tags_warning ()/ ;" function 21 { }	{ IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_VALUE current_binding_level tree tree_code warning }
parms		objc-parse.y	/^parms:/ ;" yacctoken 1 { build_method_template compparms1 dbxout_parms dbxout_reg_parms expand_inline_function function_cannot_inline_p get_parm_info save_for_inline sdbout_parms sdbout_reg_parms synth_module_prologue }	{ }
parse_time		toplev.c	/^int parse_time;/ ;" global 1 { compile_file rest_of_compilation }	{ }
part		print-tree.c	/^part (title, node)/ ;" function 8 { dump prtypeinfo save_noncopied_parts }	{ outfile wruid }
pc_rtx		emit-rtl.c	/^rtx pc_rtx;			\/* (PC) *\// ;" global 1 { check_dbra_loop classify_insn condjump_p cse_insn expand_end_loop final_scan_insn init_emit_once jump_back_p predecide_loop_entry try_fold_cc0 }	{ }
pedantic		toplev.c	/^int pedantic = 0;/ ;" global 1 { Mtoplev assemble_variable build_array_ref build_binary_op_nodefault build_c_cast build_conditional_expr build_modify_expr build_unary_op c_expand_return c_sizeof check_newline comptypes convert_for_assignment decl_constant_value digest_init duplicate_decls finish_decl finish_struct grokdeclarator make_decl_rtl pointer_diff pointer_int_sum start_decl store_init_value unary_complex_lvalue xref_tag yylex }	{ }
pending_blocks		final.c	/^static int *pending_blocks;/ ;" global 1 { final_end_function final_scan_insn final_start_function init_final }	{ }
pending_chain		expr.c	/^static rtx pending_chain;/ ;" global 1 { emit_queue enqueue_insn init_queue }	{ }
pending_sizes		stor-layout.c	/^static tree pending_sizes;/ ;" global 1 { get_pending_sizes variable_size }	{ }
pending_stack_adjust		expr.c	/^int pending_stack_adjust;/ ;" global 1 { clear_pending_stack_adjust do_pending_stack_adjust emit_call_1 expand_call init_pending_stack_adjust }	{ }
perm_tree_cons		tree.c	/^perm_tree_cons (purpose, value, chain)/ ;" function 15 { add_class_reference add_objc_string add_selector_reference pushtag symout_types }	{ TREE_CHAIN TREE_PURPOSE TREE_VALUE current_obstack make_node permanent_obstack tree }
permalloc		tree.c	/^permalloc (size)/ ;" function 5 { check_newline gen_fake_label set_current_gdbfile }	{ permanent_obstack }
permanent_allocation		tree.c	/^permanent_allocation ()/ ;" function 11 { finish_decl finish_function output_inline_function }	{ current_obstack expression_obstack maybepermanent_firstobj maybepermanent_obstack momentary_firstobj momentary_obstack permanent_obstack rtl_obstack saveable_obstack temporary_firstobj temporary_obstack }
permanent_fwd_refs		symout.c	/^static tree permanent_fwd_refs;/ ;" global 1 { symout_finish symout_init symout_types }	{ }
permanent_obstack		tree.c	/^struct obstack permanent_obstack;/ ;" global 1 { Mtoplev build_pointer_type build_reference_type build_type_variant comp_method_with_proto comp_proto_with_proto copy_node end_temporary_allocation force_const_mem get_identifier get_obstack_code get_or_assign_label init_tree make_node perm_tree_cons permalloc permanent_allocation record_constant record_constant_1 type_hash_canon }	{ }
permanent_type_chain		stor-layout.c	/^tree permanent_type_chain;/ ;" global 1 { chain_type get_permanent_types }	{ }
permanent_type_end		stor-layout.c	/^tree permanent_type_end;/ ;" global 1 { chain_type get_permanent_types }	{ }
pfatal_with_name		toplev.c	/^pfatal_with_name (name)/ ;" function 7 { compile_file symout_finish symout_init }	{ progname }
pipe_closed		toplev.c	/^pipe_closed ()/ ;" function 4 { Mtoplev }	{ fatal }
plain_type		sdbout.c	/^plain_type (type)/ ;" function 14 { plain_type_1 sdbout_parms sdbout_reg_parms sdbout_symbol sdbout_type }	{ PUT_SDB_SIZE TREE_CODE int_size_in_bytes plain_type_1 type }
plain_type_1		sdbout.c	/^plain_type_1 (type)/ ;" function 81 { plain_type }	{ KNOWN_TYPE_TAG PUSH_DERIVED_LEVEL PUT_SDB_DIM PUT_SDB_SIZE PUT_SDB_TAG TREE_ASM_WRITTEN TREE_CODE TREE_INT_CST_LOW TREE_TYPE TREE_UNSIGNED TYPE_DOMAIN TYPE_MAIN_VARIANT TYPE_MAX_VALUE error_mark_node int_size_in_bytes integer_type_node plain_type sdbout_record_type_name type void_type_node }
plus_constant		explow.c	/^plus_constant (x, c)/ ;" function 82 { ARGS_SIZE_RTX access_parm_map adj_offsettable_operand alter_subreg assign_parms copy_address copy_rtx_and_substitute emit_move_insn emit_mult_restore emit_mult_save emit_push_insn expand_builtin expand_decl expand_divmod expand_expr expand_inline_function extract_bit_field extract_fixed_bit_field extract_split_bit_field find_reloads_toplev fixup_memory_subreg fold_rtx gen_highpart gen_lowpart gen_lowpart_for_combine memory_address move_block_from_reg move_block_to_reg move_by_pieces move_by_pieces_1 offsettable_address_p plus_constant push_block reload store_bit_field store_field store_fixed_bit_field store_one_arg store_split_bit_field subst target_for_arg use_related_value }	{ CONSTANT_P GET_CODE GET_MODE INTVAL RTX_CODE XEXP gen_rtx machine_mode plus_constant }
pointer_diff		c-typeck.c	/^pointer_diff (op0, op1)/ ;" function 32 { build_binary_op_nodefault }	{ TREE_CODE TREE_LITERAL TREE_TYPE build build_binary_op c_sizeof_nowarn convert datatype fold pedantic tree tree_code type_for_size warning }
pointer_int_sum		c-typeck.c	/^pointer_int_sum (resultcode, ptrop, intop)/ ;" function 65 { build_binary_op_nodefault }	{ TREE_CODE TREE_LITERAL TREE_OPERAND TREE_TYPE TYPE_PRECISION build build_binary_op c_sizeof convert datatype fold integer_one_node pedantic tree tree_code type_for_size warn_pointer_arith warning }
pop_momentary		tree.c	/^pop_momentary ()/ ;" function 7 { }	{ expression_obstack momentary_level momentary_obstack momentary_stack }
poplevel		c-decl.c	/^poplevel (keep, reverse, functionbody)/ ;" function 151 { continue_method_def copy_decl_tree expand_inline_function finish_function synth_module_prologue }	{ DECL_CONTEXT DECL_INITIAL DECL_NAME DECL_SOURCE_LINE IDENTIFIER_LABEL_VALUE IDENTIFIER_LOCAL_VALUE IDENTIFIER_POINTER STMT_SUPERCONTEXT STMT_VARS TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_PURPOSE TREE_USED TREE_VALUE TYPE_NAME TYPE_SIZE binding_level block build_let chainon current_binding_level current_function_decl decls define_label error free_binding_level input_filename named_labels nreverse tree type warn_unused warning_with_decl }
post_mark_life		local-alloc.c	/^post_mark_life (regno, mode, life, birth, death)/ ;" function 34 { find_free_reg wipe_dead_reg }	{ AND_COMPL_HARD_REG_SET CLEAR_HARD_REG_SET HARD_REG_SET IOR_HARD_REG_SET SET_HARD_REG_BIT regs_live_at }
potential_reload_regs		reload1.c	/^static short potential_reload_regs[FIRST_PSEUDO_RE/ ;" global 1 { new_spill_reg order_regs_for_reload reload }	{ }
prdeclmodeinfo		print-tree.c	/^prdeclmodeinfo (node)/ ;" function 11 { dump }	{ DECL_ALIGN DECL_MODE DECL_SIZE DECL_SIZE_UNIT cpart machine_mode mode_name outfile }
predecide_loop_entry		cse.c	/^predecide_loop_entry (insn)/ ;" function 105 { cse_basic_block }	{ GET_CODE GET_MODE NEXT_INSN NOTE_INSN_LOOP_END NOTE_LINE_NUMBER PATTERN SET_DEST SET_SRC XEXP cc0_rtx copy_rtx delete_insn emit_label_after fold_cc0 fold_rtx gen_label_rtx pc_rtx prev_insn_cc0 prev_insn_explicit_cc0 redirect_jump rtx }
preexpand_calls		expr.c	/^preexpand_calls (exp)/ ;" function 59 { expand_expr preexpand_calls }	{ CALL_EXPR_RTL DECL_FUNCTION_CODE RETURN_IN_MEMORY SAVE_EXPR_RTL TREE_CODE TREE_OPERAND TREE_TYPE TYPE_MODE do_pending_stack_adjust do_preexpand_calls expand_call preexpand_calls tree_code_length tree_code_type type }
prefclass		regclass.c	/^static char *prefclass;/ ;" global 1 { reg_preferred_class reg_preferred_or_nothing regclass regclass_init }	{ }
preferred_or_nothing		regclass.c	/^static char *preferred_or_nothing;/ ;" global 1 { reg_preferred_or_nothing regclass }	{ }
prepare_call_address		expr.c	/^prepare_call_address (funexp, context)/ ;" function 38 { emit_library_call expand_call }	{ GET_CODE GET_MODE emit_insn emit_move_insn flag_no_function_cse force_reg gen_highpart gen_lowpart gen_rtx lookup_static_chain memory_address optimize protect_from_queue static_chain_rtx }
preserve_data		tree.c	/^preserve_data ()/ ;" function 5 { save_for_inline }	{ maybepermanent_firstobj maybepermanent_obstack }
prev_insn		cse.c	/^static rtx prev_insn;/ ;" global 1 { cse_insn do_store_flag emit_unop_insn new_basic_block }	{ }
prev_insn_cc0		cse.c	/^static int prev_insn_cc0;/ ;" global 1 { cse_insn fold_rtx new_basic_block predecide_loop_entry }	{ }
prev_insn_explicit_cc0		cse.c	/^static rtx prev_insn_explicit_cc0;/ ;" global 1 { cse_insn fold_rtx new_basic_block predecide_loop_entry }	{ }
prev_real_insn		jump.c	/^prev_real_insn (label)/ ;" function 18 { emit_nop find_cross_jump jump_back_p jump_optimize loop_skip_over regclass }	{ GET_CODE PREV_INSN RTX_CODE rtx }
previous_insn		emit-rtl.c	/^previous_insn (insn)/ ;" function 6 { }	{ PREV_INSN }
primary		objc-parse.y	/^primary:/ ;" yacctoken 1 { }	{ }
print_rtl		rtl.c	/^print_rtl (outf, rtx_first)/ ;" function 28 { dump record_giv rest_of_compilation strength_reduce }	{ GET_CODE NEXT_INSN NULL outfile print_rtx rtx sawclose }
print_rtx		rtl.c	/^print_rtx (in_rtx)/ ;" function 133 { debug_rtx print_rtl print_rtx }	{ GET_CODE GET_MODE GET_MODE_NAME GET_NOTE_INSN_NAME GET_REG_NOTE_NAME GET_RTX_FORMAT GET_RTX_LENGTH GET_RTX_NAME INSN_UID NULL XEXP XINT XSTR XVEC XVECEXP XVECLEN outfile print_rtx sawclose spaces }
print_target_switch_defaults		toplev.c	/^print_target_switch_defaults ()/ ;" function 14 { Mtoplev }	{ TARGET_DEFAULT target_switches }
print_time		toplev.c	/^print_time (str, total)/ ;" function 8 { compile_file }	{ }
process_init_constructor		c-typeck.c	/^process_init_constructor (type, init, elts)/ ;" function 121 { digest_init }	{ CONSTRUCTOR_ELTS DECL_NAME NULL NULL_TREE TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_LITERAL TREE_STATIC TREE_TYPE TREE_VALUE TYPE_DOMAIN TYPE_FIELDS TYPE_MAIN_VARIANT TYPE_MAX_VALUE TYPE_MIN_VALUE build digest_init error error_mark_node init initializer_constant_valid_p integer_zero_node nreverse tree tree_cons type warning }
product_cheap_p		loop.c	/^product_cheap_p (biv_add, giv_mult)/ ;" function 53 { strength_reduce }	{ GET_CODE GET_MODE INTVAL SET_SRC XVECLEN gen_iv_mult rtx }
profile_block_flag		toplev.c	/^int profile_block_flag;/ ;" global 1 { Mtoplev end_final final_scan_insn final_start_function }	{ }
profile_flag		toplev.c	/^int profile_flag = 0;/ ;" global 1 { Mtoplev final_start_function }	{ }
profile_label_no		final.c	/^int profile_label_no;/ ;" global 1 { final_start_function }	{ }
progname		toplev.c	/^char *progname;/ ;" global 1 { Mtoplev error_with_file_and_line fatal_io_error pfatal_with_name sorry warning_with_file_and_line }	{ }
program		objc-parse.y	/^program: \/* empty *\// ;" yacctoken 1 { }	{ }
propagate_block		flow.c	/^propagate_block (old, first, last, final, signific/ ;" function 263 { life_analysis }	{ GET_CODE INSN_DELETED_P INSN_VOLATILE NEXT_INSN NOTE_INSN_DELETED NOTE_INSN_SETJMP NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PREV_INSN PUT_CODE REGSET_ELT_BITS REG_BLOCK_GLOBAL SET_DEST SET_SRC XEXP alloca basic_block_loop_depth call_used_regs final find_reg_note insn_dead_p libcall_dead_p loop_depth mark_set_regs mark_used_regs max_regno reg_basic_block reg_live_length reg_n_calls_crossed regs_live_at_setjmp regset regset_bytes regset_size rtx stack_pointer_rtx try_pre_increment_1 }
protect_from_queue		expr.c	/^protect_from_queue (x, modify)/ ;" function 49 { adjust_stack anti_adjust_stack convert_move emit_block_move emit_cmp_insn emit_move_insn emit_push_insn emit_unop_insn expand_asm_operands expand_binop expand_end_case expand_expr expand_fix expand_float expand_shift expand_twoval_binop expand_unop extract_bit_field prepare_call_address protect_from_queue store_bit_field store_expr }	{ GET_CODE GET_MODE QUEUED_COPY QUEUED_INSN QUEUED_VAR RTX_CODE XEXP emit_insn_before gen_move_insn gen_reg_rtx protect_from_queue rtx }
prtypeinfo		print-tree.c	/^prtypeinfo (node)/ ;" function 130 { dump }	{ TREE_ADDRESSABLE TREE_ASM_WRITTEN TREE_EXTERNAL TREE_INLINE TREE_LANG_FLAG_1 TREE_LANG_FLAG_2 TREE_LANG_FLAG_3 TREE_LANG_FLAG_4 TREE_LITERAL TREE_NONLOCAL TREE_PACKED TREE_PERMANENT TREE_PUBLIC TREE_READONLY TREE_REGDECL TREE_STATIC TREE_THIS_VOLATILE TREE_TYPE TREE_UNSIGNED TREE_USED TREE_VOLATILE outfile part }
prtypemodeinfo		print-tree.c	/^prtypemodeinfo (node)/ ;" function 11 { dump }	{ TYPE_ALIGN TYPE_MODE TYPE_SIZE TYPE_SIZE_UNIT cpart machine_mode mode_name outfile }
ptr_type_node		c-decl.c	/^tree ptr_type_node;/ ;" global 1 { init_decl_processing }	{ }
push_block		expr.c	/^push_block (size)/ ;" function 25 { emit_library_call emit_push_insn expand_call }	{ CONSTANT_P GET_CODE anti_adjust_stack copy_to_mode_reg force_operand gen_rtx memory_address negate_rtx plus_constant rtx stack_pointer_rtx }
push_momentary		tree.c	/^push_momentary ()/ ;" function 11 { }	{ expression_obstack momentary_level momentary_obstack momentary_stack }
push_operand		recog.c	/^push_operand (op, mode)/ ;" function 21 { eliminate_frame_pointer find_equiv_reg }	{ GET_CODE GET_MODE XEXP stack_pointer_rtx }
push_parm_decl		c-decl.c	/^push_parm_decl (parm)/ ;" function 9 { start_method_def synth_module_prologue }	{ NULL_TREE TREE_PURPOSE TREE_VALUE decl finish_decl grokdeclarator parm pushdecl tree }
push_reload		reload.c	/^push_reload (in, out, inloc, outloc, class,/ ;" function 256 { find_reloads find_reloads_address find_reloads_address_1 }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE MATCHES PATTERN REGNO SUBREG_REG XEXP find_dummy_reload find_equiv_reg find_inc_amount gen_rtx n_reloads output_reloadnum reg_equiv_constant reg_overlap_mentioned_p reg_renumber reload_in reload_in_reg reload_inc reload_inmode reload_needed_for reload_needed_for_multiple reload_nocombine reload_optional reload_out reload_outmode reload_reg_class reload_reg_rtx reload_strict_low replace_reloads replacement replacements rtx_equal_p sets_cc0_p static_reload_reg_p this_insn }
push_replacement		reload.c	/^push_replacement (loc, reloadnum, mode)/ ;" function 13 { find_reloads find_reloads_address_1 }	{ replace_reloads replacement replacements }
push_to_sequence		emit-rtl.c	/^push_to_sequence (first)/ ;" function 12 { fixup_var_refs }	{ NEXT_INSN first_insn gen_rtx last_insn rtx sequence_stack }
pushcase		stmt.c	/^pushcase (value, label)/ ;" function 69 { pushcase_range }	{ TREE_TYPE case_node case_stack convert copy_node error_mark_node expand_label int_fits_type_p oballoc tree tree_int_cst_lt }
pushcase_range		stmt.c	/^pushcase_range (value1, value2, label)/ ;" function 76 { }	{ TREE_TYPE case_node case_stack convert copy_node error_mark_node expand_label int_fits_type_p oballoc pushcase tree tree_int_cst_equal tree_int_cst_lt }
pushdecl		c-decl.c	/^pushdecl (x)/ ;" function 196 { build_enumerator builtin_function copy_decl_tree copy_parm_decls implicitly_declare init_decl_processing push_parm_decl start_decl start_function start_method_def store_parm_decls }	{ DECL_FUNCTION_CODE DECL_NAME DECL_SOURCE_FILE DECL_SOURCE_LINE IDENTIFIER_GLOBAL_VALUE IDENTIFIER_IMPLICIT_DECL IDENTIFIER_LOCAL_VALUE IDENTIFIER_POINTER TREE_ADDRESSABLE TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_INLINE TREE_PUBLIC TREE_TYPE TREE_USED TYPE_ARG_TYPES TYPE_NAME TYPE_SIZE binding_level comptypes current_binding_level duplicate_decls error_mark_node error_with_decl flag_traditional global_binding_level integer_type_node line lookup_name lookup_name_current_level tree tree_cons warn_shadow warning warning_with_decl warning_with_file_and_line }
pushlevel		c-decl.c	/^pushlevel (tag_transparent)/ ;" function 39 { copy_decl_tree expand_inline_function init_decl_processing start_function start_method_def synth_module_prologue }	{ NULL_BINDING_LEVEL binding_level clear_binding_level current_binding_level free_binding_level global_binding_level keep_next_if_subblocks keep_next_level_flag make_binding_level named_labels }
pushtag		c-decl.c	/^pushtag (name, type)/ ;" function 19 { shadow_tag start_enum start_struct xref_tag }	{ TYPE_NAME binding_level current_binding_level global_binding_level perm_tree_cons saveable_tree_cons type }
put_var_into_stack		stmt.c	/^put_var_into_stack (decl)/ ;" function 32 { mark_addressable setjmp_protect }	{ DECL_RTL GET_CODE GET_MODE GET_MODE_SIZE MEM_IN_STRUCT_P PUT_CODE REG_USERVAR_P TREE_CODE TREE_TYPE XEXP assign_stack_local decl fixup_var_refs parm_stack_loc rtx }
qty_birth		local-alloc.c	/^static int *qty_birth;/ ;" global 1 { alloc_qty block_alloc local_alloc qty_compare qty_compare_1 reg_is_set }	{ }
qty_compare		local-alloc.c	/^qty_compare (q1, q2)/ ;" function 8 { block_alloc }	{ qty_birth qty_death qty_n_refs qty_phys_sugg qty_size }
qty_compare_1		local-alloc.c	/^qty_compare_1 (q1, q2)/ ;" function 12 { block_alloc }	{ qty_birth qty_death qty_n_refs qty_phys_sugg qty_size }
qty_const		cse.c	/^static rtx *qty_const;/ ;" global 1 { cse_basic_block cse_insn cse_main cse_rtx_addr_varies_p equiv_constant fold_cc0 insert invalidate new_basic_block refers_to_mem_p }	{ }
qty_const_insn		cse.c	/^static rtx *qty_const_insn;/ ;" global 1 { cse_basic_block cse_insn insert new_basic_block }	{ }
qty_death		local-alloc.c	/^static int *qty_death;/ ;" global 1 { block_alloc local_alloc qty_compare qty_compare_1 reg_is_set wipe_dead_reg }	{ }
qty_first_reg		cse.c	/^static int *qty_first_reg;/ ;" global 1 { cse_basic_block make_new_qty make_regs_eqv new_basic_block reg_invalidate }	{ }
qty_last_reg		cse.c	/^static int *qty_last_reg;/ ;" global 1 { cse_basic_block make_new_qty make_regs_eqv new_basic_block reg_invalidate }	{ }
qty_min_class		local-alloc.c	/^static enum reg_class *qty_min_class;/ ;" global 1 { alloc_qty block_alloc combine_regs local_alloc update_qty_class }	{ }
qty_mode		local-alloc.c	/^static enum machine_mode *qty_mode;/ ;" global 1 { alloc_qty block_alloc combine_regs local_alloc }	{ }
qty_n_calls_crossed		local-alloc.c	/^static int *qty_n_calls_crossed;/ ;" global 1 { alloc_qty combine_regs find_free_reg local_alloc }	{ }
qty_n_refs		local-alloc.c	/^static short *qty_n_refs;/ ;" global 1 { alloc_qty combine_regs find_free_reg local_alloc qty_compare qty_compare_1 }	{ }
qty_phys_reg		local-alloc.c	/^static short *qty_phys_reg;/ ;" global 1 { block_alloc local_alloc }	{ }
qty_phys_sugg		local-alloc.c	/^static short *qty_phys_sugg;/ ;" global 1 { combine_regs find_free_reg local_alloc qty_compare qty_compare_1 }	{ }
qty_preferred_or_nothing		local-alloc.c	/^static char *qty_preferred_or_nothing;/ ;" global 1 { alloc_qty block_alloc combine_regs local_alloc }	{ }
qty_size		local-alloc.c	/^static int *qty_size;/ ;" global 1 { alloc_qty block_alloc combine_regs local_alloc qty_compare qty_compare_1 }	{ }
qualify_type		c-typeck.c	/^qualify_type (type, like)/ ;" function 7 { build_conditional_expr }	{ TREE_READONLY TREE_VOLATILE build_type_variant type }
queued_subexp_p		expr.c	/^queued_subexp_p (x)/ ;" function 18 { queued_subexp_p store_expr }	{ GET_CODE XEXP queued_subexp_p rtx_code }
quiet_flag		toplev.c	/^int quiet_flag = 0;/ ;" global 1 { Mtoplev announce_function compile_file gettime }	{ }
read_name		rtl.c	/^read_name (str, infile)/ ;" function 31 { read_rtx }	{ dump_and_abort read_skip_spaces }
read_rtx		rtl.c	/^read_rtx (infile)/ ;" function 213 { read_rtx }	{ GET_CODE GET_MODE_NAME GET_RTX_FORMAT GET_RTX_LENGTH GET_RTX_NAME NULL NUM_MACHINE_MODES NUM_RTX_CODE PUT_MODE RTX_CODE XEXP XINT XSTR XVEC XVECEXP alloca dump_and_abort machine_mode read_name read_rtx read_skip_spaces rtvec_alloc rtx rtx_alloc xmalloc xrealloc }
read_skip_spaces		rtl.c	/^read_skip_spaces (infile)/ ;" function 31 { read_name read_rtx }	{ dump_and_abort }
readescape		objc-parse.y	/^readescape ()/ ;" function 96 { yylex }	{ TYPE_PRECISION error finput integer_type_node lineno warning }
readonly_warning		c-typeck.c	/^readonly_warning (arg, string)/ ;" function 27 { build_modify_expr build_unary_op c_expand_asm_operands readonly_warning }	{ DECL_NAME IDENTIFIER_POINTER TREE_CODE TREE_OPERAND TREE_READONLY readonly_warning string warning }
real_constant_chain		varasm.c	/^static rtx real_constant_chain;/ ;" global 1 { clear_const_double_mem force_const_double_mem force_const_mem immed_double_const immed_real_const_1 }	{ }
real_extract		real.h	/^union real_extract / ;" struct 5 { fold_cc0 fold_rtx force_const_mem immed_real_const_1 init_emit_once }	{ }
real_value_from_int_cst		tree.c	/^real_value_from_int_cst (i)/ ;" function 25 { build_real_from_int_cst fold_convert }	{ HOST_BITS_PER_INT REAL_VALUE_TYPE TREE_INT_CST_HIGH TREE_INT_CST_LOW }
real_zerop		fold-const.c	/^real_zerop (arg)/ ;" function 10 { fold }	{ REAL_VALUES_EQUAL TREE_REAL_CST TREE_TYPE build_real_from_int_cst integer_zero_node tree }
reallyStartMethod		objc-actions.c	/^static void reallyStartMethod(tree method, tree pa/ ;" function 83 { continue_method_def }	{ IDENTIFIER_POINTER NULLT TREE_CODE TREE_OPERAND TREE_PURPOSE TREE_TYPE TREE_USED TREE_VALUE build_nt chainon comp_method_with_proto current_function_decl error_with_method expr_last get_identifier implementation_context implementation_template input_filename lookup_method method_slot parmlist ridpointers save_expr start_function tree tree_cons }
really_sorry		toplev.c	/^really_sorry (s, v, v2)/ ;" function 13 { }	{ fatal input_filename lineno }
receiver		objc-parse.y	/^receiver:/ ;" yacctoken 1 { build_message_expr receiver_is_class_object }	{ }
receiver_is_class_object		objc-actions.c	/^static tree receiver_is_class_object(tree receiver/ ;" function 32 { build_message_expr }	{ TREE_CODE TREE_OPERAND TREE_STRING_POINTER TREE_VALUE get_identifier objc_getClass_decl receiver tree }
recog_addr_dummy		recog.c	/^rtx recog_addr_dummy;/ ;" global 1 { init_recog }	{ }
recog_memoized		recog.c	/^recog_memoized (insn)/ ;" function 8 { block_alloc final_scan_insn find_reloads regclass }	{ INSN_CODE PATTERN volatile_ok }
record_address_regs		regclass.c	/^record_address_regs (x, bcost, icost)/ ;" function 149 { record_address_regs reg_class_record }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO REGNO_POINTER_FLAG SUBREG_REG XEXP record_address_regs reg_class_subclasses rtx rtx_code savings }
record_conflicts		global-alloc.c	/^record_conflicts (allocno_vec, len)/ ;" function 17 { global_conflicts }	{ IOR_HARD_REG_SET allocno_row_words allocnos_live conflicts hard_reg_conflicts hard_regs_live }
record_constant		varasm.c	/^record_constant (exp)/ ;" function 11 { get_or_assign_label }	{ constant_descriptor permanent_obstack record_constant_1 }
record_constant_1		varasm.c	/^record_constant_1 (exp)/ ;" function 80 { record_constant record_constant_1 }	{ CONSTRUCTOR_ELTS TREE_CHAIN TREE_CODE TREE_IMAGPART TREE_INT_CST_LOW TREE_OPERAND TREE_REALPART TREE_REAL_CST TREE_STRING_LENGTH TREE_STRING_POINTER TREE_TYPE TREE_VALUE TYPE_PRECISION addr_const decode_addr_const flag_writable_strings list_length permanent_obstack record_constant_1 tree tree_code type }
record_constant_rtx		varasm.c	/^record_constant_rtx (mode, x)/ ;" function 18 { force_const_mem }	{ constant_descriptor decode_rtx_const rtx_const saveable_obstack }
record_dead_and_set_regs		combine.c	/^record_dead_and_set_regs (insn)/ ;" function 55 { combine_instructions }	{ GET_CODE INSN_CUID PATTERN REG_NOTES REG_NOTE_KIND XEXP XVECEXP XVECLEN last_call_cuid mem_last_set reg_last_death reg_last_set rtx rtx_code }
record_giv		loop.c	/^record_giv (v, insn, src_regno, dest_regno, mult_v/ ;" function 197 { find_mem_givs strength_reduce }	{ GET_CODE GET_MODE INSN_LUID INSN_UID INTVAL PATTERN SET_DEST class_struct induct_struct induct_var induction iv_class last_use_this_basic_block loop_dump_stream n_times_set n_times_used print_rtl reg_used_between_p regno_first_uid regno_last_uid type uid_luid }
record_one_conflict		global-alloc.c	/^record_one_conflict (regno)/ ;" function 25 { mark_reg_clobber mark_reg_store }	{ ALLOCNO_LIVE_P IOR_HARD_REG_SET SET_HARD_REG_BIT allocno_row_words allocnos_live conflicts hard_reg_conflicts hard_regs_live max_allocno reg_allocno }
redeclaration_error_message		c-decl.c	/^redeclaration_error_message (newdecl, olddecl)/ ;" function 48 { duplicate_decls }	{ DECL_INITIAL TREE_CODE TREE_EXTERNAL TREE_INLINE TREE_PUBLIC TREE_TYPE current_binding_level flag_traditional global_binding_level }
redirect_exp		jump.c	/^redirect_exp (x, olabel, nlabel)/ ;" function 28 { redirect_exp redirect_jump }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH RTX_CODE XEXP XVECEXP XVECLEN redirect_exp }
redirect_jump		jump.c	/^redirect_jump (jump, nlabel)/ ;" function 16 { do_cross_jump jump_optimize predecide_loop_entry }	{ INSN_CODE JUMP_LABEL LABEL_NUSES PATTERN delete_insn redirect_exp rtx }
refers_to_mem_p		cse.c	/^refers_to_mem_p (x, reg, start, end)/ ;" function 66 { addr_overlap_p invalidate refers_to_mem_p }	{ GET_CODE GET_MODE GET_MODE_SIZE GET_RTX_FORMAT GET_RTX_LENGTH INTVAL XEXP XVECEXP XVECLEN qty_const refers_to_mem_p rtx rtx_code }
refers_to_p		cse.c	/^refers_to_p (x, y)/ ;" function 47 { refers_to_p remove_invalid_refs }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN exp_equiv_p refers_to_p rtx_code }
refers_to_regno_p		rtlanal.c	/^refers_to_regno_p (regno, endregno, x, loc)/ ;" function 64 { find_dummy_reload find_equiv_reg immune_p refers_to_regno_p reg_overlap_mentioned_p }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO RTX_CODE SET_DEST SET_SRC XEXP XVECEXP XVECLEN refers_to_regno_p }
reg_alloc_order		regclass.c	/^int reg_alloc_order[FIRST_PSEUDO_REGISTER] = REG_A/ ;" global 1 { find_free_reg find_reg order_regs_for_reload stupid_find_reg }	{ }
reg_allocno		global-alloc.c	/^static int *reg_allocno;/ ;" global 1 { global_alloc global_conflicts mark_reg_clobber mark_reg_death mark_reg_store record_one_conflict retry_global_alloc set_preference }	{ }
reg_basic_block		flow.c	/^short *reg_basic_block;/ ;" global 1 { allocate_for_life_analysis block_alloc delete_output_reload dump_flow_info life_analysis local_alloc mark_set_1 mark_used_regs propagate_block spill_hard_reg }	{ }
reg_class_contents		regclass.c	/^HARD_REG_SET reg_class_contents[] = REG_CLASS_CONT/ ;" global 1 { choose_reload_regs constraint_accepts_reg_p find_dummy_reload find_equiv_reg find_free_reg find_reg init_reg_sets modes_equiv_for_class_p reg_class_subset_p reg_fits_class_p reload stupid_find_reg }	{ }
reg_class_record		regclass.c	/^reg_class_record (op, opno, constraints)/ ;" function 126 { regclass }	{ GET_CODE SUBREG_REG XEXP record_address_regs reg_class_subclasses reg_class_subunion savings }
reg_class_size		regclass.c	/^int reg_class_size[N_REG_CLASSES];/ ;" global 1 { find_reloads init_reg_sets }	{ }
reg_class_subclasses		regclass.c	/^enum reg_class reg_class_subclasses[N_REG_CLASSES]/ ;" global 1 { init_reg_sets record_address_regs reg_class_record }	{ }
reg_class_subset_p		local-alloc.c	/^reg_class_subset_p (c1, c2)/ ;" function 14 { reg_meets_class_p update_qty_class }	{ GO_IF_HARD_REG_SUBSET reg_class_contents }
reg_class_subunion		regclass.c	/^enum reg_class reg_class_subunion[N_REG_CLASSES][N/ ;" global 1 { find_reloads init_reg_sets reg_class_record regclass }	{ }
reg_class_superclasses		regclass.c	/^enum reg_class reg_class_superclasses[N_REG_CLASSE/ ;" global 1 { init_reg_sets new_spill_reg reload }	{ }
reg_crosses_blocks		stupid.c	/^static char *reg_crosses_blocks;/ ;" global 1 { stupid_life_analysis stupid_mark_refs }	{ }
reg_equiv_address		reload1.c	/^rtx *reg_equiv_address;/ ;" global 1 { alter_reg check_frame_pointer_required find_reloads find_reloads_address find_reloads_address_1 find_reloads_toplev make_memloc reload }	{ }
reg_equiv_constant		reload1.c	/^rtx *reg_equiv_constant;/ ;" global 1 { alter_reg check_frame_pointer_required find_reloads find_reloads_address find_reloads_address_1 find_reloads_toplev push_reload reload subst_indexed_address subst_reg_equivs }	{ }
reg_equiv_init		reload1.c	/^static rtx *reg_equiv_init;/ ;" global 1 { alter_reg reload }	{ }
reg_equiv_mem		reload1.c	/^rtx *reg_equiv_mem;/ ;" global 1 { alter_reg check_frame_pointer_required find_reloads find_reloads_address find_reloads_address_1 find_reloads_toplev reload }	{ }
reg_fits_class_p		recog.c	/^reg_fits_class_p (operand, class, offset, mode)/ ;" function 22 { constrain_operands find_reloads }	{ REGNO TEST_HARD_REG_BIT reg_class_contents }
reg_has_output_reload		reload1.c	/^static char *reg_has_output_reload;/ ;" global 1 { choose_reload_regs forget_old_reloads_1 reload_as_needed }	{ }
reg_in_table		cse.c	/^static int *reg_in_table;/ ;" global 1 { cse_main exp_equiv_p mention_regs new_basic_block }	{ }
reg_invalidate		cse.c	/^reg_invalidate (reg)/ ;" function 35 { invalidate }	{ qty_first_reg qty_last_reg reg_next_eqv reg_prev_eqv reg_qty reg_tick }
reg_is_born		local-alloc.c	/^reg_is_born (reg, insn_number)/ ;" function 11 { combine_regs reg_is_set }	{ GET_MODE PSEUDO_REGNO_SIZE REGNO alloc_qty mark_life reg_qty }
reg_is_output_reload		reload1.c	/^static char reg_is_output_reload[FIRST_PSEUDO_REGI/ ;" global 1 { choose_reload_regs forget_old_reloads_1 reload_as_needed }	{ }
reg_is_set		local-alloc.c	/^reg_is_set (reg, setter)/ ;" function 66 { block_alloc }	{ GET_CODE GET_MODE REGNO SET_HARD_REG_BIT find_regno_note qty_birth qty_death reg_is_born reg_qty regs_live_at this_insn this_insn_number }
reg_last_death		combine.c	/^static rtx *reg_last_death;/ ;" global 1 { combine_instructions move_deaths move_deaths_2 record_dead_and_set_regs }	{ }
reg_last_reload_reg		reload1.c	/^static rtx *reg_last_reload_reg;/ ;" global 1 { choose_reload_regs forget_old_reloads_1 reload_as_needed }	{ }
reg_last_set		combine.c	/^static rtx *reg_last_set;/ ;" global 1 { combine_instructions record_dead_and_set_regs subst use_crosses_set_p }	{ }
reg_live_length		flow.c	/^int *reg_live_length;/ ;" global 1 { allocate_for_life_analysis allocno_compare block_alloc dump_flow_info global_alloc life_analysis mark_set_1 propagate_block }	{ }
reg_map		integrate.c	/^static rtx *reg_map;/ ;" global 1 { copy_for_inline copy_rtx_and_substitute expand_inline_function move_movables replace_regs save_for_inline strength_reduce }	{ }
reg_meets_class_p		local-alloc.c	/^reg_meets_class_p (reg, class)/ ;" function 8 { combine_regs }	{ reg_class_subset_p reg_preferred_class }
reg_mentioned_p		rtlanal.c	/^reg_mentioned_p (reg, in)/ ;" function 51 { check_dbra_loop check_eliminate_biv check_frame_pointer_required copy_rtx_and_substitute delete_output_reload emit_push_insn emit_reload_insns expand_call expand_divmod make_safe_from next_insns_test_no_inequality reg_mentioned_p reg_used_between_p scan_loop store_one_arg strength_reduce tail_recursion_args try_combine try_distrib }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INTVAL REGNO XEXP XVECEXP XVECLEN reg_mentioned_p rtx_code rtx_equal_p }
reg_n_calls_crossed		flow.c	/^int *reg_n_calls_crossed;/ ;" global 1 { alloc_qty allocate_for_life_analysis combine_regs dump_flow_info find_reg propagate_block stupid_life_analysis stupid_mark_refs }	{ }
reg_n_deaths		flow.c	/^short *reg_n_deaths;/ ;" global 1 { allocate_for_life_analysis delete_output_reload dump_flow_info emit_reload_insns local_alloc mark_set_1 mark_used_regs stupid_life_analysis }	{ }
reg_n_refs		flow.c	/^short *reg_n_refs;/ ;" global 1 { alloc_qty allocate_for_life_analysis allocno_compare alter_reg block_alloc check_frame_pointer_required combine_regs dump_flow_info find_reg global_alloc mark_set_1 mark_used_regs order_regs_for_reload regclass reload stupid_mark_refs stupid_reg_compare try_combine try_distrib try_pre_increment_1 }	{ }
reg_n_sets		flow.c	/^short *reg_n_sets;/ ;" global 1 { allocate_for_life_analysis block_alloc emit_reload_insns mark_set_1 mark_used_regs regclass regno_clobbered_at_setjmp subst try_combine try_distrib try_pre_increment_1 }	{ }
reg_names		regclass.c	/^char *reg_names[] = REGISTER_NAMES;/ ;" global 1 { decode_reg_name expand_asm_operands fix_register }	{ }
reg_next_eqv		cse.c	/^static int *reg_next_eqv;/ ;" global 1 { cse_main make_regs_eqv new_basic_block reg_invalidate }	{ }
reg_next_use		flow.c	/^static rtx *reg_next_use;/ ;" global 1 { life_analysis mark_set_1 mark_used_regs try_pre_increment_1 }	{ }
reg_note		rtl.h	/^enum reg_note { REG_DEAD = 1, REG_INC = 2, REG_EQU/ ;" struct 3 { REG_NOTE_KIND }	{ }
reg_note_name		rtl.c	/^char *reg_note_name[] = { "", "REG_DEAD", "REG_INC/ ;" global 3 { GET_REG_NOTE_NAME }	{ }
reg_offset		local-alloc.c	/^static int *reg_offset;/ ;" global 1 { alloc_qty block_alloc combine_regs local_alloc }	{ }
reg_order		stupid.c	/^static short *reg_order;/ ;" global 1 { stupid_life_analysis }	{ }
reg_overlap_mentioned_p		rtlanal.c	/^reg_overlap_mentioned_p (reg, x)/ ;" function 7 { choose_reload_regs combine_reloads output_move_double push_reload reg_set_p_1 }	{ GET_MODE REGNO refers_to_regno_p }
reg_preferred_class		regclass.c	/^reg_preferred_class (regno)/ ;" function 7 { alloc_qty combine_regs dump_flow_info find_reg reg_meets_class_p stupid_life_analysis update_qty_class }	{ prefclass }
reg_preferred_or_nothing		regclass.c	/^reg_preferred_or_nothing (regno)/ ;" function 6 { alloc_qty combine_regs dump_flow_info global_alloc retry_global_alloc }	{ prefclass preferred_or_nothing }
reg_prev_eqv		cse.c	/^static int *reg_prev_eqv;/ ;" global 1 { cse_main make_regs_eqv new_basic_block reg_invalidate }	{ }
reg_qty		cse.c	/^static int *reg_qty;/ ;" global 1 { HASHREG alloc_qty block_alloc canon_hash combine_regs cse_insn cse_main exp_equiv_p insert_regs local_alloc make_new_qty make_regs_eqv new_basic_block reg_invalidate reg_is_born reg_is_set wipe_dead_reg }	{ }
reg_reloaded_contents		reload1.c	/^static int reg_reloaded_contents[FIRST_PSEUDO_REGI/ ;" global 1 { choose_reload_regs forget_old_reloads_1 reload_as_needed }	{ }
reg_renumber		local-alloc.c	/^short *reg_renumber;/ ;" global 1 { alter_reg block_alloc check_frame_pointer_required clear_reg_live delete_output_reload dump_global_regs dump_local_alloc emit_reload_insns find_dummy_reload find_reg find_reloads find_reloads_address find_reloads_address_1 find_reloads_toplev global_alloc global_conflicts inc_for_reload local_alloc mark_home_live mark_reg_clobber mark_reg_death mark_reg_store order_regs_for_reload push_reload reload retry_global_alloc rtx_renumbered_equal_p save_call_clobbered_regs set_preference set_reg_live spill_hard_reg stupid_life_analysis subst_indexed_address true_regnum }	{ }
reg_rtx		cse.c	/^static rtx *reg_rtx;/ ;" global 1 { canon_reg cse_basic_block cse_main insert_regs mention_regs new_basic_block remove_invalid_refs }	{ }
reg_rtx_no		emit-rtl.c	/^int reg_rtx_no = FIRST_PSEUDO_REGISTER;/ ;" global 1 { gen_reg_rtx init_emit max_reg_num restore_reg_data restore_reg_data_1 }	{ }
reg_scan		regclass.c	/^reg_scan (f, nregs, repeat)/ ;" function 28 { rest_of_compilation }	{ GET_CODE INSN_UID NEXT_INSN PATTERN XVECLEN max_parallel oballoc reg_scan_mark_refs regno_first_uid regno_last_uid rtx }
reg_scan_mark_refs		regclass.c	/^reg_scan_mark_refs (x, uid)/ ;" function 47 { reg_scan reg_scan_mark_refs }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO XEXP XVEC XVECEXP XVECLEN reg_scan_mark_refs regno_first_uid regno_last_uid rtx_code }
reg_set_between_p		rtlanal.c	/^reg_set_between_p (reg, from_insn, to_insn)/ ;" function 12 { strength_reduce }	{ GET_CODE NEXT_INSN PATTERN RTX_CODE reg_set_p rtx }
reg_set_flag		rtlanal.c	/^static int reg_set_flag;/ ;" global 1 { reg_set_p reg_set_p_1 }	{ }
reg_set_p		rtlanal.c	/^reg_set_p (reg, insn)/ ;" function 8 { reg_set_between_p }	{ note_stores reg_set_flag reg_set_p_1 reg_set_reg }
reg_set_p_1		rtlanal.c	/^reg_set_p_1 (x)/ ;" function 6 { reg_set_p }	{ reg_overlap_mentioned_p reg_set_flag reg_set_reg }
reg_set_reg		rtlanal.c	/^static rtx reg_set_reg;/ ;" global 1 { reg_set_p reg_set_p_1 }	{ }
reg_tick		cse.c	/^static int *reg_tick;/ ;" global 1 { cse_main exp_equiv_p mention_regs new_basic_block reg_invalidate }	{ }
reg_used_between_p		rtlanal.c	/^reg_used_between_p (reg, from_insn, to_insn)/ ;" function 12 { check_dbra_loop count_loop_regs_set loop_reg_used_before_p record_giv try_combine }	{ GET_CODE NEXT_INSN PATTERN RTX_CODE reg_mentioned_p rtx }
reg_where_born		stupid.c	/^static int *reg_where_born;/ ;" global 1 { stupid_life_analysis stupid_mark_refs stupid_reg_compare }	{ }
reg_where_dead		stupid.c	/^static int *reg_where_dead;/ ;" global 1 { stupid_life_analysis stupid_mark_refs stupid_reg_compare }	{ }
regclass		regclass.c	/^regclass (f, nregs)/ ;" function 153 { rest_of_compilation }	{ CONSTANT_P GET_CODE NEXT_INSN PATTERN alloca asm_noperands basic_block_head decode_asm_operands emit_insn_before gen_move_insn init_recog n_basic_blocks oballoc obfree optimize prefclass preferred_or_nothing prev_real_insn recog_memoized reg_class_record reg_class_subunion reg_n_refs reg_n_sets rtx rtx_equal_p savings }
regclass_init		regclass.c	/^regclass_init ()/ ;" function 4 { rest_of_compilation }	{ prefclass }
register_operand		recog.c	/^register_operand (op, mode)/ ;" function 24 { }	{ GET_CODE GET_MODE SUBREG_REG general_operand reload_completed }
regno_clobbered_at_setjmp		flow.c	/^regno_clobbered_at_setjmp (regno)/ ;" function 7 { uninitialized_vars_warning }	{ REGSET_ELT_BITS reg_n_sets regs_live_at_setjmp }
regno_dead_p		combine.c	/^regno_dead_p (regno, insn)/ ;" function 14 { emit_reload_insns }	{ REGNO REG_NOTES REG_NOTE_KIND XEXP rtx }
regno_first_uid		regclass.c	/^short *regno_first_uid;/ ;" global 1 { CHEAPER move_movables record_giv reg_scan reg_scan_mark_refs strength_reduce }	{ }
regno_last_uid		regclass.c	/^short *regno_last_uid;/ ;" global 1 { CHEAPER check_dbra_loop force_movables last_use_this_basic_block move_movables record_giv reg_scan reg_scan_mark_refs strength_reduce }	{ }
regno_pointer_flag		emit-rtl.c	/^char *regno_pointer_flag;/ ;" global 1 { REGNO_POINTER_FLAG gen_reg_rtx init_emit restore_reg_data_1 }	{ }
regno_pointer_flag_length		emit-rtl.c	/^int regno_pointer_flag_length;/ ;" global 1 { gen_reg_rtx init_emit restore_reg_data_1 }	{ }
regno_reg_class		aux-output.c	/^enum reg_class regno_reg_class[]/ ;" global 3 { }	{ }
regno_reg_rtx		emit-rtl.c	/^rtx *regno_reg_rtx;/ ;" global 1 { PSEUDO_REGNO_MODE alter_reg check_dbra_loop expand_function_end expand_function_start gen_reg_rtx init_emit life_analysis reload restore_reg_data restore_reg_data_1 save_for_inline stupid_life_analysis }	{ }
regno_uninitialized		flow.c	/^regno_uninitialized (regno)/ ;" function 9 { uninitialized_vars_warning }	{ REGSET_ELT_BITS basic_block_live_at_start n_basic_blocks }
regs_ever_live		final.c	/^char regs_ever_live[FIRST_PSEUDO_REGISTER];/ ;" global 1 { check_frame_pointer_required dump_global_regs life_analysis mark_home_live mark_set_1 mark_used_regs new_spill_reg order_regs_for_reload reload stupid_life_analysis stupid_mark_refs }	{ }
regs_explicitly_used		reload1.c	/^static char regs_explicitly_used[FIRST_PSEUDO_REGI/ ;" global 1 { order_regs_for_reload reload }	{ }
regs_live		stupid.c	/^static char *regs_live;/ ;" global 1 { block_alloc mark_life save_call_clobbered_regs stupid_life_analysis stupid_mark_refs }	{ }
regs_live_at		local-alloc.c	/^static HARD_REG_SET *regs_live_at;/ ;" global 1 { block_alloc find_free_reg post_mark_life reg_is_set }	{ }
regs_live_at_setjmp		flow.c	/^regset regs_live_at_setjmp;/ ;" global 1 { allocate_for_life_analysis life_analysis propagate_block regno_clobbered_at_setjmp }	{ }
regs_match_p		loop.c	/^regs_match_p (x, y, movables)/ ;" function 21 { rtx_equal_for_loop_p }	{ REGNO movable }
regs_set		global-alloc.c	/^static rtx *regs_set;/ ;" global 1 { global_conflicts mark_reg_clobber mark_reg_store }	{ }
regs_someone_prefers		global-alloc.c	/^static HARD_REG_SET regs_someone_prefers;/ ;" global 1 { find_reg global_alloc set_preference }	{ }
regset		basic-block.h	/^typedef long *regset;/ ;" typedef 1 { allocate_for_life_analysis global_conflicts init_regset_vector life_analysis propagate_block save_call_clobbered_regs }	{ }
regset_bytes		flow.c	/^int regset_bytes;/ ;" global 1 { allocate_for_life_analysis life_analysis propagate_block }	{ }
regset_size		flow.c	/^int regset_size;/ ;" global 1 { allocate_for_life_analysis global_conflicts life_analysis propagate_block save_call_clobbered_regs }	{ }
reinit_parse_for_function		objc-parse.y	/^reinit_parse_for_function ()/ ;" function 3 { }	{ }
reload		reload1.c	/^reload (first, global, dumpfile)/ ;" function 734 { global_alloc rest_of_compilation }	{ GET_CODE GET_MODE GET_MODE_SIZE NEXT_INSN NOTE_INSN_DELETED PATTERN PUT_CODE PUT_MODE REGNO REG_USERVAR_P SET_DEST SET_SRC TEST_HARD_REG_BIT XEXP alloca alter_reg basic_block_head basic_block_needs caller_save_needed check_frame_pointer_required counted_for_groups counted_for_nongroups double_reg_address_ok eliminate_frame_pointer emit_note find_reg_note find_reloads forbidden_regs frame_pointer_needed gen_rtx get_max_uid immediate_operand machine_mode mark_home_live max max_regno memory_address_p modes_equiv_for_class_p n_basic_blocks n_reloads n_spills new_spill_reg optimize_bit_field order_regs_for_reload plus_constant potential_reload_regs reg_class_contents reg_class_superclasses reg_equiv_address reg_equiv_constant reg_equiv_init reg_equiv_mem reg_n_refs reg_renumber regno_reg_rtx regs_ever_live regs_explicitly_used reload_as_needed reload_first_uid reload_in (etc) }
reload_as_needed		reload1.c	/^reload_as_needed (first, live_known)/ ;" function 128 { reload }	{ GET_CODE GET_MODE NEXT_INSN PATTERN REG_NOTES REG_NOTE_KIND XEXP alloca basic_block_head basic_block_needs call_used_regs choose_reload_regs emit_reload_insns find_reloads forget_old_reloads_1 max_regno n_basic_blocks n_reloads n_spills note_stores reg_has_output_reload reg_is_output_reload reg_last_reload_reg reg_reloaded_contents reload_in reload_optional reload_out reload_reg_rtx rtx spill_indirect_ok spill_reg_order spill_reg_rtx spill_regs subst_reloads }
reload_completed		recog.c	/^int reload_completed;/ ;" global 1 { memory_operand nonmemory_operand register_operand rest_of_compilation }	{ }
reload_earlyclobbers		reload.c	/^rtx reload_earlyclobbers[MAX_RECOG_OPERANDS];/ ;" global 1 { choose_reload_regs find_reloads }	{ }
reload_first_uid		reload1.c	/^int reload_first_uid;/ ;" global 1 { find_equiv_reg reload }	{ }
reload_in		reload.c	/^rtx reload_in[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads delete_output_reload emit_reload_insns find_equiv_reg find_reloads push_reload reload reload_as_needed }	{ }
reload_in_reg		reload.c	/^rtx reload_in_reg[MAX_RELOADS];/ ;" global 1 { choose_reload_regs push_reload }	{ }
reload_inc		reload.c	/^int reload_inc[MAX_RELOADS];/ ;" global 1 { combine_reloads emit_reload_insns find_reloads find_reloads_address_1 push_reload }	{ }
reload_inherited		reload1.c	/^char reload_inherited[MAX_RELOADS];/ ;" global 1 { choose_reload_regs emit_reload_insns }	{ }
reload_inmode		reload.c	/^enum machine_mode reload_inmode[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads emit_reload_insns find_reloads push_reload reload reload_reg_class_lower }	{ }
reload_needed_for		reload.c	/^rtx reload_needed_for[MAX_RELOADS];/ ;" global 1 { find_reloads push_reload }	{ }
reload_needed_for_multiple		reload.c	/^int reload_needed_for_multiple[MAX_RELOADS];/ ;" global 1 { combine_reloads find_reloads push_reload }	{ }
reload_nocombine		reload.c	/^char reload_nocombine[MAX_RELOADS];/ ;" global 1 { combine_reloads push_reload }	{ }
reload_optional		reload.c	/^char reload_optional[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads find_reloads push_reload reload reload_as_needed reload_reg_class_lower subst_reloads }	{ }
reload_order		reload1.c	/^short reload_order[MAX_RELOADS];/ ;" global 1 { choose_reload_regs }	{ }
reload_out		reload.c	/^rtx reload_out[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads delete_output_reload emit_reload_insns find_dummy_reload find_reloads push_reload reload reload_as_needed }	{ }
reload_outmode		reload.c	/^enum machine_mode reload_outmode[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads push_reload reload reload_reg_class_lower }	{ }
reload_override_in		reload1.c	/^rtx reload_override_in[MAX_RELOADS];/ ;" global 1 { choose_reload_regs }	{ }
reload_reg_class		reload.c	/^enum reg_class reload_reg_class[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads find_reloads push_reload reload reload_reg_class_lower }	{ }
reload_reg_class_lower		reload1.c	/^reload_reg_class_lower (p1, p2)/ ;" function 27 { choose_reload_regs }	{ machine_mode reload_inmode reload_optional reload_outmode reload_reg_class }
reload_reg_free_before_p		reload1.c	/^reload_reg_free_before_p (regno, when_needed)/ ;" function 23 { choose_reload_regs emit_reload_insns }	{ reload_reg_in_use_for_inputs reload_reg_in_use_for_operands }
reload_reg_free_p		reload1.c	/^reload_reg_free_p (regno, when_needed)/ ;" function 22 { choose_reload_regs emit_reload_insns }	{ reload_reg_in_use reload_reg_in_use_at_all reload_reg_in_use_for_inputs reload_reg_in_use_for_operands reload_reg_in_use_for_outputs }
reload_reg_in_use		reload1.c	/^static char reload_reg_in_use[FIRST_PSEUDO_REGISTE/ ;" global 1 { choose_reload_regs mark_reload_reg_in_use reload_reg_free_p }	{ }
reload_reg_in_use_at_all		reload1.c	/^static char reload_reg_in_use_at_all[FIRST_PSEUDO_/ ;" global 1 { choose_reload_regs mark_reload_reg_in_use reload_reg_free_p }	{ }
reload_reg_in_use_for_inputs		reload1.c	/^static char reload_reg_in_use_for_inputs[FIRST_PSE/ ;" global 1 { choose_reload_regs mark_reload_reg_in_use reload_reg_free_before_p reload_reg_free_p }	{ }
reload_reg_in_use_for_operands		reload1.c	/^static char reload_reg_in_use_for_operands[FIRST_P/ ;" global 1 { choose_reload_regs mark_reload_reg_in_use reload_reg_free_before_p reload_reg_free_p reload_reg_reaches_end_p }	{ }
reload_reg_in_use_for_outputs		reload1.c	/^static char reload_reg_in_use_for_outputs[FIRST_PS/ ;" global 1 { choose_reload_regs mark_reload_reg_in_use reload_reg_free_p reload_reg_reaches_end_p }	{ }
reload_reg_reaches_end_p		reload1.c	/^reload_reg_reaches_end_p (regno, when_needed)/ ;" function 23 { choose_reload_regs }	{ reload_reg_in_use_for_operands reload_reg_in_use_for_outputs }
reload_reg_rtx		reload.c	/^rtx reload_reg_rtx[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads delete_output_reload emit_reload_insns find_equiv_reg find_reloads push_reload reload reload_as_needed subst_reloads }	{ }
reload_spill_index		reload1.c	/^int reload_spill_index[MAX_RELOADS];/ ;" global 1 { choose_reload_regs emit_reload_insns }	{ }
reload_strict_low		reload.c	/^char reload_strict_low[MAX_RELOADS];/ ;" global 1 { choose_reload_regs combine_reloads emit_reload_insns push_reload }	{ }
reload_when_needed		reload.c	/^enum reload_when_needed reload_when_needed[MAX_REL/ ;" global 1 { choose_reload_regs combine_reloads emit_reload_insns find_reloads reload }	{ }
remove		cse.c	/^remove (elt, hash)/ ;" function 59 { invalidate invalidate_memory remove_invalid_refs }	{ free_element table table_elt }
remove_death		combine.c	/^remove_death (regno, insn)/ ;" function 20 { emit_reload_insns move_deaths move_deaths_2 try_combine try_distrib }	{ REGNO REG_NOTES REG_NOTE_KIND XEXP rtx }
remove_invalid_refs		cse.c	/^remove_invalid_refs (regno)/ ;" function 15 { mention_regs }	{ GET_CODE NBUCKETS refers_to_p reg_rtx remove rtx table table_elt }
remove_links		combine.c	/^remove_links (insn, oinsn)/ ;" function 18 { try_distrib }	{ LOG_LINKS XEXP rtx }
reorder_insns		emit-rtl.c	/^reorder_insns (from, to, after)/ ;" function 24 { expand_builtin expand_end_case expand_end_loop fixup_cleanups optimize_bit_field }	{ NEXT_INSN PREV_INSN first_insn last_insn }
replace_call_address		loop.c	/^replace_call_address (x, reg, addr)/ ;" function 54 { move_movables replace_call_address }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN replace_call_address rtx_code }
replace_regs		loop.c	/^replace_regs (x, reg_map, nregs)/ ;" function 45 { move_movables replace_regs strength_reduce }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO XEXP XVECEXP XVECLEN reg_map replace_regs rtx_code }
replace_reloads		reload.c	/^static int replace_reloads;/ ;" global 1 { find_reloads push_reload push_replacement }	{ }
replacement		reload.c	/^struct replacement/ ;" struct 7 { push_reload push_replacement subst_reloads }	{ }
replacements		reload.c	/^static struct replacement replacements[MAX_RECOG_O/ ;" global 1 { combine_reloads push_reload push_replacement subst_reloads }	{ }
report_error_function		toplev.c	/^report_error_function (file)/ ;" function 48 { error_with_decl error_with_file_and_line warning_with_decl warning_with_file_and_line }	{ DECL_PRINT_NAME NULL TREE_CODE TREE_TYPE compiling_a_method current_function_decl file_stack input_file_stack input_file_stack_tick last_error_function last_error_tick line need_error_newline }
require_complete_type		c-typeck.c	/^require_complete_type (value)/ ;" function 13 { actualparameterlist build_array_ref build_function_call build_modify_expr }	{ TREE_TYPE TYPE_SIZE error_mark_node incomplete_type_error tree type void_type_node }
reserved_declspecs		objc-parse.y	/^reserved_declspecs:  \/* empty *\// ;" yacctoken 1 { }	{ }
reserved_typespecquals		objc-parse.y	/^reserved_typespecquals:  \/* empty *\// ;" yacctoken 1 { }	{ }
reservedwords		objc-parse.y	/^reservedwords:/ ;" yacctoken 1 { }	{ }
rest_of_compilation		toplev.c	/^rest_of_compilation (decl)/ ;" function 360 { finish_function output_inline_function }	{ DECL_ARGUMENTS DECL_BLOCK_SYMTAB_ADDRESS DECL_INITIAL DECL_NAME DECL_SAVED_INSNS IDENTIFIER_POINTER TIMEVAR TREE_ADDRESSABLE TREE_ASM_WRITTEN TREE_EXTERNAL TREE_INLINE TREE_PUBLIC TREE_THIS_VOLATILE asm_out_file assemble_function clear_const_double_mem combine_dump combine_dump_file combine_instructions combine_time cse_dump cse_dump_file cse_main cse_time dbr_sched_dump dbr_sched_dump_file dbr_sched_time dbxout_function decl dump_combine_stats dump_flow_info dump_global_regs dump_local_alloc dump_time extra_warnings final final_end_function final_start_function final_time flag_delayed_branch flag_inline_functions flag_keep_inline_functions flag_syntax_only flow_analysis flow_dump flow_dump_file flow_time function_cannot_inline_p get_insns get_permanent_types get_temporary_types gettime global_alloc global_alloc_time global_reg_dump global_reg_dump_file integration_time jump2_opt_dump jump2_opt_dump_file jump_opt_dump (etc) }
rest_of_decl_compilation		toplev.c	/^rest_of_decl_compilation (decl, asmspec, top_level/ ;" function 61 { compile_file finish_decl finish_struct implicitly_declare }	{ DECL_INITIAL DECL_RTL TIMEVAR TREE_CODE TREE_EXTERNAL TREE_REGDECL TREE_STATIC assemble_variable dbxout_symbol decl decode_reg_name doing_objc_thang error error_mark_node get_temporary_types make_decl_rtl objc_check_decl sdbout_symbol symout_time symout_types varconst_time write_symbols }
restore_reg_data		emit-rtl.c	/^restore_reg_data (first)/ ;" function 35 { output_inline_function }	{ GET_CODE INSN_UID NEXT_INSN PATTERN cur_insn_uid gen_rtx max_uid reg_rtx_no regno_reg_rtx restore_reg_data_1 rtx }
restore_reg_data_1		emit-rtl.c	/^restore_reg_data_1 (orig)/ ;" function 85 { restore_reg_data restore_reg_data_1 }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH NULL REGNO XEXP XVEC XVECEXP XVECLEN mark_reg_pointer max oballoc reg_rtx_no regno_pointer_flag regno_pointer_flag_length regno_reg_rtx restore_reg_data_1 rtx rtx_code }
resume_momentary		tree.c	/^resume_momentary (yes)/ ;" function 6 { combine_strings expand_start_stmt_expr finish_struct layout_type }	{ expression_obstack momentary_obstack }
resume_temporary_allocation		tree.c	/^resume_temporary_allocation ()/ ;" function 6 { build_int finish_decl grokdeclarator implicitly_declare layout_type output_constant_def }	{ current_obstack expression_obstack maybepermanent_obstack rtl_obstack saveable_obstack temporary_obstack }
resword		objc-parse.y	/^struct resword { char *name; short token; enum rid/ ;" struct 1 { is_reserved_word yylex }	{ }
retry_global_alloc		global-alloc.c	/^retry_global_alloc (regno, forbidden_regs)/ ;" function 19 { check_frame_pointer_required spill_hard_reg }	{ find_reg forbidden_regs hard_reg_preferences reg_allocno reg_preferred_or_nothing reg_renumber }
return_label		stmt.c	/^rtx return_label;/ ;" global 1 { expand_function_end expand_function_start expand_null_return_1 save_for_inline }	{ }
reverse_condition		jump.c	/^reverse_condition (code)/ ;" function 40 { jump_back_p }	{ }
rid		c-parse.h	/^enum rid/ ;" struct 27 { yylex }	{ }
ridpointers		objc-parse.y	/^tree ridpointers[(int) RID_MAX];/ ;" global 1 { build_category_template build_class_template build_ivar_list_template build_ivar_template build_message_selector_pool build_method_list_template build_method_template build_module_descriptor build_msg_pool_reference build_objc_selector_template build_objc_symtab_template build_selector_translation_table finish_class forward_declare_categories generate_category generate_dispatch_table generate_forward_declaration_to_string_table generate_ivars_list generate_objc_symtab_decl generate_shared_structures grokdeclarator init_decl_processing init_lex reallyStartMethod start_method_def synth_forward_declarations synth_module_prologue yylex }	{ }
rotl_optab		optabs.c	/^optab rotl_optab;/ ;" global 1 { expand_expr expand_shift init_optabs }	{ }
rotr_optab		optabs.c	/^optab rotr_optab;/ ;" global 1 { expand_expr expand_shift init_optabs }	{ }
round_push		explow.c	/^round_push (size)/ ;" function 25 { emit_library_call expand_builtin expand_call expand_decl }	{ GET_CODE INTVAL expand_divmod expand_mult gen_rtx }
rrotate_double		fold-const.c	/^rrotate_double (l1, h1, count, prec, lv, hv)/ ;" function 27 { lrotate_double }	{ decode encode }
rshift_double		fold-const.c	/^rshift_double (l1, h1, count, prec, lv, hv, arith)/ ;" function 28 { lshift_double }	{ decode encode }
rtl_dump		toplev.c	/^int rtl_dump = 0;/ ;" global 1 { Mtoplev compile_file rest_of_compilation }	{ }
rtl_dump_and_exit		toplev.c	/^int rtl_dump_and_exit = 0;/ ;" global 1 { rest_of_compilation }	{ }
rtl_dump_file		toplev.c	/^FILE *rtl_dump_file;/ ;" global 1 { compile_file rest_of_compilation }	{ }
rtl_expr_chain		stmt.c	/^static tree rtl_expr_chain;/ ;" global 1 { expand_end_stmt_expr fixup_var_refs init_function_start }	{ }
rtl_obstack		tree.c	/^struct obstack *rtl_obstack;/ ;" global 1 { end_temporary_allocation init_tree permanent_allocation resume_temporary_allocation rtvec_alloc rtx_alloc temporary_allocation }	{ }
rtunion		rtl.h	/^typedef union rtunion_def/ ;" typedef 9 { init_rtl rtvec_alloc rtx_alloc save_for_inline }	{ }
rtunion_def		rtl.h	/^typedef union rtunion_def/ ;" struct 9 { }	{ }
rtvec		rtl.h	/^typedef struct rtvec_def{/ ;" typedef 4 { NULL_RTVEC XVEC XVECEXP XVECLEN expand_asm_operands gen_rtvec_v gen_rtx gen_sequence rtvec_alloc try_combine }	{ }
rtvec_alloc		rtl.c	/^rtvec_alloc (n)/ ;" function 17 { copy_address copy_rtx copy_rtx_and_substitute expand_asm_operands expand_inline_function gen_rtvec_v gen_sequence read_rtx try_combine }	{ NULL PUT_NUM_ELEM rtl_obstack rtunion rtvec }
rtx		rtl.h	/^typedef struct rtx_def/ ;" typedef 45 { CONTAINING_INSN FIRST_FUNCTION_INSN FIRST_PARM_INSN JUMP_LABEL LABEL_NEXTREF LABEL_REFS LOG_LINKS NEXT_INSN NOTE_DECL_RTL NULL_RTX PATTERN PREV_INSN REG_NOTES SET_DEST SET_SRC SUBREG_REG XEXP XVECEXP compare compare1 convert_move convert_to_mode copy_rtx dead_or_set_p do_jump do_store_flag do_tablejump drop_through_at_end_p emit_call_1 emit_case_nodes emit_jump_if_reachable emit_library_call emit_move_insn emit_nop emit_push_insn emit_queue error_for_asm expand_anon_union_decl expand_asm_operands expand_assignment expand_builtin expand_call expand_decl expand_end_bindings expand_end_case expand_end_loop expand_end_stmt_expr expand_expr expand_goto_internal expand_increment expand_null_return expand_null_return_1 expand_return expand_start_bindings expand_start_stmt_expr find_reg_note find_regno_note fixup_cleanups force_operand group_case_nodes (etc) }	{ }
rtx_addr_varies_p		rtlanal.c	/^rtx_addr_varies_p (x)/ ;" function 21 { cse_rtx_addr_varies_p find_equiv_reg invariant_p note_addr_stored rtx_addr_varies_p }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP rtx_addr_varies_p rtx_code rtx_varies_p }
rtx_alloc		rtl.c	/^rtx_alloc (code)/ ;" function 15 { copy_address copy_for_inline copy_rtx copy_rtx_and_substitute copy_rtx_if_shared emit_barrier emit_barrier_after emit_note emit_note_after fold_rtx gen_rtx immed_real_const_1 init_emit_once make_insn_raw make_jump_insn_raw read_rtx save_for_inline }	{ GET_RTX_LENGTH PUT_CODE rtl_obstack rtunion rtx rtx_def }
rtx_code		rtl.h	/^enum rtx_code  {/ ;" struct 7 { GET_CODE RTX_CODE adj_offsettable_operand all_sets_invariant_p alter_frame_pointer_addresses basic_induction_var can_eliminate_biv_p can_jump_into_range_p canon_hash canon_reg check_dbra_loop check_eliminate_biv consec_sets_giv consec_sets_invariant_p copy_for_inline copy_rtx_if_shared count_nonfixed_reads count_occurrences cse_basic_block eliminate_biv emit exp_equiv_p find_constant_term_loc find_equiv_reg find_inc_amount find_mem_givs find_use_as_address fold_rtx forget_volatility gen_rtx general_induction_var general_operand inequality_comparisons_p invariant_p jump_back_p life_analysis may_trap_p mention_regs move_deaths move_deaths_2 offsettable_address_p only_reg_use_p queued_subexp_p record_address_regs record_dead_and_set_regs refers_to_mem_p refers_to_p reg_mentioned_p reg_scan_mark_refs replace_call_address replace_regs restore_reg_data_1 rtx_addr_varies_p rtx_cost rtx_equal_for_loop_p rtx_equal_p strength_reduce subst try_distrib use_crosses_set_p (etc) }	{ }
rtx_const		varasm.c	/^struct rtx_const/ ;" struct 10 { compare_constant_rtx const_hash_rtx record_constant_rtx }	{ }
rtx_cost		cse.c	/^rtx_cost (x)/ ;" function 35 { fold_rtx insert rtx_cost }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH XEXP XVECEXP XVECLEN rtx_code rtx_cost }
rtx_def		rtl.h	/^typedef struct rtx_def/ ;" struct 45 { CALL_EXPR_RTL RTL_EXPR_RTL RTL_EXPR_SEQUENCE SAVE_EXPR_RTL rtx_alloc save_for_inline }	{ }
rtx_equal_for_loop_p		loop.c	/^rtx_equal_for_loop_p (x, y, movables)/ ;" function 91 { combine_movables rtx_equal_for_loop_p }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO REG_FUNCTION_VALUE_P XEXP XINT XSTR XVECEXP XVECLEN regs_match_p rtx_code rtx_equal_for_loop_p }
rtx_equal_function_value_matters		rtlanal.c	/^int rtx_equal_function_value_matters;/ ;" global 1 { rest_of_compilation rtx_equal_p }	{ }
rtx_equal_p		rtlanal.c	/^rtx_equal_p (x, y)/ ;" function 89 { MATCHES can_eliminate_biv_p combine_movables cse_insn eliminate_biv expand_binop expand_call expand_inline_function final_scan_insn find_equiv_reg find_reloads fixup_var_refs_insns fold_out_const_cc0 immune_p jump_optimize make_memloc note_addr_stored push_reload reg_mentioned_p regclass rtx_equal_p strength_reduce subst }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO REG_FUNCTION_VALUE_P XEXP XINT XSTR XVECEXP XVECLEN rtx_code rtx_equal_function_value_matters rtx_equal_p }
rtx_format		rtl.c	/^char *rtx_format[] = {/ ;" global 22 { GET_RTX_FORMAT init_rtl }	{ }
rtx_length		rtl.c	/^int rtx_length[NUM_RTX_CODE + 1];/ ;" global 1 { GET_RTX_LENGTH init_rtl }	{ }
rtx_name		rtl.c	/^char *rtx_name[] = {/ ;" global 3 { GET_RTX_NAME }	{ }
rtx_renumbered_equal_p		jump.c	/^rtx_renumbered_equal_p (x, y)/ ;" function 117 { find_cross_jump find_equiv_reg jump_back_p rtx_renumbered_equal_p }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO RTX_CODE SUBREG_REG SUBREG_WORD XEXP XINT XSTR XVECEXP XVECLEN next_real_insn reg_renumber rtx_renumbered_equal_p }
rtx_unstable_p		rtlanal.c	/^rtx_unstable_p (x)/ ;" function 28 { rtx_unstable_p stabilize }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO RTX_CODE RTX_UNCHANGING_P XEXP rtx_unstable_p }
rtx_varies_p		rtlanal.c	/^rtx_varies_p (x)/ ;" function 27 { count_nonfixed_reads may_trap_p rtx_addr_varies_p rtx_varies_p }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO RTX_CODE XEXP rtx_varies_p }
rtxfun		expr.h	/^typedef rtx (*rtxfun) ();/ ;" typedef 1 { }	{ }
safe_hash		cse.c	/^safe_hash (x, mode)/ ;" function 13 { insert lookup_as_function use_related_value }	{ canon_hash do_not_record hash hash_arg_in_memory hash_arg_in_struct }
save_argc		toplev.c	/^int save_argc;/ ;" global 1 { Mtoplev }	{ }
save_argv		toplev.c	/^char **save_argv;/ ;" global 1 { Mtoplev }	{ }
save_block_addr		caller-save.c	/^static rtx save_block_addr;/ ;" global 1 { insert_call_saves save_call_clobbered_regs }	{ }
save_block_size		caller-save.c	/^static int save_block_size;/ ;" global 1 { grow_save_block insert_call_saves save_call_clobbered_regs }	{ }
save_call_clobbered_regs		caller-save.c	/^save_call_clobbered_regs ()/ ;" function 71 { reload }	{ COPY_HARD_REG_SET GET_CODE HOST_BITS_PER_INT NEXT_INSN PATTERN REG_NOTES REG_NOTE_KIND RTX_CODE SET_HARD_REG_BIT TRUE XEXP basic_block_end basic_block_head basic_block_live_at_start clear_reg_live hard_regs_live insert_call_saves max_regno n_basic_blocks note_stores obey_regdecls reg_renumber regs_live regset regset_size rtx save_block_addr save_block_size save_reg_rtx set_reg_live }
save_expr		tree.c	/^save_expr (expr)/ ;" function 15 { build_conditional_expr build_modify_expr build_unary_op reallyStartMethod save_noncopied_parts stabilize_reference variable_size }	{ NULL TREE_CODE TREE_LITERAL TREE_READONLY TREE_TYPE build expr fold tree }
save_expr_regs		stmt.c	/^rtx save_expr_regs;/ ;" global 1 { expand_asm_operands expand_expr expand_function_end init_function_start }	{ }
save_for_inline		integrate.c	/^save_for_inline (fndecl)/ ;" function 182 { rest_of_compilation }	{ DECL_ARGUMENTS DECL_FRAME_SIZE DECL_RTL DECL_SAVED_INSNS FIRST_PARM_INSN GET_CODE GET_RTX_LENGTH INSN_CODE INSN_UID LOG_LINKS NEXT_INSN NOTE_INSN_DELETED NOTE_INSN_FUNCTION_END NOTE_LINE_NUMBER NOTE_SOURCE_FILE NULL PATTERN PREV_INSN REG_NOTES RTX_INTEGRATED_P TREE_CHAIN TREE_INLINE TREE_READONLY TREE_VOLATILE alloca copy_asm_operands_vector copy_for_inline current_function_args_size emit_label first_insn gen_inline_header_rtx gen_label_rtx get_first_label_num get_first_nonparm_insn get_frame_size get_insns insn_map label_map last_insn max_label_num max_parm_reg max_parm_reg_num max_reg max_reg_num max_uid maybepermanent_obstack orig_asm_operands_vector parmdecl_map parms preserve_data reg_map regno_reg_rtx return_label rtunion rtx rtx_alloc rtx_def set_new_first_and_last_insn stack_slot_list tree }
save_noncopied_parts		expr.c	/^save_noncopied_parts (lhs, list)/ ;" function 21 { expand_expr save_noncopied_parts }	{ RTL_EXPR_RTL TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_TYPE TREE_VALUE TYPE_MODE assign_stack_local build_component_ref build_nt chainon int_size_in_bytes part save_expr save_noncopied_parts store_expr tree tree_cons }
save_reg_rtx		caller-save.c	/^static rtx save_reg_rtx[FIRST_PSEUDO_REGISTER];/ ;" global 1 { emit_mult_restore emit_mult_save insert_call_saves save_call_clobbered_regs }	{ }
saveable_obstack		tree.c	/^struct obstack *saveable_obstack;/ ;" global 1 { assemble_static_space build_pointer_type build_reference_type build_string build_type_variant end_temporary_allocation init_tree make_decl_rtl make_node permanent_allocation record_constant_rtx resume_temporary_allocation saveable_tree_cons savealloc suspend_momentary temporary_allocation type_hash_canon }	{ }
saveable_tree_cons		tree.c	/^saveable_tree_cons (purpose, value, chain)/ ;" function 15 { build_enumerator get_parm_info pushtag }	{ TREE_CHAIN TREE_PURPOSE TREE_VALUE current_obstack make_node saveable_obstack tree }
savealloc		tree.c	/^savealloc (size)/ ;" function 5 { combine_strings }	{ saveable_obstack }
savings		regclass.c	/^static struct savings *savings;/ ;" global 1 { combine_movables force_movables move_movables record_address_regs reg_class_record regclass scan_loop }	{ }
sawclose		rtl.c	/^static int sawclose = 0;/ ;" global 1 { print_rtl print_rtx }	{ }
scan_loop		loop.c	/^scan_loop (loop_start, end, nregs)/ ;" function 375 { loop_optimize }	{ GET_CODE GET_MODE INSN_LUID INSN_UID NEXT_INSN PATTERN PREV_INSN REGNO SET_DEST SET_SRC SUBREG_REG XEXP alloca combine_movables consec_sets_invariant_p const0_rtx count_loop_regs_set find_reg_note flag_strength_reduce force_movables ignore_some_movables invariant_p labels_in_range_p loop_continue loop_dump_stream loop_has_call loop_reg_used_before_p loop_skip_over may_trap_p movable move_movables n_times_set n_times_used old_max_reg reg_mentioned_p rtx savings simplejump_p skip_consec_insns strength_reduce uid_luid }
sdb_begin_function_line		sdbout.c	/^int sdb_begin_function_line = 0;/ ;" global 1 { output_source_line sdbout_begin_block sdbout_begin_function sdbout_end_block sdbout_end_function }	{ }
sdbout_begin_block		sdbout.c	/^sdbout_begin_block (file, line, n)/ ;" function 18 { final_scan_insn }	{ DECL_ARGUMENTS DECL_INITIAL PUT_SDB_BLOCK_START current_function_decl decl do_block line next_block_number sdb_begin_function_line sdbout_block tree }
sdbout_begin_function		sdbout.c	/^sdbout_begin_function (line)/ ;" function 8 { final_scan_insn }	{ DECL_ARGUMENTS PUT_SDB_FUNCTION_START current_function_decl line sdb_begin_function_line sdbout_parms sdbout_reg_parms }
sdbout_block		sdbout.c	/^sdbout_block (stmt)/ ;" function 40 { sdbout_begin_block sdbout_block }	{ STMT_BODY STMT_ELSE STMT_SUBBLOCKS STMT_THEN STMT_TYPE_TAGS STMT_VARS TREE_CHAIN TREE_CODE TREE_USED do_block next_block_number sdbout_block sdbout_syms sdbout_tags stmt }
sdbout_end_block		sdbout.c	/^sdbout_end_block (file, line)/ ;" function 6 { final_scan_insn }	{ PUT_SDB_BLOCK_END line sdb_begin_function_line }
sdbout_end_epilogue		sdbout.c	/^sdbout_end_epilogue ()/ ;" function 5 { final_end_function }	{ DECL_NAME IDENTIFIER_POINTER PUT_SDB_EPILOGUE_END current_function_decl }
sdbout_end_function		sdbout.c	/^sdbout_end_function (line)/ ;" function 8 { final_end_function }	{ PUT_SDB_FUNCTION_END line sdb_begin_function_line }
sdbout_field_types		sdbout.c	/^sdbout_field_types (type)/ ;" function 7 { sdbout_one_type }	{ TREE_CHAIN TREE_TYPE TYPE_FIELDS sdbout_one_type tree type }
sdbout_filename		sdbout.c	/^sdbout_filename (asm_file, input_name)/ ;" function 21 { }	{ }
sdbout_init		sdbout.c	/^sdbout_init ()/ ;" function 5 { compile_file }	{ get_permanent_types nreverse sdbout_types }
sdbout_mark_begin_function		sdbout.c	/^sdbout_mark_begin_function ()/ ;" function 4 { assemble_function }	{ current_function_decl sdbout_symbol }
sdbout_one_type		sdbout.c	/^sdbout_one_type (type)/ ;" function 106 { sdbout_field_types sdbout_tags sdbout_types }	{ CONTIN DECL_NAME DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT IDENTIFIER_POINTER KNOWN_TYPE_TAG PUT_SDB_DEF PUT_SDB_ENDEF PUT_SDB_INT_VAL PUT_SDB_PLAIN_DEF PUT_SDB_SCL PUT_SDB_SIZE PUT_SDB_TAG PUT_SDB_TYPE TREE_ASM_WRITTEN TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_PACKED TREE_PURPOSE TREE_TYPE TREE_VALUE TYPE_FIELDS TYPE_MAIN_VARIANT int_size_in_bytes sdbout_field_types sdbout_record_type_name sdbout_type text_section tree type }
sdbout_parms		sdbout.c	/^sdbout_parms (parms1)/ ;" function 52 { sdbout_begin_function }	{ DECL_ARG_TYPE DECL_NAME DECL_OFFSET DECL_RTL GET_CODE GET_MODE GET_MODE_SIZE IDENTIFIER_POINTER INTVAL PUT_SDB_DEF PUT_SDB_ENDEF PUT_SDB_INT_VAL PUT_SDB_SCL PUT_SDB_TYPE REGNO TREE_CHAIN TREE_TYPE TYPE_MODE XEXP current_sym_value gen_fake_label parms plain_type tree type }
sdbout_record_type_name		sdbout.c	/^sdbout_record_type_name (type)/ ;" function 31 { plain_type_1 sdbout_one_type }	{ DECL_NAME IDENTIFIER_POINTER KNOWN_TYPE_TAG SET_KNOWN_TYPE_TAG TREE_CODE TYPE_NAME gen_fake_label tree type }
sdbout_reg_parms		sdbout.c	/^sdbout_reg_parms (parms)/ ;" function 40 { sdbout_begin_function }	{ DECL_ARG_TYPE DECL_NAME DECL_OFFSET DECL_RTL GET_CODE GET_MODE GET_MODE_SIZE IDENTIFIER_POINTER INTVAL PUT_SDB_DEF PUT_SDB_ENDEF PUT_SDB_INT_VAL PUT_SDB_SCL PUT_SDB_TYPE REGNO TREE_CHAIN TREE_TYPE TYPE_MODE XEXP parms plain_type }
sdbout_symbol		sdbout.c	/^sdbout_symbol (decl, local)/ ;" function 126 { assemble_variable compile_file rest_of_decl_compilation sdbout_mark_begin_function sdbout_syms }	{ DECL_NAME DECL_RTL GET_CODE IDENTIFIER_POINTER INTVAL PUT_SDB_DEF PUT_SDB_ENDEF PUT_SDB_INT_VAL PUT_SDB_SCL PUT_SDB_TYPE PUT_SDB_VAL REGNO TREE_CODE TREE_EXTERNAL TREE_PUBLIC TREE_TYPE XEXP build_pointer_type decl get_permanent_types gettags nreverse plain_type sdbout_tags sdbout_types tree type }
sdbout_syms		sdbout.c	/^sdbout_syms (syms)/ ;" function 9 { sdbout_block }	{ TREE_CHAIN sdbout_symbol }
sdbout_tags		sdbout.c	/^sdbout_tags (tags)/ ;" function 14 { assemble_function compile_file sdbout_block sdbout_symbol }	{ TREE_CHAIN TREE_PURPOSE TREE_VALUE TYPE_SIZE sdbout_one_type tree type }
sdbout_type		sdbout.c	/^sdbout_type (type)/ ;" function 8 { sdbout_one_type }	{ PUT_SDB_TYPE error_mark_node integer_type_node plain_type tree type }
sdbout_types		sdbout.c	/^sdbout_types (types)/ ;" function 8 { compile_file sdbout_init sdbout_symbol }	{ TREE_CHAIN sdbout_one_type tree }
sdiv_optab		optabs.c	/^optab sdiv_optab;/ ;" global 1 { expand_divmod init_optabs }	{ }
sdivmod_optab		optabs.c	/^optab sdivmod_optab;/ ;" global 1 { expand_divmod init_optabs }	{ }
sel_ref_chain		objc-actions.c	/^static tree sel_ref_chain = NULLT;	\/* selectors re/ ;" global 1 { add_selector_reference build_selector_translation_table finish_objc init_objc_symtab }	{ }
sel_refdef_chain		objc-actions.c	/^static tree sel_refdef_chain = NULLT;	\/* selectors/ ;" global 1 { add_objc_string build_message_selector_pool finish_objc objc_debug }	{ }
selector		objc-parse.y	/^selector:/ ;" yacctoken 1 { build_keyword_selector build_method_decl }	{ }
selectorarg		objc-parse.y	/^selectorarg:/ ;" yacctoken 1 { }	{ }
self_decl		objc-actions.c	/^static tree self_decl, _msg_decl, _msgSuper_decl;/ ;" global 1 { build_ivar_reference continue_method_def getArgTypeList get_super_receiver }	{ }
self_id		objc-actions.c	/^static tree self_id, _cmd_id, _msg_id, _msgSuper_i/ ;" global 1 { get_super_receiver start_class start_method_def }	{ }
semi_or_error		objc-parse.y	/^semi_or_error:/ ;" yacctoken 1 { }	{ }
sequence_stack		emit-rtl.c	/^rtx sequence_stack = 0;/ ;" global 1 { add_insn_after end_sequence expand_function_end fixup_var_refs init_emit push_to_sequence start_sequence }	{ }
set		cse.c	/^struct set/ ;" struct 25 { cse_insn }	{ }
set_current_gdbfile		final.c	/^set_current_gdbfile (filename)/ ;" function 20 { assemble_variable output_source_line }	{ current_gdbfile gdbfile gdbfiles lastfile next_gdb_filenum permalloc }
set_float_handler		toplev.c	/^set_float_handler (handler)/ ;" function 7 { combine }	{ float_handled float_handler }
set_identifier_size		tree.c	/^set_identifier_size (size)/ ;" function 5 { init_decl_processing }	{ tree_code_length }
set_last_insn		emit-rtl.c	/^set_last_insn (insn)/ ;" function 7 { delete_insn }	{ NEXT_INSN last_insn }
set_new_first_and_last_insn		emit-rtl.c	/^set_new_first_and_last_insn (first, last)/ ;" function 6 { output_inline_function save_for_inline }	{ first_insn last_insn }
set_preference		global-alloc.c	/^set_preference (dest, src)/ ;" function 69 { mark_reg_store }	{ GET_CODE GET_RTX_FORMAT REGNO SET_HARD_REG_BIT SET_REGBIT SUBREG_REG SUBREG_WORD XEXP hard_reg_preferences reg_allocno reg_renumber regs_someone_prefers }
set_reg_live		caller-save.c	/^set_reg_live (reg, setter)/ ;" function 37 { save_call_clobbered_regs }	{ GET_CODE GET_MODE REGNO SET_HARD_REG_BIT SUBREG_REG SUBREG_WORD call_fixed_regs hard_regs_live reg_renumber }
set_target_switch		toplev.c	/^set_target_switch (name)/ ;" function 15 { Mtoplev }	{ error target_flags target_switches }
setcc_gen_fctn		optabs.c	/^rtxfun setcc_gen_fctn[NUM_RTX_CODE];/ ;" global 1 { do_store_flag init_optabs }	{ }
setjmp_protect		stmt.c	/^setjmp_protect (block)/ ;" function 14 { finish_function setjmp_protect }	{ DECL_RTL GET_CODE STMT_SUBBLOCKS STMT_VARS TREE_CHAIN TREE_CODE TREE_REGDECL block decl put_var_into_stack setjmp_protect tree }
sets_cc0_p		jump.c	/^sets_cc0_p (x)/ ;" function 22 { delete_jump find_cross_jump loop_skip_over push_reload try_combine }	{ GET_CODE SET_DEST XVECEXP XVECLEN cc0_rtx }
setspecs		objc-parse.y	/^setspecs: \/* empty *\// ;" yacctoken 1 { }	{ }
shadow_tag		c-decl.c	/^shadow_tag (declspecs)/ ;" function 48 { }	{ TREE_CHAIN TREE_CODE TREE_VALUE current_binding_level lookup_tag lookup_tag_reverse make_node pushtag tree tree_code warning }
short_integer_type_node		c-decl.c	/^tree short_integer_type_node;/ ;" global 1 { gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type }	{ }
short_unsigned_array_type_node		c-decl.c	/^tree short_unsigned_array_type_node;/ ;" global 1 { combine_strings init_decl_processing yylex }	{ }
short_unsigned_type_node		c-decl.c	/^tree short_unsigned_type_node;/ ;" global 1 { combine_strings gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type yylex }	{ }
shorten_compare		c-typeck.c	/^shorten_compare (op0_ptr, op1_ptr, restype_ptr, re/ ;" function 264 { build_binary_op_nodefault }	{ INT_CST_LT INT_CST_LT_UNSIGNED TREE_CODE TREE_LITERAL TREE_TYPE TREE_UNSIGNED TREE_VOLATILE TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_PRECISION build commontype convert get_narrower integer_one_node integer_type_node integer_zero_node signed_or_unsigned_type signed_type tree tree_code type unsigned_type warning }
sign_expand_binop		optabs.c	/^sign_expand_binop (mode, uoptab, soptab, op0, op1,/ ;" function 48 { expand_divmod }	{ expand_binop optab rtx }
sign_extend_optab		optabs.c	/^enum insn_code sign_extend_optab[MAX_MACHINE_MODE]/ ;" global 1 { gen_extend_insn init_extends }	{ }
signed_char_type_node		c-decl.c	/^tree signed_char_type_node;/ ;" global 1 { digest_init gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type }	{ }
signed_or_unsigned_type		c-typeck.c	/^signed_or_unsigned_type (unsignedp, type)/ ;" function 19 { build_binary_op_nodefault shorten_compare }	{ TREE_CODE TYPE_PRECISION integer_type_node long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node short_integer_type_node short_unsigned_type_node signed_char_type_node type unsigned_char_type_node unsigned_type_node }
signed_type		c-typeck.c	/^signed_type (type)/ ;" function 15 { convert_to_integer shorten_compare }	{ char_type_node integer_type_node long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node short_integer_type_node short_unsigned_type_node signed_char_type_node type unsigned_char_type_node unsigned_type_node }
simple_cst_equal		tree.c	/^simple_cst_equal (t1, t2)/ ;" function 65 { simple_cst_equal type_list_equal }	{ REAL_VALUES_EQUAL TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_OPERAND TREE_REAL_CST TREE_STRING_LENGTH TREE_STRING_POINTER simple_cst_equal tree_code }
simple_if		objc-parse.y	/^simple_if:/ ;" yacctoken 1 { }	{ }
simplejump_p		jump.c	/^simplejump_p (insn)/ ;" function 12 { emit find_basic_blocks jump_back_p jump_optimize scan_loop }	{ GET_CODE PATTERN SET_DEST SET_SRC rtx }
simplify_and_const_int		combine.c	/^simplify_and_const_int (x, to)/ ;" function 152 { subst }	{ FAKE_EXTEND_SAFE_P GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_MASK GET_MODE_SIZE INTVAL SUBST XEXP gen_lowpart_for_combine gen_rtx oballoc rtx subreg_lowpart_p undobuf }
simplify_set_cc0_and		combine.c	/^simplify_set_cc0_and (insn)/ ;" function 127 { try_combine }	{ GET_CODE GET_MODE GET_MODE_BITSIZE INTVAL MAX_UNDO PATTERN SUBREG_REG SUBREG_WORD XEXP cc0_rtx const1_rtx exact_log2 gen_rtx oballoc rtx undo undobuf }
singlemove_string		aux-output.c	/^singlemove_string (operands)/ ;" function 11 { output_move_double }	{ const0_rtx }
size_in_bytes		tree.c	/^size_in_bytes (type)/ ;" function 14 { assign_parms c_sizeof c_sizeof_nowarn dbxout_type expand_call expand_expr expr_size store_one_arg }	{ TYPE_MAIN_VARIANT TYPE_SIZE TYPE_SIZE_UNIT convert_units error_mark_node incomplete_type_error integer_zero_node type }
size_one_node		stor-layout.c	/^tree size_one_node;/ ;" global 1 { genop init_decl_processing layout_decl layout_type }	{ }
size_zero_node		stor-layout.c	/^tree size_zero_node;/ ;" global 1 { init_decl_processing layout_type }	{ }
sizetype		stor-layout.c	/^tree sizetype;/ ;" global 1 { build_index_type build_int genop init_decl_processing make_signed_type make_unsigned_type }	{ }
skip		print-tree.c	/^skip (indent)/ ;" function 6 { dump emit_push_insn }	{ MIN outfile spaces }
skip_consec_insns		loop.c	/^skip_consec_insns (insn, count)/ ;" function 27 { scan_loop }	{ GET_CODE NEXT_INSN XEXP find_reg_note rtx }
skip_white_space		objc-parse.y	/^skip_white_space (c)/ ;" function 82 { yylex }	{ check_newline error finput lineno }
smod_optab		optabs.c	/^optab smod_optab;/ ;" global 1 { expand_divmod init_optabs }	{ }
smul_optab		optabs.c	/^optab smul_optab;/ ;" global 1 { expand_binop expand_mult init_optabs }	{ }
smul_widen_optab		optabs.c	/^optab smul_widen_optab;/ ;" global 1 { expand_binop expand_expr init_optabs }	{ }
sorry		toplev.c	/^sorry (s, v, v2)/ ;" function 14 { }	{ input_filename lineno progname sorrycount }
sorrycount		toplev.c	/^int sorrycount = 0;/ ;" global 1 { Mtoplev sorry }	{ }
source		symseg.h	/^struct source/ ;" struct 7 { emit_reload_insns symout_source_file symout_sources }	{ }
sourcevector		symseg.h	/^struct sourcevector/ ;" struct 6 { symout_finish symout_sources }	{ }
spaces		rtl.c	/^char spaces[] = "                                 / ;" global 1 { dump print_rtx skip }	{ }
spill_hard_reg		reload1.c	/^spill_hard_reg (regno, global, dumpfile)/ ;" function 58 { new_spill_reg reload spill_hard_reg }	{ PSEUDO_REGNO_MODE alter_reg basic_block_needs forbidden_regs frame_pointer_needed mark_home_live max_regno reg_basic_block reg_renumber retry_global_alloc spill_hard_reg }
spill_indirect_ok		reload1.c	/^static char spill_indirect_ok;/ ;" global 1 { reload reload_as_needed }	{ }
spill_reg_order		reload1.c	/^static short spill_reg_order[FIRST_PSEUDO_REGISTER/ ;" global 1 { choose_reload_regs emit_reload_insns forget_old_reloads_1 new_spill_reg reload reload_as_needed }	{ }
spill_reg_rtx		reload1.c	/^static rtx spill_reg_rtx[FIRST_PSEUDO_REGISTER];/ ;" global 1 { choose_reload_regs reload_as_needed }	{ }
spill_reg_store		reload1.c	/^static rtx spill_reg_store[FIRST_PSEUDO_REGISTER];/ ;" global 1 { delete_output_reload emit_reload_insns }	{ }
spill_regs		reload1.c	/^static char spill_regs[FIRST_PSEUDO_REGISTER];/ ;" global 1 { choose_reload_regs new_spill_reg reload reload_as_needed }	{ }
spill_stack_slot		reload1.c	/^static rtx spill_stack_slot[FIRST_PSEUDO_REGISTER]/ ;" global 1 { alter_reg reload }	{ }
split_tree		fold-const.c	/^split_tree (in, code, varp, conp, varsignp)/ ;" function 70 { fold }	{ TREE_CODE TREE_LITERAL TREE_OPERAND TREE_TYPE TYPE_MODE combine convert integer_zero_node tree tree_code }
stabilize		explow.c	/^stabilize (x)/ ;" function 22 { expand_increment }	{ GET_CODE GET_MODE MEM_IN_STRUCT_P XEXP copy_all_regs copy_to_reg gen_rtx rtx rtx_unstable_p }
stabilize_reference		tree.c	/^stabilize_reference (ref)/ ;" function 55 { build_modify_expr build_unary_op expand_assignment expand_increment stabilize_reference }	{ TREE_CODE TREE_OPERAND TREE_READONLY TREE_THIS_VOLATILE TREE_TYPE TREE_VOLATILE build_nt error_mark_node save_expr stabilize_reference tree tree_code }
stack_block_stack		stmt.c	/^struct nesting *stack_block_stack;/ ;" global 1 { expand_decl expand_end_bindings expand_label expand_start_bindings }	{ }
stack_pointer_rtx		emit-rtl.c	/^rtx stack_pointer_rtx;		\/* (REG:Pmode STACK_POINTE/ ;" global 1 { adjust_stack anti_adjust_stack copy_rtx_and_substitute emit_push_insn expand_builtin expand_call expand_decl expand_end_bindings expand_function_end expand_goto_internal expand_inline_function fixup_gotos gen_push_operand immune_p init_emit_once life_analysis output_move_double propagate_block push_block push_operand store_one_arg try_combine }	{ }
stack_slot_list		stmt.c	/^rtx stack_slot_list;/ ;" global 1 { assign_stack_local init_function_start output_inline_function save_for_inline unshare_all_rtl }	{ }
standard_68881_constant_p		aux-output.c	/^standard_68881_constant_p (x)/ ;" function 31 { output_move_const_double output_move_const_single }	{ CONST_DOUBLE_HIGH CONST_DOUBLE_LOW GET_MODE }
standard_sun_fpa_constant_p		aux-output.c	/^standard_sun_fpa_constant_p (x)/ ;" function 103 { output_move_const_double output_move_const_single }	{ CONST_DOUBLE_HIGH CONST_DOUBLE_LOW D_E D_LOG10of2 D_LOG10ofE D_LOG2of10 D_LOG2ofE D_LOGEof10 D_LOGEof2 D_PI D_SQRT2 GET_MODE S_E S_LOG10of2 S_LOG10ofE S_LOG2of10 S_LOG2ofE S_LOGEof10 S_LOGEof2 S_PI S_SQRT2 }
start_class		objc-actions.c	/^start_class(enum tree_code code, tree class_name, / ;" function 106 { }	{ IDENTIFIER_POINTER _cmd_id add_category add_class build_super_template doing_objc_thang error get_identifier implementation_context implementation_template init_objc lookup_interface make_node method_slot objc_super_template self_id tree warning }
start_decl		c-decl.c	/^start_decl (declarator, declspecs, initialized)/ ;" function 96 { add_objc_decls build_message_selector_pool build_module_descriptor build_selector_translation_table define_decl generate_category generate_dispatch_table generate_ivars_list generate_objc_symtab_decl generate_shared_structures }	{ DECL_INITIAL DECL_NAME DECL_RTL IDENTIFIER_POINTER NULL_TREE TREE_CODE TREE_EXTERNAL TREE_STATIC TREE_TYPE TYPE_SIZE current_binding_level debug_temp_inits decl declarator error error_mark_node expand_decl global_binding_level grokdeclarator list_length pedantic pushdecl temporary_allocation tree warning }
start_enum		c-decl.c	/^start_enum (name)/ ;" function 41 { }	{ IDENTIFIER_POINTER TREE_CODE TYPE_PRECISION TYPE_SIZE TYPE_VALUES current_binding_level enum_next_value error fixup_unsigned_type integer_type_node integer_zero_node lookup_tag make_node pushtag tree }
start_function		c-decl.c	/^start_function (declspecs, declarator)/ ;" function 92 { reallyStartMethod }	{ DECL_INITIAL DECL_NAME DECL_RESULT DECL_RESULT_TYPE TREE_ADDRESSABLE TREE_CODE TREE_EXTERNAL TREE_STATIC TREE_TYPE TYPE_ARG_TYPES TYPE_PRECISION TYPE_SIZE announce_function build_decl build_function_type current_extern_inline current_function_decl current_function_parm_tags current_function_parms current_function_returns_null current_function_returns_value declarator declare_parm_level error error_mark_node grokdeclarator integer_type_node last_function_parm_tags last_function_parms lookup_name_current_level make_function_rtl pushdecl pushlevel temporary_allocation tree value_identifier void_type_node warn_about_return_type warning }
start_identifier_warnings		tree.c	/^start_identifier_warnings ()/ ;" function 4 { init_decl_processing }	{ do_identifier_warnings }
start_method_def		objc-actions.c	/^start_method_def(tree method)/ ;" function 103 { }	{ NULLT TAG_SELECTOR TREE_CHAIN TREE_CODE TREE_OPERAND TREE_PURPOSE TREE_TYPE TREE_VALUE _OBJC_SUPER_decl _PRIVATE_record _cmd_id build build_tree_list expr_last get_identifier method_context objc_object_reference push_parm_decl pushdecl pushlevel ridpointers self_id tree tree_cons xref_tag }
start_sequence		emit-rtl.c	/^start_sequence ()/ ;" function 10 { emit_iv_init_code expand_start_stmt_expr fixup_memory_subreg gen_iv_mult }	{ first_insn gen_rtx last_insn sequence_stack }
start_struct		c-decl.c	/^start_struct (code, name)/ ;" function 27 { build_category_template build_class_template build_ivar_list_template build_ivar_template build_method_list_template build_method_template build_module_descriptor build_objc_selector_template build_objc_symtab_template build_private_template build_super_template }	{ IDENTIFIER_POINTER TREE_CODE TYPE_FIELDS current_binding_level error lookup_tag make_node pushtag tree }
static_chain_incoming_rtx		emit-rtl.c	/^rtx static_chain_incoming_rtx;	\/* (REG:Pmode STATI/ ;" global 1 { init_emit_once }	{ }
static_chain_rtx		emit-rtl.c	/^rtx static_chain_rtx;		\/* (REG:Pmode STATIC_CHAIN_/ ;" global 1 { init_emit_once prepare_call_address }	{ }
static_reload_reg_p		reload.c	/^static short *static_reload_reg_p;/ ;" global 1 { find_reloads push_reload }	{ }
staticp		tree.c	/^staticp (arg)/ ;" function 28 { build_unary_op default_conversion staticp }	{ DECL_VOFFSET TREE_CODE TREE_EXTERNAL TREE_LITERAL TREE_OPERAND TREE_STATIC TREE_TYPE TYPE_SIZE staticp tree_code }
stmt		objc-parse.y	/^stmt:/ ;" yacctoken 1 { STMT_BODY STMT_SOURCE_FILE STMT_SOURCE_LINE dbxout_block sdbout_block symout_function }	{ }
stmts		objc-parse.y	/^stmts:/ ;" yacctoken 1 { }	{ }
store_bit_field		expmed.c	/^store_bit_field (str_rtx, bitsize, bitnum, fieldmo/ ;" function 210 { store_bit_field store_field }	{ CONSTANT_P GEN_FCN GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE GET_MODE_WIDER_MODE PUT_MODE SUBREG_REG SUBREG_WORD XEXP change_address convert_to_mode copy_to_reg delete_insns_since emit_insn emit_move_insn flag_force_mem force_not_mem force_reg gen_lowpart gen_rtx get_last_insn machine_mode movstrict_optab plus_constant protect_from_queue rtx store_bit_field store_fixed_bit_field }
store_constructor		expr.c	/^store_constructor (exp, target)/ ;" function 98 { store_constructor store_expr }	{ CONSTRUCTOR_ELTS DECL_MODE DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT GET_CODE GET_MODE GET_MODE_BITSIZE REGNO TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_PURPOSE TREE_TYPE TREE_UNSIGNED TREE_VALUE TYPE_ALIGN TYPE_DOMAIN TYPE_FIELDS TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_MODE TYPE_SIZE TYPE_SIZE_UNIT clear_storage emit_insn emit_move_insn gen_reg_rtx gen_rtx int_size_in_bytes list_length machine_mode rtx store_constructor store_field tree }
store_expr		expr.c	/^store_expr (exp, target, suggest_reg)/ ;" function 83 { expand_assignment expand_expr expand_inline_function save_noncopied_parts store_field store_one_arg }	{ CONSTANT_P GET_CODE GET_MODE REGNO TREE_CODE TREE_LITERAL TREE_TYPE TREE_UNSIGNED TYPE_ALIGN convert_move convert_to_mode copy_to_reg cse_not_expected emit_block_move emit_move_insn expand_expr expr_size protect_from_queue queued_subexp_p rtx store_constructor }
store_field		expr.c	/^store_field (target, bitsize, bitpos, mode, exp, v/ ;" function 47 { expand_assignment store_constructor }	{ GET_CODE MEM_IN_STRUCT_P XEXP change_address const0_rtx copy_to_reg expand_expr extract_bit_field plus_constant rtx store_bit_field store_expr }
store_fixed_bit_field		expmed.c	/^store_fixed_bit_field (op0, offset, bitsize, bitpo/ ;" function 166 { store_bit_field store_split_bit_field }	{ GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_SIZE HOST_BITS_PER_INT INTVAL XEXP build_int_2 change_address convert_to_mode emit_move_insn expand_binop expand_bit_and expand_shift gen_lowpart gen_rtx ior_optab machine_mode plus_constant rtx store_split_bit_field }
store_init_value		c-typeck.c	/^store_init_value (decl, init)/ ;" function 42 { finish_decl }	{ DECL_INITIAL TREE_CODE TREE_LITERAL TREE_STATIC TREE_TYPE decl digest_init error error_mark_node init initializer_constant_valid_p pedantic tree type warning }
store_one_arg		expr.c	/^store_one_arg (arg, argblock, may_be_alloca)/ ;" function 190 { expand_call }	{ ADD_PARM_SIZE ARGS_SIZE_RTX FUNCTION_ARG_PADDING GET_CODE GET_MODE GET_MODE_SIZE INTVAL NO_DEFER_POP REGNO SUB_PARM_SIZE TREE_CODE TREE_INT_CST_LOW TREE_TYPE TYPE_ALIGN TYPE_MODE XEXP args_size change_address const0_rtx convert_units copy_to_reg direction do_pending_stack_adjust emit_block_move emit_move_insn emit_push_insn emit_queue expand_expr gen_rtx int_size_in_bytes memory_address move_block_to_reg plus_constant reg_mentioned_p rtx size_in_bytes stack_pointer_rtx store_expr tree }
store_parm_decls		c-decl.c	/^store_parm_decls ()/ ;" function 259 { continue_method_def }	{ DECL_ARGUMENTS DECL_ARG_TYPE DECL_CONTEXT DECL_NAME DECL_SOURCE_FILE DECL_SOURCE_LINE IDENTIFIER_POINTER NULL NULL_TREE TREE_CHAIN TREE_CODE TREE_PURPOSE TREE_TYPE TREE_VALUE TYPE_ARG_TYPES TYPE_SIZE build_decl chainon comptypes current_function_decl current_function_parm_tags current_function_parms double_type_node error error_mark_node error_with_decl expand_function_start getdecls gettags init_function_start integer_type_node keep_next_if_subblocks layout_decl nreverse parm pushdecl storedecls storetags tree tree_cons type void_type_node warn_implicit warning_with_decl }
store_split_bit_field		expmed.c	/^store_split_bit_field (op0, bitsize, bitpos, value/ ;" function 71 { store_fixed_bit_field }	{ CONSTANT_P GET_CODE GET_MODE GET_MODE_SIZE INTVAL SUBREG_REG SUBREG_WORD XEXP change_address convert_to_mode copy_to_reg extract_fixed_bit_field gen_rtx plus_constant rtx store_fixed_bit_field }
storedecls		c-decl.c	/^storedecls (decls)/ ;" function 5 { get_parm_info store_parm_decls }	{ current_binding_level decls }
storetags		c-decl.c	/^storetags (tags)/ ;" function 5 { store_parm_decls }	{ current_binding_level }
strength_reduce		loop.c	/^strength_reduce (scan_start, end, loop_top, insn_c/ ;" function 747 { scan_loop }	{ ADD_BENEFIT CONSTANT_P COPY_PENALTY GET_CODE GET_MODE INSN_LUID INSN_UID INTVAL LIBCALL_BENEFIT NEXT_INSN PATTERN PREV_INSN REGNO SET_DEST SET_SRC XEXP alloca basic_induction_var call_seen call_used_regs cc0_rtx check_dbra_loop check_eliminate_biv class_struct consec_sets_giv const1_rtx delete_insn delete_insn_forces eliminate_biv emit_insn_after emit_iv_inc emit_iv_init_code final_biv_value find_mem_givs find_reg_note gen_reg_rtx gen_rtx general_induction_var induct_struct induct_var induction iv_class iv_mode loop_dump_stream loop_has_call n_times_set next_real_insn old_max_reg print_rtl product_cheap_p record_giv reg_map reg_mentioned_p reg_set_between_p regno_first_uid regno_last_uid replace_regs rtx rtx_code rtx_equal_p (etc) }
strict_memory_address_p		reload.c	/^strict_memory_address_p (mode, addr)/ ;" function 10 { find_reloads_address offsettable_address_p }	{ }
string		objc-parse.y	/^string:/ ;" yacctoken 1 { Mtoplev TREE_STRING_LENGTH TREE_STRING_POINTER assemble_asm c_expand_asm_operands constraint_accepts_reg_p digest_init emit_cmp_insn expand_asm_operands final_scan_insn finish_objc lvalue_or_else readonly_warning yyerror }	{ }
string_type_node		c-decl.c	/^tree string_type_node;/ ;" global 1 { init_decl_processing }	{ }
struct_value_incoming_rtx		emit-rtl.c	/^rtx struct_value_incoming_rtx;	\/* (REG:Pmode STRUC/ ;" global 1 { assign_parms expand_function_start expand_inline_function init_emit_once }	{ }
struct_value_rtx		emit-rtl.c	/^rtx struct_value_rtx;		\/* (REG:Pmode STRUCT_VALUE_/ ;" global 1 { expand_call expand_inline_function init_emit_once }	{ }
structsp		objc-parse.y	/^structsp:/ ;" yacctoken 1 { }	{ }
structure_value		stmt.c	/^static rtx structure_value;/ ;" global 1 { get_structure_value_addr init_function_start }	{ }
stupid_find_reg		stupid.c	/^stupid_find_reg (call_preserved, class, mode,/ ;" function 61 { stupid_life_analysis }	{ CLEAR_HARD_REG_SET COPY_HARD_REG_SET HARD_REG_SET IOR_COMPL_HARD_REG_SET IOR_HARD_REG_SET SET_HARD_REG_BIT TEST_HARD_REG_BIT after_insn_hard_regs call_used_reg_set fixed_reg_set reg_alloc_order reg_class_contents }
stupid_life_analysis		stupid.c	/^stupid_life_analysis (f, nregs, file)/ ;" function 178 { rest_of_compilation }	{ GET_CODE HARD_REG_SET INSN_SUID INSN_UID IOR_HARD_REG_SET NEXT_INSN PATTERN PREV_INSN PSEUDO_REGNO_MODE SET_HARD_REG_BIT after_insn_hard_regs alloca allocate_for_life_analysis call_used_reg_set call_used_regs dump_flow_info last_call_suid last_jump_suid last_label_suid max_regno max_uid oballoc reg_crosses_blocks reg_n_calls_crossed reg_n_deaths reg_order reg_preferred_class reg_renumber reg_where_born reg_where_dead regno_reg_rtx regs_ever_live regs_live rtx stupid_find_reg stupid_mark_refs stupid_reg_compare uid_suid }
stupid_mark_refs		stupid.c	/^stupid_mark_refs (x, insn)/ ;" function 117 { stupid_life_analysis stupid_mark_refs }	{ GET_CODE GET_MODE GET_RTX_FORMAT GET_RTX_LENGTH INSN_SUID MARK_LIVE_AFTER REGNO RTX_CODE SET_DEST SET_HARD_REG_BIT SET_SRC XEXP XVECEXP XVECLEN after_insn_hard_regs last_call_suid last_jump_suid last_label_suid reg_crosses_blocks reg_n_calls_crossed reg_n_refs reg_where_born reg_where_dead regs_ever_live regs_live stupid_mark_refs }
stupid_reg_compare		stupid.c	/^stupid_reg_compare (r1p, r2p)/ ;" function 18 { stupid_life_analysis }	{ reg_n_refs reg_where_born reg_where_dead }
sub_optab		optabs.c	/^optab sub_optab;/ ;" global 1 { emit_push_insn expand_binop expand_dec expand_divmod expand_expr expand_fix expand_increment expand_shift force_operand gen_sub2_insn init_optabs }	{ }
subrange_p		symout.c	/^subrange_p (type)/ ;" function 39 { symout_types }	{ HOST_BITS_PER_INT TREE_INT_CST_HIGH TREE_INT_CST_LOW TREE_UNSIGNED TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_PRECISION integer_zerop type }
subreg_lowpart_p		emit-rtl.c	/^subreg_lowpart_p (x)/ ;" function 17 { simplify_and_const_int subst }	{ GET_CODE GET_MODE GET_MODE_SIZE SUBREG_REG SUBREG_WORD machine_mode max }
subst		combine.c	/^subst (x, from, to)/ ;" function 905 { subst try_combine try_distrib }	{ CONSTANT_P FAKE_EXTEND_SAFE_P GET_CODE GET_MODE GET_MODE_BITSIZE GET_MODE_MASK GET_MODE_SIZE GET_RTX_FORMAT GET_RTX_LENGTH HOST_BITS_PER_INT INTVAL PATTERN SET_DEST SET_SRC SUBREG_REG SUBREG_WORD SUBST SUBST_INT XEXP XVECEXP XVECLEN cc0_rtx const0_rtx const1_rtx gen_lowpart_for_combine gen_rtx mode_dependent_address_p n_occurrences next_insn_tests_no_inequality oballoc plus_constant reg_last_set reg_n_sets rtx rtx_code rtx_equal_p simplify_and_const_int subreg_lowpart_p subst subst_insn undobuf }
subst_indexed_address		reload.c	/^subst_indexed_address (addr)/ ;" function 58 { find_reloads_address }	{ CONSTANT_P GET_CODE REGNO XEXP gen_rtx reg_equiv_constant reg_renumber rtx }
subst_insn		combine.c	/^static rtx subst_insn;/ ;" global 1 { subst try_combine try_distrib }	{ }
subst_reg_equivs		reload.c	/^subst_reg_equivs (ad)/ ;" function 43 { find_reloads_address subst_reg_equivs }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH REGNO RTX_CODE XEXP frame_pointer_rtx reg_equiv_constant subst_reg_equivs subst_reg_equivs_changed }
subst_reg_equivs_changed		reload.c	/^static int subst_reg_equivs_changed;/ ;" global 1 { find_reloads_address subst_reg_equivs }	{ }
subst_reloads		reload.c	/^subst_reloads ()/ ;" function 21 { reload_as_needed }	{ GET_MODE gen_rtx n_replacements reload_optional reload_reg_rtx replacement replacements rtx }
super_type		objc-actions.c	/^static tree super_type, _selector_type, id_type, c/ ;" global 1 { build_message_expr build_super_template getArgTypeList }	{ }
suspend_momentary		tree.c	/^suspend_momentary ()/ ;" function 6 { combine_strings expand_start_stmt_expr finish_struct layout_type }	{ expression_obstack momentary_obstack saveable_obstack }
sym_file_name		toplev.c	/^char *sym_file_name;/ ;" global 1 { Mtoplev compile_file }	{ }
symbol		symseg.h	/^struct symbol/ ;" struct 21 { symout_block_symbols symout_block_tags }	{ }
symbol_root		symseg.h	/^struct symbol_root/ ;" struct 20 { symout_finish symout_init }	{ }
symfile		symout.c	/^static FILE *symfile;/ ;" global 1 { symout_array_domain symout_block symout_block_symbols symout_block_tags symout_enum_values symout_finish symout_init symout_range_bounds symout_record_fields symout_source_file symout_sources symout_strings_print symout_top_blocks symout_types }	{ }
symfile_name		symout.c	/^static char *symfile_name;/ ;" global 1 { symout_finish symout_init }	{ }
symout_array_domain		symout.c	/^symout_array_domain (type)/ ;" function 11 { symout_types }	{ TYPE_DOMAIN TYPE_OUTPUT_ADDRESS symfile type }
symout_block		symout.c	/^symout_block (decls, tags, args, superblock_addres/ ;" function 58 { symout_function }	{ TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_TYPE alloca asmfile block blockvec blockvec_elt decl decls next_address symfile symout_block_symbols symout_block_tags total_blocks tree xmalloc }
symout_block_symbols		symout.c	/^symout_block_symbols (decls, addr_buffer, filter)/ ;" function 157 { symout_block symout_top_blocks }	{ DECL_BLOCK_SYMTAB_ADDRESS DECL_INITIAL DECL_NAME DECL_OFFSET DECL_RTL GET_CODE IDENTIFIER_LENGTH IDENTIFIER_POINTER INTVAL REGNO TREE_CHAIN TREE_CODE TREE_EXTERNAL TREE_INT_CST_LOW TREE_PUBLIC TREE_STATIC TREE_TYPE TYPE_OUTPUT_ADDRESS TYPE_POINTER_TO XEXP XSTR asmfile decl decls error_mark_node namespace next_address rtx symbol symfile symout_strings tree type }
symout_block_tags		symout.c	/^symout_block_tags (tags, addr_buffer)/ ;" function 25 { symout_block symout_top_blocks }	{ IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_CHAIN TREE_PURPOSE TREE_VALUE TYPE_OUTPUT_ADDRESS namespace next_address symbol symfile symout_strings tree type }
symout_enum_value_names		symout.c	/^symout_enum_value_names (type)/ ;" function 10 { symout_types }	{ IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_CHAIN TREE_PURPOSE TYPE_VALUES symout_strings_print tree type }
symout_enum_values		symout.c	/^symout_enum_values (type)/ ;" function 17 { symout_types }	{ IDENTIFIER_LENGTH TREE_CHAIN TREE_INT_CST_LOW TREE_PURPOSE TREE_VALUE TYPE_OUTPUT_ADDRESS TYPE_VALUES next_address symfile symout_strings_skip tree type }
symout_finish		symout.c	/^symout_finish (filename, filetime)/ ;" function 92 { compile_file }	{ MAXNAMLEN alloca blockvec blockvector fatal_io_error filter_undefined_types language next_address permanent_fwd_refs pfatal_with_name sourcevector symbol_root symfile symfile_name symout_sources symout_strings symout_types total_blocks total_types typevec typevector }
symout_function		symout.c	/^symout_function (stmt, args, superblock_address)/ ;" function 35 { rest_of_compilation symout_function }	{ STMT_BODY STMT_ELSE STMT_SUBBLOCKS STMT_THEN STMT_TYPE_TAGS STMT_VARS TREE_CHAIN TREE_CODE TREE_USED stmt symout_block symout_function }
symout_function_end		symout.c	/^symout_function_end ()/ ;" function 6 { rest_of_compilation }	{ filter_undefined_types symout_types temporary_fwd_refs }
symout_init		symout.c	/^symout_init (filename, asm_file, sourcename)/ ;" function 42 { compile_file }	{ N_SO asmfile blockvec fatal next_address permanent_fwd_refs pfatal_with_name symbol_root symfile symfile_name temporary_fwd_refs total_blocks total_types typevec }
symout_range_bounds		symout.c	/^symout_range_bounds (type)/ ;" function 17 { symout_types }	{ TREE_INT_CST_LOW TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_OUTPUT_ADDRESS symfile type }
symout_record_field_names		symout.c	/^symout_record_field_names (type)/ ;" function 11 { symout_types }	{ DECL_NAME IDENTIFIER_LENGTH IDENTIFIER_POINTER TREE_CHAIN TYPE_FIELDS symout_strings_print tree type }
symout_record_fields		symout.c	/^symout_record_fields (type)/ ;" function 24 { symout_types }	{ DECL_NAME DECL_OFFSET DECL_SIZE DECL_SIZE_UNIT IDENTIFIER_LENGTH TREE_CHAIN TREE_INT_CST_LOW TREE_PACKED TREE_TYPE TYPE_FIELDS TYPE_OUTPUT_ADDRESS next_address symfile symout_strings_skip tree type }
symout_source_file		symout.c	/^symout_source_file (f)/ ;" function 29 { symout_sources }	{ alloca asmfile line next_address source symfile symout_strings }
symout_sources		symout.c	/^symout_sources ()/ ;" function 28 { symout_finish }	{ alloca gdbfile gdbfiles next_address source sourcevector symfile symout_source_file }
symout_strings		symout.c	/^symout_strings (p1, s1, p2, s2)/ ;" function 9 { symout_block_symbols symout_block_tags symout_finish symout_source_file }	{ symout_strings_print symout_strings_skip }
symout_strings_print		symout.c	/^symout_strings_print (p1, s1, p2, s2)/ ;" function 26 { symout_enum_value_names symout_record_field_names symout_strings symout_types }	{ symfile }
symout_strings_skip		symout.c	/^symout_strings_skip (p1, s1, p2, s2)/ ;" function 19 { symout_enum_values symout_record_fields symout_strings symout_types }	{ next_address }
symout_time		toplev.c	/^int symout_time;/ ;" global 1 { compile_file rest_of_compilation rest_of_decl_compilation }	{ }
symout_top_blocks		symout.c	/^symout_top_blocks (decls, tags)/ ;" function 82 { compile_file }	{ TREE_CHAIN TREE_EXTERNAL TREE_PUBLIC alloca asmfile block blockvec blockvec_elt decl decls next_address symfile symout_block_symbols symout_block_tags total_blocks tree xmalloc }
symout_types		symout.c	/^symout_types (types)/ ;" function 265 { compile_file rest_of_compilation rest_of_decl_compilation symout_finish symout_function_end }	{ DECL_NAME IDENTIFIER_POINTER TREE_CHAIN TREE_CODE TREE_INT_CST_LOW TREE_PERMANENT TREE_TYPE TREE_UNSIGNED TYPE_DOMAIN TYPE_FIELDS TYPE_FLAG_UNSIGNED TYPE_MIN_VALUE TYPE_NAME TYPE_OUTPUT_ADDRESS TYPE_POINTER_TO TYPE_SIZE TYPE_SIZE_UNIT TYPE_SYMTAB_ADDRESS alloca integer_zerop list_length next_address perm_tree_cons permanent_fwd_refs subrange_p symfile symout_array_domain symout_enum_value_names symout_enum_values symout_range_bounds symout_record_field_names symout_record_fields symout_strings_print symout_strings_skip temporary_fwd_refs total_types tree tree_cons type typevec typevec_elt xmalloc }
synth_forward_declarations		objc-actions.c	/^void synth_forward_declarations()/ ;" function 30 { continue_class }	{ NULLT TREE_USED _OBJC_CLASS_decl _OBJC_METACLASS_decl __clsSuper_ref _clsSuper_ref build_component_ref build_tree_list define_decl get_identifier objc_class_template ridpointers synth_id_with_class_suffix tree tree_cons }
synth_id_with_class_suffix		objc-actions.c	/^static tree synth_id_with_class_suffix(char *pream/ ;" function 13 { forward_declare_categories generate_category generate_dispatch_table generate_ivars_list synth_forward_declarations }	{ IDENTIFIER_POINTER TREE_CODE get_identifier implementation_context utlbuf }
synth_module_prologue		objc-actions.c	/^static void synth_module_prologue()/ ;" function 198 { init_objc }	{ NULLT TAG_CLASS TAG_OBJECT TAG_SELECTOR TAG_SUPER TREE_USED _OBJC_SELECTOR_REFERENCES_decl _OBJC_SELECTOR_REFERENCES_id _msgSuper_decl _msgSuper_id _msg_decl _msg_id _selector_type build build_nt build_objc_selector_template build_tree_list class_type define_decl get_identifier get_parm_info groktypename id_type objc_getClass_decl objc_getClass_id objc_getMetaClass_decl objc_getMetaClass_id objc_object_id objc_object_reference parms poplevel push_parm_decl pushlevel ridpointers tree tree_cons unsigned_type_node xref_tag }
table		cse.c	/^static struct table_elt *table[NBUCKETS];/ ;" global 1 { all_sets_invariant_p cse_main insert invalidate invalidate_memory lookup lookup_for_remove new_basic_block remove remove_invalid_refs }	{ }
table_elt		cse.c	/^struct table_elt/ ;" struct 16 { cse_insn get_element insert invalidate invalidate_memory lookup lookup_as_function lookup_for_remove new_basic_block remove remove_invalid_refs use_related_value }	{ }
tail_recursion_args		stmt.c	/^tail_recursion_args (actuals, formals)/ ;" function 59 { expand_return }	{ DECL_MODE DECL_RTL GET_CODE GET_MODE TREE_CHAIN TREE_TYPE TREE_UNSIGNED TREE_VALUE alloca convert_move copy_to_reg emit_move_insn expand_expr reg_mentioned_p rtx tree }
tail_recursion_label		stmt.c	/^static rtx tail_recursion_label;/ ;" global 1 { expand_return init_function_start }	{ }
tail_recursion_reentry		stmt.c	/^static rtx tail_recursion_reentry;/ ;" global 1 { expand_function_start expand_return }	{ }
target_flags		toplev.c	/^int target_flags;/ ;" global 1 { Mtoplev OVERRIDE_OPTIONS set_target_switch }	{ }
target_for_arg		expr.c	/^target_for_arg (type, size, args_addr, offset)/ ;" function 25 { expand_call }	{ ARGS_SIZE_RTX GET_CODE INTVAL gen_rtx memory_address plus_constant rtx }
target_switches		toplev.c	/^struct {char *name; int value;} target_switches []/ ;" global 2 { print_target_switch_defaults set_target_switch }	{ }
temp_tree_cons		tree.c	/^temp_tree_cons (purpose, value, chain)/ ;" function 15 { expand_anon_union_decl expand_decl }	{ TREE_CHAIN TREE_PURPOSE TREE_VALUE current_obstack make_node temporary_obstack tree }
temporary_allocation		tree.c	/^temporary_allocation ()/ ;" function 7 { output_inline_function start_decl start_function }	{ current_obstack expression_obstack maybepermanent_obstack momentary_stack rtl_obstack saveable_obstack temporary_obstack }
temporary_firstobj		tree.c	/^char *temporary_firstobj;/ ;" global 1 { init_tree permanent_allocation }	{ }
temporary_fwd_refs		symout.c	/^static tree temporary_fwd_refs;/ ;" global 1 { symout_function_end symout_init symout_types }	{ }
temporary_obstack		tree.c	/^struct obstack temporary_obstack;/ ;" global 1 { Mtoplev allocation_temporary_p get_obstack_code init_tree permanent_allocation resume_temporary_allocation temp_tree_cons temporary_allocation }	{ }
temporary_type_chain		stor-layout.c	/^tree temporary_type_chain;/ ;" global 1 { chain_type get_temporary_types }	{ }
temporary_type_end		stor-layout.c	/^tree temporary_type_end;/ ;" global 1 { chain_type get_temporary_types }	{ }
tension_vector_labels		jump.c	/^tension_vector_labels (x, idx, ignore_loops)/ ;" function 22 { jump_optimize }	{ LABEL_NUSES XEXP XVECEXP XVECLEN delete_insn follow_jumps rtx }
text_section		varasm.c	/^text_section ()/ ;" function 8 { FORCE_TEXT assemble_function assemble_variable end_final final_start_function force_const_mem get_or_assign_label sdbout_one_type }	{ asm_out_file in_section }
this_contour_has_cleanups_p		stmt.c	/^this_contour_has_cleanups_p ()/ ;" function 4 { }	{ block block_stack }
this_function		stmt.c	/^static tree this_function;/ ;" global 1 { expand_return init_function_start }	{ }
this_insn		cse.c	/^static rtx this_insn;/ ;" global 1 { block_alloc cse_insn find_dummy_reload find_reloads find_reloads_address_1 insert push_reload reg_is_set }	{ }
this_insn_number		local-alloc.c	/^static int this_insn_number;/ ;" global 1 { block_alloc reg_is_set wipe_dead_reg }	{ }
this_is_asm_operands		final.c	/^static rtx this_is_asm_operands;/ ;" global 1 { final_scan_insn final_start_function output_asm_insn output_operand_lossage }	{ }
tmpbuf		objc-actions.c	/^static char tmpbuf[256];/ ;" global 1 { adornDecl genDeclarator }	{ }
token_buffer		objc-parse.y	/^static char *token_buffer;	\/* Pointer to token buf/ ;" global 1 { extend_token_buffer init_lex yyerror yylex }	{ }
total_attempts		combine.c	/^static int total_attempts, total_merges, total_ext/ ;" global 1 { combine_instructions dump_combine_total_stats }	{ }
total_blocks		symout.c	/^static int total_blocks;/ ;" global 1 { symout_block symout_finish symout_init symout_top_blocks }	{ }
total_distrib_attempts		combine.c	/^static int total_distrib_attempts, total_distrib_m/ ;" global 1 { dump_combine_total_stats }	{ }
total_distrib_merges_1		combine.c	/^static int total_distrib_attempts, total_distrib_m/ ;" global 1 { dump_combine_total_stats }	{ }
total_distrib_merges_2		combine.c	/^static int total_distrib_attempts, total_distrib_m/ ;" global 1 { dump_combine_total_stats }	{ }
total_distrib_successes		combine.c	/^static int total_distrib_attempts, total_distrib_m/ ;" global 1 { dump_combine_total_stats }	{ }
total_extras		combine.c	/^static int total_attempts, total_merges, total_ext/ ;" global 1 { combine_instructions dump_combine_total_stats }	{ }
total_merges		combine.c	/^static int total_attempts, total_merges, total_ext/ ;" global 1 { combine_instructions dump_combine_total_stats }	{ }
total_successes		combine.c	/^static int total_attempts, total_merges, total_ext/ ;" global 1 { combine_instructions dump_combine_total_stats }	{ }
total_types		symout.c	/^static int total_types;/ ;" global 1 { symout_finish symout_init symout_types }	{ }
tree		tree.h	/^typedef union tree_node *tree;/ ;" typedef 1 { NULLT NULL_TREE add_class_method add_class_reference add_instance_method add_instance_variable add_objc_string add_selector_reference build_category_initializer build_category_template build_class_template build_dispatch_table_initializer build_ivar_chain build_ivar_list_initializer build_ivar_list_template build_ivar_template build_keyword_decl build_keyword_selector build_message_expr build_message_selector_pool build_method_decl build_method_list_template build_method_template build_module_descriptor build_msg_pool_reference build_objc_selector_template build_objc_symtab_template build_private_template build_selector_expr build_selector_translation_table build_shared_structure_initializer build_super_template check_duplicates check_ivars combine_strings define_decl forward_declare_categories generate_category generate_dispatch_table generate_dispatch_tables generate_forward_declaration_to_string_table generate_ivar_lists generate_ivars_list generate_objc_symtab_decl generate_shared_structures getArgTypeList get_class_reference init_def_list init_module_descriptor init_objc_symtab init_selector is_public lookup_class_method_static lookup_instance_method_static lookup_interface lookup_method my_build_string objc_check_decl objc_comptypes objc_copy_list (etc) }	{ }
tree_bind_stmt		tree.h	/^struct tree_bind_stmt/ ;" struct 9 { }	{ }
tree_case_stmt		tree.h	/^struct tree_case_stmt/ ;" struct 8 { }	{ }
tree_code		tree.h	/^enum tree_code {/ ;" struct 6 { TREE_CODE adornDecl build build_binary_op_nodefault build_component_ref build_conditional_expr build_nt build_unary_op c_alignof c_expand_start_case c_sizeof c_sizeof_nowarn commontype compare_constant_1 const_hash convert convert_for_assignment convert_to_integer convert_to_pointer convert_to_real copy_node default_conversion digest_init do_jump do_store_flag dump encode_aggregate encode_type expand_builtin expand_decl_init expand_expr fold genDeclarator grokdeclarator is_public layout_decl lvalue_p output_constant parmlist_tags_warning pointer_diff pointer_int_sum record_constant_1 shadow_tag shorten_compare simple_cst_equal split_tree stabilize_reference staticp truthvalue_conversion }	{ }
tree_code_length		tree.c	/^int tree_code_length[] = {/ ;" global 3 { build build_nt copy_node dump fold make_node preexpand_calls set_identifier_size }	{ }
tree_code_name		print-tree.c	/^char *tree_code_name[] = {/ ;" global 3 { Mtoplev dump }	{ }
tree_code_type		tree.c	/^char *tree_code_type[] = {/ ;" global 3 { copy_node dump fold make_node preexpand_calls }	{ }
tree_common		tree.h	/^struct tree_common/ ;" struct 34 { copy_node duplicate_decls make_node }	{ }
tree_complex		tree.h	/^struct tree_complex/ ;" struct 9 { }	{ }
tree_cons		tree.c	/^tree_cons (purpose, value, chain)/ ;" function 9 { build_category_initializer build_dispatch_table_initializer build_ivar_list_initializer build_message_selector_pool build_method_template build_method_type build_module_descriptor build_objc_selector_template build_objc_symtab_template build_selector_translation_table build_shared_structure_initializer commontype digest_init expand_call expand_end_stmt_expr expand_expr expand_fixup expand_start_bindings finish_class forward_declare_categories generate_category generate_dispatch_table generate_forward_declaration_to_string_table generate_ivars_list generate_objc_symtab_decl generate_shared_structures init_decl_processing init_def_list init_module_descriptor init_objc_symtab layout_record lookup_label process_init_constructor pushdecl reallyStartMethod save_noncopied_parts start_method_def store_parm_decls symout_types synth_forward_declarations synth_module_prologue variable_size }	{ TREE_CHAIN TREE_PURPOSE TREE_VALUE make_node tree }
tree_decl		tree.h	/^struct tree_decl/ ;" struct 30 { copy_node duplicate_decls make_node }	{ }
tree_exp		tree.h	/^struct tree_exp/ ;" struct 7 { copy_node make_node }	{ }
tree_identifier		tree.h	/^struct tree_identifier/ ;" struct 7 { }	{ }
tree_if_stmt		tree.h	/^struct tree_if_stmt/ ;" struct 8 { }	{ }
tree_int_cst		tree.h	/^struct tree_int_cst/ ;" struct 7 { }	{ }
tree_int_cst_equal		tree.c	/^tree_int_cst_equal (t1, t2)/ ;" function 14 { array_type_nelts balance_case_nodes check_for_full_enumeration_handling convert_units emit_case_nodes expand_end_case group_case_nodes node_has_high_bound node_has_low_bound pushcase_range type_hash_lookup }	{ TREE_CODE TREE_INT_CST_HIGH TREE_INT_CST_LOW }
tree_int_cst_lt		tree.c	/^tree_int_cst_lt (t1, t2)/ ;" function 10 { check_for_full_enumeration_handling expand_end_case finish_decl fold node_has_high_bound node_has_low_bound pushcase pushcase_range }	{ INT_CST_LT INT_CST_LT_UNSIGNED TREE_TYPE TREE_UNSIGNED }
tree_last		tree.c	/^tree_last (chain)/ ;" function 9 { assign_parms function_cannot_inline_p grokdeclarator }	{ TREE_CHAIN tree }
tree_list		tree.h	/^struct tree_list/ ;" struct 7 { }	{ }
tree_node		tree.h	/^union tree_node/ ;" struct 24 { }	{ }
tree_node_count		tree.c	/^unsigned int tree_node_count[NUM_TREE_CODES][4];/ ;" global 1 { Mtoplev copy_node make_node }	{ }
tree_node_counter		tree.c	/^int tree_node_counter = 0;/ ;" global 1 { Mtoplev copy_node dump_tree init_tree make_node }	{ }
tree_node_size		tree.c	/^unsigned int tree_node_size[NUM_TREE_CODES][4];/ ;" global 1 { Mtoplev copy_node make_node }	{ }
tree_real_cst		tree.h	/^struct tree_real_cst/ ;" struct 8 { copy_node make_node }	{ }
tree_stmt		tree.h	/^struct tree_stmt/ ;" struct 8 { }	{ }
tree_string		tree.h	/^struct tree_string/ ;" struct 9 { }	{ }
tree_type		tree.h	/^struct tree_type/ ;" struct 26 { copy_node make_node }	{ }
true_regnum		jump.c	/^true_regnum (x)/ ;" function 17 { constraint_accepts_reg_p decompose jump_optimize true_regnum }	{ GET_CODE REGNO SUBREG_REG SUBREG_WORD reg_renumber true_regnum }
truthvalue_conversion		c-typeck.c	/^truthvalue_conversion (expr)/ ;" function 53 { build_binary_op_nodefault build_conditional_expr build_unary_op truthvalue_conversion }	{ DECL_SIZE DECL_SIZE_UNIT TREE_CODE TREE_INT_CST_LOW TREE_OPERAND TREE_TYPE TREE_UNSIGNED TYPE_PRECISION build build_binary_op_nodefault build_unary_op default_conversion expr integer_zero_node integer_zerop tree_code truthvalue_conversion }
try_combine		combine.c	/^try_combine (i3, i2, i1)/ ;" function 402 { combine_instructions }	{ GET_CODE GET_MODE HOST_BITS_PER_INT INSN_CODE INSN_CUID LOG_LINKS NEXT_INSN NOTE_INSN_DELETED NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PREV_INSN PUT_CODE REGNO REG_NOTES REG_NOTE_KIND SET_DEST SET_SRC SUBREG_REG XEXP XVEC XVECEXP XVECLEN add_incs add_links adjacent_insns_p basic_block_live_at_start cc0_rtx check_asm_operands combine_attempts combine_extras combine_merges combine_successes copy_substitutions dead_or_set_p find_reg_note flag_combine_regs gen_rtx last_call_cuid max_reg_num move_deaths n_occurrences next_insn_tests_no_inequality oballoc reg_mentioned_p reg_n_refs reg_n_sets reg_used_between_p remove_death rtvec rtvec_alloc rtx sets_cc0_p simplify_set_cc0_and stack_pointer_rtx subst subst_insn undo_all undobuf use_crosses_set_p (etc) }
try_distrib		combine.c	/^try_distrib (insn, xprev1, xprev2)/ ;" function 246 { combine_instructions }	{ GET_CODE GET_MODE HOST_BITS_PER_INT INSN_CODE INSN_CUID INTVAL NOTE_INSN_DELETED NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PUT_CODE REGNO SET_DEST SET_SRC SUBREG_REG SUBREG_WORD XEXP add_links adjacent_insns_p basic_block_live_at_start distrib_attempts distrib_merges_1 distrib_merges_2 distrib_successes gen_rtx move_deaths_2 n_occurrences reg_mentioned_p reg_n_refs reg_n_sets remove_death remove_links rtx rtx_code subst subst_insn undo_all undobuf }
try_fold_cc0		integrate.c	/^try_fold_cc0 (insn)/ ;" function 72 { expand_inline_function }	{ CONSTANT_P GET_CODE GET_RTX_LENGTH NEXT_INSN PATTERN PREV_INSN SET_DEST SET_SRC XEXP cc0_rtx copy_rtx_and_substitute emit_jump fold_out_const_cc0 label_map pc_rtx rtx }
try_pre_increment		flow.c	/^try_pre_increment (insn, reg, amount)/ ;" function 72 { try_pre_increment_1 }	{ GET_CODE GET_MODE GET_MODE_SIZE PATTERN REG_NOTES XEXP find_use_as_address gen_rtx rtx }
try_pre_increment_1		flow.c	/^try_pre_increment_1 (insn)/ ;" function 31 { propagate_block }	{ BLOCK_NUM GET_CODE INTVAL NOTE_INSN_DELETED NOTE_LINE_NUMBER NOTE_SOURCE_FILE PATTERN PUT_CODE REGNO SET_DEST SET_SRC XEXP loop_depth reg_n_refs reg_n_sets reg_next_use rtx try_pre_increment }
tst_optab		optabs.c	/^optab tst_optab;/ ;" global 1 { emit_cmp_insn init_optabs }	{ }
type		symseg.h	/^struct type/ ;" struct 63 { TREE_TYPE TYPED_OBJECT TYPE_ALIGN TYPE_ARG_TYPES TYPE_BASETYPES TYPE_DOMAIN TYPE_FIELDS TYPE_LANG_SPECIFIC TYPE_MAIN_VARIANT TYPE_MAX_VALUE TYPE_METHOD_BASETYPE TYPE_MIN_VALUE TYPE_MODE TYPE_NAME TYPE_NEXT_VARIANT TYPE_NONCOPIED_PARTS TYPE_OFFSET_BASETYPE TYPE_PARSE_INFO TYPE_POINTER_TO TYPE_PRECISION TYPE_REFERENCE_TO TYPE_SEP TYPE_SEP_UNIT TYPE_SIZE TYPE_SIZE_UNIT TYPE_SYMTAB_ADDRESS TYPE_VALUES actualparameterlist array_type_nelts build_binary_op_nodefault build_c_cast build_decl build_encode_expr build_method_type build_offset_type build_real build_real_from_int_cst build_type_variant builtin_function c_alignof c_expand_asm_operands c_expand_start_case c_sizeof c_sizeof_nowarn check_duplicates complete_array_type compparms1 convert convert_for_assignment convert_to_integer convert_to_pointer convert_to_real datatype digest_init duplicate_decls encode_aggregate encode_array encode_pointer encode_type finish_decl (etc) }	{ }
type_class		typeclass.h	/^enum type_class/ ;" struct 13 { }	{ }
type_code		symseg.h	/^enum type_code/ ;" struct 17 { }	{ }
type_for_size		c-typeck.c	/^type_for_size (bits, unsignedp)/ ;" function 22 { commontype comptypes convert_to_integer convert_to_pointer expand_call expand_end_case expand_expr expand_mult_add get_narrower get_unwidened pointer_diff pointer_int_sum }	{ TYPE_PRECISION integer_type_node long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node short_integer_type_node short_unsigned_type_node signed_char_type_node unsigned_char_type_node unsigned_type_node }
type_hash		tree.c	/^struct type_hash/ ;" struct 7 { type_hash_add type_hash_lookup }	{ }
type_hash_add		tree.c	/^type_hash_add (hashcode, type)/ ;" function 12 { type_hash_canon }	{ oballoc type type_hash type_hash_table }
type_hash_canon		tree.c	/^type_hash_canon (hashcode, type)/ ;" function 24 { build_array_type build_function_type build_index_type build_method_type build_offset_type }	{ TREE_PERMANENT current_obstack debug_no_type_hash permanent_obstack saveable_obstack tree type type_hash_add type_hash_lookup }
type_hash_list		tree.c	/^type_hash_list (list)/ ;" function 9 { build_function_type }	{ TREE_CHAIN TREE_VALUE TYPE_HASH tree }
type_hash_lookup		tree.c	/^type_hash_lookup (hashcode, type)/ ;" function 22 { type_hash_canon }	{ TREE_CODE TREE_TYPE TYPE_DOMAIN TYPE_MAX_VALUE TYPE_MIN_VALUE tree_int_cst_equal type type_hash type_hash_table type_list_equal }
type_hash_table		tree.c	/^struct type_hash *type_hash_table[TYPE_HASH_SIZE];/ ;" global 1 { type_hash_add type_hash_lookup }	{ }
type_list_equal		tree.c	/^type_list_equal (l1, l2)/ ;" function 15 { type_hash_lookup }	{ TREE_CHAIN TREE_PURPOSE TREE_VALUE simple_cst_equal tree }
type_precision		tree.c	/^type_precision (type)/ ;" function 8 { convert_to_pointer }	{ TREE_CODE TYPE_PRECISION type }
type_quals		objc-parse.y	/^type_quals:/ ;" yacctoken 1 { make_pointer_declarator }	{ }
typed_declspecs		objc-parse.y	/^typed_declspecs:/ ;" yacctoken 1 { }	{ }
typed_typespecs		objc-parse.y	/^typed_typespecs:/ ;" yacctoken 1 { }	{ }
typename		objc-parse.y	/^typename:/ ;" yacctoken 1 { groktypename }	{ }
typespec		objc-parse.y	/^typespec: TYPESPEC/ ;" yacctoken 1 { }	{ }
typespecqual_reserved		objc-parse.y	/^typespecqual_reserved: TYPESPEC/ ;" yacctoken 1 { }	{ }
typestatus		dbxout.c	/^enum typestatus {TYPE_UNSEEN, TYPE_XREF, TYPE_DEFI/ ;" struct 1 { dbxout_init dbxout_type }	{ }
typevec		symout.c	/^static struct typevec_elt *typevec;/ ;" global 1 { dbxout_init dbxout_symbol dbxout_type symout_finish symout_init symout_types }	{ }
typevec_elt		symout.c	/^struct typevec_elt/ ;" struct 6 { symout_types }	{ }
typevec_len		dbxout.c	/^static int typevec_len;/ ;" global 1 { dbxout_init dbxout_type }	{ }
typevector		symseg.h	/^struct typevector/ ;" struct 6 { symout_finish }	{ }
ucmp_optab		optabs.c	/^optab ucmp_optab;  \/* Used only for libcalls for u/ ;" global 1 { emit_cmp_insn init_optabs }	{ }
udiv_optab		optabs.c	/^optab udiv_optab;/ ;" global 1 { expand_divmod init_optabs }	{ }
udivmod_optab		optabs.c	/^optab udivmod_optab;/ ;" global 1 { expand_divmod init_optabs }	{ }
uid_block_number		flow.c	/^static short *uid_block_number;/ ;" global 1 { BLOCK_NUM flow_analysis }	{ }
uid_cuid		cse.c	/^static short *uid_cuid;/ ;" global 1 { CHEAPER INSN_CUID combine_instructions cse_end_of_basic_block cse_main make_regs_eqv }	{ }
uid_luid		loop.c	/^static short *uid_luid;/ ;" global 1 { INSN_LUID combine_movables loop_optimize move_movables record_giv scan_loop strength_reduce }	{ }
uid_suid		stupid.c	/^static int *uid_suid;/ ;" global 1 { INSN_SUID stupid_life_analysis }	{ }
uid_volatile		flow.c	/^static char *uid_volatile;/ ;" global 1 { INSN_VOLATILE flow_analysis }	{ }
umod_optab		optabs.c	/^optab umod_optab;/ ;" global 1 { expand_divmod init_optabs }	{ }
umul_optab		optabs.c	/^optab umul_optab;/ ;" global 1 { expand_binop init_optabs }	{ }
umul_widen_optab		optabs.c	/^optab umul_widen_optab;/ ;" global 1 { expand_binop expand_expr init_optabs }	{ }
unary_complex_lvalue		c-typeck.c	/^unary_complex_lvalue (code, arg)/ ;" function 24 { build_unary_op }	{ TREE_CODE TREE_OPERAND TREE_TYPE build build_conditional_expr build_unary_op pedantic tree }
unary_expr		objc-parse.y	/^unary_expr:/ ;" yacctoken 1 { }	{ }
unaryselector		objc-parse.y	/^unaryselector:/ ;" yacctoken 1 { }	{ }
undo		combine.c	/^struct undo/ ;" struct 7 { SUBST SUBST_INT copy_substitutions simplify_set_cc0_and undo_all }	{ }
undo_all		combine.c	/^undo_all ()/ ;" function 12 { try_combine try_distrib }	{ MAX_UNDO obfree undo undobuf }
undo_int		combine.c	/^struct undo_int/ ;" struct 7 { SUBST_INT }	{ }
undobuf		combine.c	/^static struct undobuf undobuf;/ ;" global 1 { SUBST SUBST_INT copy_substitutions simplify_and_const_int simplify_set_cc0_and subst try_combine try_distrib undo_all }	{ }
uninitialized_vars_warning		stmt.c	/^uninitialized_vars_warning (block)/ ;" function 29 { rest_of_compilation uninitialized_vars_warning }	{ DECL_RTL GET_CODE REGNO STMT_SUBBLOCKS STMT_VARS TREE_CHAIN TREE_CODE TREE_TYPE block decl regno_clobbered_at_setjmp regno_uninitialized tree uninitialized_vars_warning warning_with_decl }
unknown_address_altered		loop.c	/^static int unknown_address_altered;/ ;" global 1 { invariant_p note_addr_stored verify_loop }	{ }
unknown_aggregate_altered		loop.c	/^static int unknown_aggregate_altered;/ ;" global 1 { invariant_p note_addr_stored verify_loop }	{ }
unnamed_struct_number		sdbout.c	/^static int unnamed_struct_number = 0;/ ;" global 1 { gen_fake_label }	{ }
unop		objc-parse.y	/^unop:     '&'/ ;" yacctoken 1 { }	{ }
unshare_all_rtl		emit-rtl.c	/^unshare_all_rtl (insn)/ ;" function 19 { rest_of_compilation }	{ GET_CODE LOG_LINKS NEXT_INSN PATTERN REG_NOTES copy_rtx_if_shared rtx stack_slot_list }
unshare_copies		emit-rtl.c	/^static int unshare_copies = 0;	\/* Count rtx's that/ ;" global 1 { copy_rtx_if_shared }	{ }
unsigned_char_type_node		c-decl.c	/^tree unsigned_char_type_node;/ ;" global 1 { digest_init gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type type_for_size unsigned_type }	{ }
unsigned_type		c-typeck.c	/^unsigned_type (type)/ ;" function 15 { convert_to_integer shorten_compare }	{ char_type_node integer_type_node long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node short_integer_type_node short_unsigned_type_node signed_char_type_node type unsigned_char_type_node unsigned_type_node }
unsigned_type_node		c-decl.c	/^tree unsigned_type_node;/ ;" global 1 { default_conversion digest_init finish_struct gen_declspecs grokdeclarator init_decl_processing signed_or_unsigned_type signed_type synth_module_prologue type_for_size unsigned_type xref_tag yylex }	{ }
update_qty_class		local-alloc.c	/^update_qty_class (qty, reg)/ ;" function 8 { combine_regs }	{ qty_min_class reg_class_subset_p reg_preferred_class }
use_crosses_set_p		combine.c	/^use_crosses_set_p (x, from_cuid)/ ;" function 41 { try_combine use_crosses_set_p }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH INSN_CUID REGNO XEXP XVECEXP XVECLEN mem_last_set reg_last_set rtx_code use_crosses_set_p }
use_gdb_dbx_extensions		toplev.c	/^int use_gdb_dbx_extensions;/ ;" global 1 { Mtoplev OVERRIDE_OPTIONS dbxout_type }	{ }
use_regs		expr.c	/^use_regs (regno, nregs)/ ;" function 8 { expand_call }	{ emit_insn gen_rtx }
use_related_value		cse.c	/^use_related_value (x, elt)/ ;" function 57 { cse_insn }	{ GET_CODE GET_MODE NBUCKETS get_integer_term get_related_value lookup memory_address_p plus_constant rtx safe_hash table_elt }
use_variable		stmt.c	/^use_variable (rtl)/ ;" function 13 { expand_decl expand_end_bindings expand_function_end expand_function_start }	{ GET_CODE XEXP arg_pointer_rtx emit_insn frame_pointer_rtx gen_rtx }
use_variable_after		stmt.c	/^use_variable_after (rtl, insn)/ ;" function 13 { expand_function_end }	{ GET_CODE XEXP arg_pointer_rtx emit_insn_after frame_pointer_rtx gen_rtx }
utlbuf		objc-actions.c	/^static char *utlbuf;	\/* a buffer for general utili/ ;" global 1 { build_dispatch_table_initializer build_encode_expr build_ivar_list_initializer finish_class finish_objc init_objc synth_id_with_class_suffix }	{ }
validate_subtarget		expr.c	/^validate_subtarget (subtarget, otherop)/ ;" function 11 { expand_expr }	{ DECL_RTL TREE_CODE TREE_LITERAL }
value_identifier		c-decl.c	/^tree value_identifier;/ ;" global 1 { init_decl_processing start_function }	{ }
var_labelno		varasm.c	/^int var_labelno;/ ;" global 1 { make_decl_rtl }	{ }
varconst_time		toplev.c	/^int varconst_time;/ ;" global 1 { compile_file rest_of_decl_compilation }	{ }
variable_size		stor-layout.c	/^variable_size (size)/ ;" function 18 { layout_decl layout_type }	{ build_int error expand_expr global_bindings_p immediate_size_expand pending_sizes save_expr tree_cons }
verify_loop		loop.c	/^verify_loop (f, start)/ ;" function 102 { loop_optimize }	{ CONTAINING_INSN GET_CODE INSN_LUID INSN_UID LABEL_NEXTREF LABEL_REFS NEXT_INSN NOTE_INSN_LOOP_BEG NOTE_INSN_LOOP_CONT NOTE_INSN_LOOP_END NOTE_INSN_SETJMP NOTE_LINE_NUMBER PATTERN can_jump_into_range_p fixed_aggregate_altered loop_continue loop_has_call loop_store_addrs_idx loops_enclosed max_uid note_addr_stored note_stores num_mem_sets rtx unknown_address_altered unknown_aggregate_altered }
void_ftype_ptr_int_int		c-decl.c	/^tree void_ftype_ptr_ptr_int, int_ftype_ptr_ptr_int/ ;" global 1 { init_decl_processing }	{ }
void_ftype_ptr_ptr_int		c-decl.c	/^tree void_ftype_ptr_ptr_int, int_ftype_ptr_ptr_int/ ;" global 1 { init_decl_processing }	{ }
void_type_node		c-decl.c	/^tree void_type_node;/ ;" global 1 { actualparameterlist adornDecl assign_parms build_binary_op_nodefault build_conditional_expr build_function_call compparms1 convert_for_assignment dbxout_symbol duplicate_decls emit_library_call encode_method_decl expand_call expand_end_stmt_expr expand_return finish_function function_cannot_inline_p getArgTypeList get_parm_info grokdeclarator init_decl_processing layout_decl plain_type_1 require_complete_type start_function store_parm_decls warn_if_unused_value }	{ }
volatile_ok		recog.c	/^int volatile_ok;/ ;" global 1 { general_operand init_recog recog_memoized }	{ }
volatile_refs_p		rtlanal.c	/^volatile_refs_p (x)/ ;" function 55 { expand_end_stmt_expr final_scan_insn life_analysis try_combine volatile_refs_p }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH MEM_VOLATILE_P RTX_CODE XEXP XVECEXP XVECLEN volatile_refs_p }
walk		print-tree.c	/^walk (node, leaf, indent)/ ;" function 8 { cwalk dump }	{ NULL dump }
walk_alter_subreg		final.c	/^walk_alter_subreg (x)/ ;" function 21 { output_address walk_alter_subreg }	{ GET_CODE XEXP alter_subreg walk_alter_subreg }
walk_fixup_memory_subreg		stmt.c	/^walk_fixup_memory_subreg (x, insn)/ ;" function 33 { fixup_var_refs_insns walk_fixup_memory_subreg }	{ GET_CODE GET_RTX_FORMAT GET_RTX_LENGTH SUBREG_REG XEXP XVECEXP XVECLEN fixup_memory_subreg rtx_code walk_fixup_memory_subreg }
warn_about_return_type		c-decl.c	/^static int warn_about_return_type;/ ;" global 1 { grokdeclarator start_function }	{ }
warn_cast_qual		c-decl.c	/^int warn_cast_qual;/ ;" global 1 { build_c_cast lang_decode_option }	{ }
warn_id_clash		toplev.c	/^int warn_id_clash;/ ;" global 1 { Mtoplev get_identifier }	{ }
warn_if_unused_value		stmt.c	/^warn_if_unused_value (exp)/ ;" function 52 { expand_expr_stmt warn_if_unused_value }	{ TREE_CODE TREE_OPERAND TREE_TYPE emit_filename emit_lineno void_type_node warn_if_unused_value warning_with_file_and_line }
warn_implicit		c-decl.c	/^int warn_implicit;/ ;" global 1 { implicitly_declare lang_decode_option store_parm_decls }	{ }
warn_pointer_arith		c-decl.c	/^int warn_pointer_arith;/ ;" global 1 { c_sizeof lang_decode_option pointer_int_sum }	{ }
warn_return_type		c-decl.c	/^int warn_return_type;/ ;" global 1 { c_expand_return finish_function grokdeclarator lang_decode_option rest_of_compilation }	{ }
warn_selector		toplev.c	/^int warn_selector = 0;/ ;" global 1 { Mtoplev finish_objc }	{ }
warn_shadow		toplev.c	/^int warn_shadow;/ ;" global 1 { Mtoplev pushdecl }	{ }
warn_strict_prototypes		c-decl.c	/^int warn_strict_prototypes;/ ;" global 1 { grokparms lang_decode_option }	{ }
warn_switch		toplev.c	/^int warn_switch;/ ;" global 1 { Mtoplev expand_end_case lang_decode_option }	{ }
warn_unused		toplev.c	/^int warn_unused;/ ;" global 1 { Mtoplev compile_file expand_end_bindings expand_expr_stmt expand_function_end lang_decode_option poplevel }	{ }
warn_with_method		objc-actions.c	/^static void warn_with_method(char *message, char m/ ;" function 6 { check_duplicates finish_objc }	{ BUFSIZE errbuf genMethodDecl }
warn_write_strings		c-decl.c	/^int warn_write_strings;/ ;" global 1 { combine_strings lang_decode_option }	{ }
warning		toplev.c	/^warning (s, v, v2)/ ;" function 7 { Mtoplev OVERRIDE_OPTIONS build_array_ref build_binary_op_nodefault build_c_cast build_conditional_expr build_message_expr build_unary_op c_expand_return c_sizeof check_duplicates check_for_full_enumeration_handling check_methods combine compile_file convert_for_assignment digest_init finish_enum finish_function finish_struct fix_register float_signal fold_convert get_identifier grokdeclarator grokparms implicitly_declare init_reg_sets_1 is_public make_decl_rtl mark_addressable parmlist_tags_warning pointer_diff pointer_int_sum process_init_constructor pushdecl readescape readonly_warning shadow_tag shorten_compare start_class start_decl start_function store_init_value xref_tag yylex }	{ input_filename lineno warning_with_file_and_line }
warning_with_decl		toplev.c	/^warning_with_decl (decl, s, v)/ ;" function 22 { compile_file duplicate_decls expand_end_bindings expand_function_end finish_struct grokdeclarator poplevel pushdecl rest_of_compilation store_parm_decls uninitialized_vars_warning }	{ DECL_NAME DECL_PRINT_NAME DECL_SOURCE_FILE DECL_SOURCE_LINE IDENTIFIER_POINTER count_error decl report_error_function }
warning_with_file_and_line		toplev.c	/^warning_with_file_and_line (file, line, s, v, v2)/ ;" function 21 { expand_expr_stmt pushdecl warn_if_unused_value warning }	{ count_error line progname report_error_function }
warningcount		toplev.c	/^int warningcount = 0;/ ;" global 1 { count_error }	{ }
which_alternative		recog.c	/^int which_alternative;/ ;" global 1 { constrain_operands }	{ }
wide_buffer		objc-parse.y	/^static unsigned short *wide_buffer;	\/* Pointer to / ;" global 1 { init_lex yylex }	{ }
wipe_dead_reg		local-alloc.c	/^wipe_dead_reg (reg, this_insn_number, death_insn_n/ ;" function 30 { block_alloc }	{ GET_MODE REGNO REG_SIZE alloc_qty mark_life post_mark_life qty_death reg_qty this_insn_number }
write_data		cse.c	/^struct write_data/ ;" struct 7 { cse_basic_block cse_insn note_mem_written }	{ }
write_symbols		toplev.c	/^enum debugger write_symbols = NO_DEBUG;/ ;" global 1 { Mtoplev OVERRIDE_OPTIONS assemble_function assemble_variable compile_file final final_end_function final_scan_insn final_start_function init_emit init_function_start output_source_line rest_of_compilation rest_of_decl_compilation }	{ }
wruid		print-tree.c	/^wruid (node)/ ;" function 10 { cpart dump part }	{ NULL TREE_UID outfile }
xdecls		objc-parse.y	/^xdecls:/ ;" yacctoken 1 { }	{ }
xexpr		objc-parse.y	/^xexpr:/ ;" yacctoken 1 { }	{ }
xmalloc		toplev.c	/^xmalloc (size)/ ;" function 8 { check_newline compile_file dbxout_init do_pragma expand_start_bindings expand_start_case expand_start_case_dummy expand_start_cond expand_start_loop final_scan_insn init_final init_lex make_binding_level obstack_chunk_alloc read_rtx symout_block symout_top_blocks symout_types }	{ fatal }
xor_optab		optabs.c	/^optab xor_optab;/ ;" global 1 { expand_binop expand_expr init_optabs }	{ }
xrealloc		toplev.c	/^xrealloc (ptr, size)/ ;" function 9 { dbxout_type do_pragma extend_token_buffer final_scan_insn read_rtx yylex }	{ fatal }
xref_tag		c-decl.c	/^xref_tag (code, name)/ ;" function 34 { build_category_template build_class_template build_method_template build_module_descriptor build_objc_symtab_template build_selector_translation_table build_super_template continue_class generate_dispatch_tables generate_ivar_lists get_static_reference start_method_def synth_module_prologue }	{ TREE_UNSIGNED TYPE_ALIGN TYPE_MAX_VALUE TYPE_MIN_VALUE TYPE_MODE TYPE_PRECISION current_binding_level lookup_tag make_node pedantic pushtag tree unsigned_type_node warning }
xstmts		objc-parse.y	/^xstmts:/ ;" yacctoken 1 { }	{ }
yyerror		objc-parse.y	/^yyerror (string)/ ;" function 24 { }	{ end_of_file error string token_buffer }
yylex		objc-parse.y	/^yylex ()/ ;" function 821 { check_newline }	{ ENDFILE HOST_BITS_PER_INT REAL_VALUE_ATOF REAL_VALUE_TYPE TREE_CODE TREE_TYPE TREE_UNSIGNED TRUE TYPE_PRECISION build_int_2 build_real build_string char_array_type_node char_type_node combine doing_objc_thang dollars_in_ident double_type_node end_of_file error extend_token_buffer finput flag_no_asm flag_traditional float_type_node get_identifier int_array_type_node int_fits_type_p integer_type_node is_reserved_word isalnum isdigit lineno long_double_type_node long_integer_type_node long_long_integer_type_node long_long_unsigned_type_node long_unsigned_type_node lookup_interface lookup_name max_wide maxtoken nextchar pedantic readescape resword rid ridpointers short_unsigned_array_type_node short_unsigned_type_node skip_white_space token_buffer tree type unsigned_type_node warning wide_buffer xrealloc }
yyparse		objc-parse.y	/^%%/ ;" function 1 { compile_file }	{ }
zero_extend_optab		optabs.c	/^enum insn_code zero_extend_optab[MAX_MACHINE_MODE]/ ;" global 1 { gen_extend_insn init_extends }	{ }
