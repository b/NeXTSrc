head     1.1;
access   ;
symbols  ;
locks    mmeyer:1.1; strict;
comment  @ * @;


1.1
date     89.06.01.10.38.01;  author mmeyer;  state Exp;
branches ;
next     ;


desc
@Original version
.
@



1.1
log
@Initial revision
@
text
@/*
 *	zprint.c
 *
 *	utility for printing out zone structures
 */

/*
 * HISTORY
 *
 * 11-Feb-87  Mary Thompson (mrt) at Carnegie Mellon
 *	removed printf of zone.base_addr as that field no
 *	longer exists.
 *
 * 21-Nov-86  Avadis Tevanian (avie) at Carnegie-Mellon University
 *	Print out more information about each zone.
 *
 * 10-Oct-86  Avadis Tevanian (avie) at Carnegie-Mellon University
 *	Cleaned up software rot.
 *
 * 11-Apr-86  Jonathan J. Chew (jjc) at Carnegie-Mellon University
 *	Created.
 */

#include <nlist.h>
#include <stdio.h>
#include <sys/zalloc.h>

#define round_K(x)	(((x)+512)/1024)

extern char	*strcat();

#define KMEMFILE	"/dev/kmem"
#define NLISTFILE	"/mach"
#define NAMETBLSIZE 	3

char	*names[NAMETBLSIZE] = {
	"_zdata",
#define X_ZDATA		0
	"_zdata_size",
#define	X_ZDATA_SIZE	1
	""
};

vm_offset_t	zdata;
vm_size_t	zdata_size;

vm_size_t	total_size = 0;

initnlist(nl, names)
	struct nlist	nl[];
	char		*names[];
{
	int             i;

	for (i = 0; names[i] != 0 && strcmp(names[i], "") != 0; i++)
		nl[i].n_un.n_name = names[i];
}


getkvars(kmem, nl)
	struct nlist	nl[];
{

	lseek(kmem, (long) (nl[X_ZDATA].n_value), 0);
	if (read(kmem, (char *) &zdata, sizeof(zdata)) != sizeof(zdata)) {
		printf("getkvars:  can't read pointer to zone struct.s at 0x%x\n",
		       nl[X_ZDATA].n_value);
		return (1);
	}
	lseek(kmem, (long) (nl[X_ZDATA_SIZE].n_value), 0);
	if (read(kmem, (char *) &zdata_size, sizeof(zdata_size))
	    != sizeof(zdata_size)) {
		printf("getkvars:  can't read zone data size at 0x%x\n",
		       nl[X_ZDATA_SIZE].n_value);
		return (2);
	}
	return (0);
}

printzone(kmem, zoneptr)
	zone_t	zoneptr;
{
	char            name[80];
	int             retval;
	struct zone     zone;

	lseek(kmem, (long) zoneptr, 0);
	if (read(kmem, (char *) &zone, sizeof(zone)) != sizeof(zone)) {
		printf("printzone:  can't read zone at 0x%x\n", zoneptr);
		return (1);
	}
	if (zone.max_size == 0 && zone.alloc_size == 0)	/* empty? */
		return (2);
	lseek(kmem, (long) zone.zone_name, 0);
	retval = read(kmem, (char *) name, sizeof(name));
	if (retval != -1)
		name[79] = '\0';
	else {
		name[0] = '?';
		name[1] = '\0';
	}
	printf("%s zone at 0x%x:\n", name, zoneptr);
	printf("\tcur_size:    %dK bytes (%d elements)\n",
				round_K(zone.cur_size),
				zone.cur_size/zone.elem_size);
	printf("\tin use:      %dK bytes (%d elements)\n",
				round_K(zone.count*zone.elem_size),
				zone.count);
	printf("\tmax_size:    %dK bytes (%d elements)\n",
				round_K(zone.max_size),
				zone.max_size/zone.elem_size);
	printf("\telem_size:   %d bytes\n", zone.elem_size);
	printf("\talloc_size:  %dK bytes (%d elements)\n",
				round_K(zone.alloc_size),
				zone.alloc_size/zone.elem_size);
	if (zone.pageable)
		printf("\tPAGEABLE\n");
	total_size += zone.cur_size;
	return (0);
}

main(argc, argv)
	int	argc;
	char	*argv[];
{
	int             kmem;
	char           *kmemfile;
	struct nlist    nl[NAMETBLSIZE];
	char           *nlistfile;
	char           *s;
	char            underscore[80];
	char           *zonename;
	vm_offset_t     zoneptr;

	kmemfile = KMEMFILE;
	nlistfile = NLISTFILE;

	kmem = open(kmemfile, 0);	/* grab kernel memory */
	if (kmem < 0) {
		perror(kmemfile);
		exit(1);
	}
	initnlist(nl, names);	/* lookup kernel variables */
	nlist(nlistfile, nl);
	if (getkvars(kmem, nl) != 0)
		exit(2);

	if (argc == 1) {	/* no arguments -  print all zones */
		zoneptr = (vm_offset_t) zdata;
		while (zoneptr < zdata + zdata_size) {
			printzone(kmem, zoneptr);
			zoneptr = zoneptr + sizeof(struct zone);
		}
		printf("Total size in all zones = %dK.\n",
		       round_K(total_size));
	}
	while (--argc > 0) {
		zonename = 0;
		zoneptr = 0;

		/* parse command line */

		if ((*++argv)[0] == '-') {
			s = argv[0] + 1;
			switch (*s) {
			case 'a':
				if (*++s)
					sscanf(s, "%x", &zoneptr);
				else if (--argc > 0)
					sscanf(*++argv, "%x", &zoneptr);
				break;
			case 'n':
				if (*++s)
					zonename = s;
				else if (--argc > 0)
					zonename = *++argv;
				break;
			default:
				printf("zprint:  illegal option %c\n", *s);
				exit(3);
				break;
			}
		} else if (((*argv)[0] >= 'a' && (*argv)[0] <= 'z') ||
			   ((*argv)[0] >= 'A' && (*argv)[0] <= 'Z')) {
			zonename = *argv;
			printf("Assuming zone name specified as %s\n", zonename);
		} else if (((*argv)[0] >= '0' && (*argv)[0] <= '9')) {
			sscanf(*argv, "%x", &zoneptr);
			printf("Assuming zone address specified as 0x%x\n", zoneptr);
		}
		if (zoneptr == 0 && zonename == 0) {
			printf("Usage:  zprint [-a<hex. address>] [-n<zone name>]\n");
			printf("If no arguments are given, all zones are printed out.\n");
			exit(4);
		}
		if (zoneptr)
			printzone(kmem, zoneptr);
		else if (zonename) {
			underscore[0] = '_';
			underscore[1] = '\0';
			names[0] = strcat(underscore, zonename);
			names[1] = "";
			initnlist(nl, names);
			nlist(nlistfile, nl);
			zoneptr = 0;
			lseek(kmem, (long) (nl[0].n_value), 0);
			if (read(kmem, (char *) &zoneptr, sizeof(zoneptr))
			    != sizeof(zoneptr))
				printf("zprint:  can't read %s at 0x%x\n", zonename,
				       nl[0].n_value);
			else if (zoneptr) {
				printzone(kmem, zoneptr);
			}
		}
		printf("\n");
	}
}
@
