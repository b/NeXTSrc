head     1.2;
access   ;
symbols  ;
locks    osdev:1.2; strict;
comment  @ * @;


1.2
date     89.05.30.19.17.23;  author osdev;  state Exp;
branches ;
next     1.1;

1.1
date     89.05.30.19.17.04;  author osdev;  state Exp;
branches ;
next     ;


desc
@original version
@


1.2
log
@New version from Brad Taylor 5/30/89
@
text
@useni()
{
	static int useit = -1;

	if (useit == -1){
		useit = _lu_running();
	}
	return (useit);
}

int
ni_bplookup(
	    char *client,
	    char ***values
	    )
{
	return (bootparams_getbyname(client, values));
}

@


1.1
log
@Initial revision
@
text
@a0 220
/*
 * Copyright (C) 1989 by NeXT, Inc.
 *
 * NetInfo bootparams lookup routines. These should really be centralized
 * the with other lookup stuff inside of libc.
 */
#include <stdio.h>
#include <ctype.h>
#include <netinfo/ni.h>
#include <sys/socket.h>
#include "clib.h"
#include "mm.h"

#define MAX_INT_SIZE (3*sizeof(int) + 1) /* portable, though liberal */

#define UNINIT ((void *)(-1))

static const ni_name NAME_NAME = "name";
static const ni_name NAME_BOOTPARAMS = "bootparams";
static const ni_name NAME_MACHINES = "machines";

typedef struct ni_global_state_node {
	ni_id root_id;
	void *ni;
} ni_global_state_node;

typedef struct ni_global_state {
	ni_index len;
	ni_global_state_node *val;
} ni_global_state;

static struct ni_global_state nichain = { NI_INDEX_NULL, UNINIT };

typedef struct ni_local_state_node {
	ni_id dir;
	ni_idlist children;
	ni_index which;
} ni_local_state_node;

typedef struct ni_local_state {
	ni_index which;
	ni_index len;
	ni_local_state_node *val;
} ni_local_state;

static int
root_init(
	  void
	  )
{
	void *local_ni;
	ni_id root_id;
	ni_index i;

	if (nichain.val != UNINIT) {
		return (nichain.val != NULL);
	}
	
	local_ni = ni_new(NULL, ".");
	if (local_ni == NULL) {
		return (0);
	}
	if (ni_root(local_ni, &root_id) != NI_OK) {
		ni_free(local_ni);
		nichain.val = NULL;
		return (0);
	}
	if (nichain.val != UNINIT) {
		for (i = 0; i < nichain.len; i++) {
			ni_free(nichain.val[i].ni);
		}
		MM_FREE(nichain.val);
	}
	MM_ALLOC(nichain.val);
	nichain.val[0].ni = local_ni;
	nichain.val[0].root_id = root_id;
	nichain.len = 1;
	return (1);
}

static int
do_init(
	const ni_name name,
	ni_local_state *state
	)
{
	ni_idlist match;
	int i;

	if (!root_init()) {
		return (0);
	}
	if (state->val != NULL) {
		return (1);
	}
	if (ni_lookup(nichain.val[0].ni, &nichain.val[0].root_id, 
		      NAME_NAME, name, &match) != NI_OK) {
		return (0);
	}
	state->len = 1;
	state->which = 0;
	MM_ALLOC(state->val);
	state->val[0].dir.nii_object = match.niil_val[0];
	state->val[0].which = NI_INDEX_NULL;
	ni_idlist_free(&match);
	return (1);
}

	
static void
do_set(
       ni_local_state *state
       )
{
	ni_index i;

	for (i = 0; i < state->len; i++) {
		if (state->val[i].which != NI_INDEX_NULL) {
			ni_idlist_free(&state->val[i].children);
			state->val[i].which = NI_INDEX_NULL;
		}
	}
	state->which = 0;
}

static int
do_more(
	ni_name name,
	ni_local_state *state,
	ni_index which
	)
{
	void *ni;
	ni_idlist match;
	ni_id root;
	ni_index i;

	if (nichain.len <= which + 1) {
		/*
		 * Need to grow it
		 */
		ni = ni_new(nichain.val[nichain.len - 1].ni, "..");
		if (ni == NULL) {
			return (0);
		}
		if (ni_root(ni, &root) != NI_OK) {
			ni_free(ni);
			return (0);
		}
		MM_GROW_ARRAY(nichain.val, nichain.len);
		nichain.val[nichain.len].ni = ni;
		nichain.val[nichain.len].root_id = root;
		nichain.len++;
	} else {
		ni = nichain.val[which + 1].ni;
		root = nichain.val[which + 1].root_id;
	}
	if (which + 1 >= state->len) {
		if (ni_lookup(ni, &root, NAME_NAME, name, &match) != NI_OK) {
			return (0);
		}
		MM_GROW_ARRAY(state->val, state->len);
		state->val[state->len].dir.nii_object = match.niil_val[0];
		state->val[state->len].which = NI_INDEX_NULL;
		ni_idlist_free(&match);
		state->len++;
	}
	if (state->val[which + 1].which != NI_INDEX_NULL) {
		state->val[which + 1].which = NI_INDEX_NULL;
		ni_idlist_free(&state->val[which + 1].children);
	}
	return (1);
}
	
static void *
do_get(
       ni_name name,
       ni_local_state *state,
       ni_name prop_name,
       ni_name prop_val,
       void *(*readit)(),
       void *arg
       )
{
	ni_idlist match;
	void *res;
	ni_id id;
	ni_status status;
	ni_index i;
	void *ni;

	if (state->val[0].which == NI_INDEX_NULL) {
		do_set(state);
	}
	for (i = 0; i < state->len; i++) {
		ni = nichain.val[i].ni;
		id = state->val[i].dir;
		status = ni_lookup(ni, &id, prop_name, prop_val, &match);
		if (status != NI_OK && status != NI_NODIR) {
			return (NULL);
		}
		if (status == NI_OK) {
			res = (*readit)(ni, &match, arg);
			ni_idlist_free(&match);
			if (res != NULL) {
				return (res);
			}
		}
		if (!do_more(name, state, i)) {
			return (NULL);
		}
	}
	return (NULL);
}

#define bp_init() do_init(NAME_MACHINES, &bp_state)

static ni_local_state bp_state = { NI_INDEX_NULL };
static void *bp_read(void *, ni_idlist *, void *);

d6 1
a6 1
		useit = bp_init();
d10 1
d14 1
a14 1
	    ni_namelist *nl
d17 1
a17 6
	if (do_get(NAME_MACHINES, &bp_state, NAME_NAME,
		   client, bp_read, nl) != NULL) {
		return (1);
	} else {
		return (0);
	}
a19 26
static void *
bp_read(
	void *ni,
	ni_idlist *match,
	void *arg
	)
{
	ni_proplist pl;
	ni_index i;
	ni_id id;

	id.nii_object = match->niil_val[0];
	if (ni_read(ni, &id, &pl) != NI_OK) {
		return (NULL);
	}
	for (i = 0; i < pl.nipl_len; i++) {
		if (ni_name_match(pl.nipl_val[i].nip_name, NAME_BOOTPARAMS)) {
			(*((ni_namelist *)arg) =
			 ni_namelist_dup(pl.nipl_val[i].nip_val));
			ni_proplist_free(&pl);
			return (arg);
		}
	}
	ni_proplist_free(&pl);
	return (NULL);
}
@
