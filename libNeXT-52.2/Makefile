#
# NeXT Makefile to build the meta-shlib libNeXT
#

# Where host shared library gets installed
LIBDIR = /usr/lib

# Where target shared library gets installed
SHLIBDIR = /usr/shlib

# Where release notes get installed
DOCDIR = /usr/local/doc/libNeXT_proj

# The major version of this shared library
SHLIBVERS = C

# This uses the strip -S option
SHLIBIFLAGS = -sSd debug_objects_list

# file generated by vers_string
VERSFILE = vers

# defines passed on to subprojects during development
DEVELOP_CFLAGS = -DDEBUG -DAKDEBUG -I/Net/m5/as/appkit/dps

# Symbolic links to the directories which contain the projects that make up
# this meta-shlib
PROJDIRS = libappkit libdpsclient libsoundkit

MKSHLIBORDERDETAILFLAGS = \
	-sectorder __TEXT __text text_order		\
	-sectorder_detail

MKSHLIBORDERFLAGS = \
	-sectorder __TEXT __text text_order

MKSHLIBFLAGS = \
	-minor_version `pwd | sed -e 's/.*-//'`		\
	-segprot __APPKIT_PANELS rwx r			\
	-seglinkedit					\
	-segprot __LINKEDIT rwx r			\
	-segaddr __LINKEDIT 60d6000			\
	-segcreate __APPKIT_PANELS PageLayout libappkit/PageLayout.nib \
	-segcreate __APPKIT_PANELS PrintPanel libappkit/PrintPanel.nib \
	-segcreate __APPKIT_PANELS SavePanel libappkit/SavePanel.nib \
	-segcreate __APPKIT_PANELS AlertPanel libappkit/AlertPanel.nib \
	-segcreate __APPKIT_PANELS FontPanel libappkit/FontPanel.nib \
	-segcreate __APPKIT_PANELS ChoosePrinter libappkit/ChoosePrinter.nib \
	-segcreate __APPKIT_PANELS ColorPicker libappkit/ColorPicker.nib \
	-segcreate __APPKIT_PANELS ColorPickerAlert libappkit/ColorPickerAlert.nib \
	-segcreate __APPKIT_PANELS ColorCustomAlert libappkit/ColorCustomAlert.nib \
	-segcreate __APPKIT_PANELS NXFaxPanel libappkit/NXFaxPanel.nib \
	-segcreate __APPKIT_PANELS SpellChecker libappkit/SpellChecker.nib


HFILES = shlib.h
CFILES = pointers.c
SFILES = alias.s defaultsstubs.s
OTHER_SRCS = Makefile spec_NeXT notes debug_objects_list	\
	makeDefaultTextOrder.sed libNeXT.user_bom		\
	scattered_text_order fixed_text_order init_text_order	\
	libNeXT_s.C.shlib-1.0

SRCS = $(CFILES) $(SFILES) $(HFILES) $(OTHER_SRCS)
OFILES = $(CFILES:.c=.o) $(SFILES:.s=.o) $(VERSFILE).o

# at the top so that its the default
develop_all: ak fast_shlib

all: current_links shlib_ofiles shlib compare_shlib profile_ofiles profile

install: DSTROOT force_version $(DSTROOT)$(LIBDIR) $(DSTROOT)$(SHLIBDIR) \
	 all bom_install
	install -m 444 libNeXT_s.a $(DSTROOT)$(LIBDIR)/libNeXT_s.a
	install $(SHLIBIFLAGS) -m 555 libNeXT_s.$(SHLIBVERS).shlib	\
		$(DSTROOT)$(SHLIBDIR)/libNeXT_s.$(SHLIBVERS).shlib 
	install -m 444 libNeXT_p.a $(DSTROOT)$(LIBDIR)/libNeXT_p.a
	mkdirs $(DSTROOT)/usr/local/shlib
	ln -s ../src/libNeXT/libNeXT_s.$(SHLIBVERS).shlib		\
		$(DSTROOT)/usr/local/shlib/libNeXT_s.$(SHLIBVERS).shlib

shlib_install:$(DSTROOT)$(SHLIBDIR)
	install -m 555 libNeXT_s.$(SHLIBVERS).shlib	\
		$(DSTROOT)$(SHLIBDIR)/libNeXT_s.$(SHLIBVERS).shlib 


shlib: $(OFILES) text_order
	@echo running scatter-loaded, objcopted mkshlib...;		\
	mkshlib $(MKSHLIBFLAGS) $(MKSHLIBORDERDETAILFLAGS) -s spec_NeXT	\
		-t libNeXT_s.$(SHLIBVERS).shlib -h libNeXT_s.a;		\
	echo mkshlib done.
	ranlib libNeXT_s.a
	objcopt libNeXT_s.$(SHLIBVERS).shlib

opt_shlib: $(OFILES) text_order
	@echo running scatter-loaded, objcopted fast mkshlib...;	\
	mkshlib -f $(MKSHLIBFLAGS) $(MKSHLIBORDERDETAILFLAGS)		\
		-s spec_NeXT -t libNeXT_s.$(SHLIBVERS).shlib		\
		-h libNeXT_s.a;						\
	echo mkshlib done.
	objcopt libNeXT_s.$(SHLIBVERS).shlib

opt_slow_shlib: $(OFILES)
	@echo running non-ordered, objcopted slow mkshlib...;		\
	mkshlib $(MKSHLIBFLAGS) -s spec_NeXT				\
		-t libNeXT_s.$(SHLIBVERS).shlib -h libNeXT_s.a;		\
	echo mkshlib done.
	ranlib libNeXT_s.a
	objcopt libNeXT_s.$(SHLIBVERS).shlib

fast_shlib: $(OFILES)
	@echo running non-ordered fast mkshlib...;			\
	mkshlib -f $(MKSHLIBFLAGS) -s spec_NeXT				\
		-t libNeXT_s.$(SHLIBVERS).shlib -h libNeXT_s.a;		\
	echo mkshlib done.

profile: $(VERSFILE).o
	rm -f libNeXT_p.a
	for i in `echo ${PROJDIRS}`;					\
	  do								\
		ar cq libNeXT_p.a $$i/profile_obj/*.o;			\
	  done
	ar cq libNeXT_p.a $(VERSFILE).o
	ranlib libNeXT_p.a

compare_shlib:
	-cmpshlib -s spec_NeXT libNeXT_s.$(SHLIBVERS).shlib libNeXT_s.C.shlib-1.0

#
# All building of ofiles goes through this target recursively
#
any_ofiles:
	@SHLIBIDIR=`pwd`;						\
	MINOR_VERS=`pwd | sed -e 's/.*-//'`;				\
	for i in `echo ${PROJDIRS}`;					\
	    do \
		echo ================= making $(OFILES_FLAVOR) for $$i =================; \
		(cd $$i; ${MAKE} $(OFILES_FLAVOR)			\
				SHLIBIDIR="$$SHLIBIDIR"			\
				EXTERNAL_CFLAGS="$(EXTERNAL_CFLAGS)"	\
				MINOR_VERS="$$MINOR_VERS");		\
	    done

#
# These are user target for building various project's ofiles various ways
#

shlib_ofiles:
	@${MAKE} any_ofiles OFILES_FLAVOR=shlib_ofiles PROJDIRS="$(PROJDIRS)"

profile_ofiles: 
	@${MAKE} any_ofiles OFILES_FLAVOR=profile_ofiles PROJDIRS="$(PROJDIRS)"

debug_profile_ofiles: 
	@${MAKE} any_ofiles OFILES_FLAVOR=profile_ofiles EXTERNAL_CFLAGS="-g $(DEVELOP_CFLAGS)" PROJDIRS="$(PROJDIRS)"

shlib_profile_ofiles: 
	@${MAKE} any_ofiles OFILES_FLAVOR=shlib_ofiles EXTERNAL_CFLAGS="-pg -g" PROJDIRS="$(PROJDIRS)"

ak:
	@${MAKE} any_ofiles OFILES_FLAVOR=shlib_ofiles EXTERNAL_CFLAGS="$(DEVELOP_CFLAGS)" PROJDIRS=libappkit

dps:
	@${MAKE} any_ofiles OFILES_FLAVOR=shlib_ofiles EXTERNAL_CFLAGS="$(DEVELOP_CFLAGS)" PROJDIRS=libdpsclient

sk:
	@${MAKE} any_ofiles OFILES_FLAVOR=shlib_ofiles EXTERNAL_CFLAGS="$(DEVELOP_CFLAGS)" PROJDIRS=libsoundkit


#
# other utility targets
#

clean:
	rm -f libNeXT_p.a* libNeXT_s.a* libNeXT_s.*.shlib libNeXT_s.*.shlib.*
	rm -f $(OFILES) $(VERSFILE).c
	rm -rf mkshlib_hd*
	rm -rf text_order

installsrc:
	mkdirs $(SRCROOT)
	tar cf - $(SRCS) | (cd $(SRCROOT); tar xf -)

installdoc: $(DSTROOT) $(DSTROOT)$(DOCROOT)
	install -m 444 notes $(DSTROOT)$(DOCROOT)

bom_install:
	if [ -f libNeXT.user_bom ]; \
	then \
	    mkdirs ${DSTROOT}/usr/local/BOMs ; \
	    install -m 444 libNeXT.user_bom ${DSTROOT}/usr/local/BOMs ; \
	fi

current_links:
	if [ -f PROJECT_FROZEN ]; then exit 1; fi
	rm -f libappkit libdpsclient libsoundkit
	ln -s ../`ls -l ../appkit | awk '{print $$10}'` libappkit
	ln -s ../`ls -l ../dpsclient | awk '{print $$10}'` libdpsclient
	ln -s ../`ls -l ../soundkit | awk '{print $$10}'` libsoundkit

# rules to make version files
$(VERSFILE).c:
	vers_string -l libNeXT > $@

force_version::
	-/bin/rm -f $(VERSFILE).c

SRCROOT DSTROOT:
	@if [ -n "${$@}" ]; \
	then \
		exit 0; \
	else \
		echo Must define $@; \
		exit 1; \
	fi

$(DSTROOT)$(LIBDIR) $(DSTROOT)$(SHLIBDIR) $(DSTROOT)$(DOCDIR):
	mkdirs $@

# rules to deal with scattered-loading order files
# The programmer has to create the scatter_text_order file, which contains
# everything from default_text_order, but in some intelligent order

text_order: fixed_text_order scattered_text_order
	rm -f text_order
	cat fixed_text_order scattered_text_order > text_order

default_text_order: $(OFILES)
	rm -f default_text_order
	echo alias.o > .textOrderObjects
	echo defaultsstubs.o >> .textOrderObjects
	sed -f makeDefaultTextOrder.sed < spec_NeXT >> .textOrderObjects
	echo vers.o >> .textOrderObjects
	nm -nljos __TEXT __text `cat .textOrderObjects` > default_text_order
	rm .textOrderObjects

