
#
#  NeXT common include file for Internal Makefiles
#  Copyright 1987, NeXT, Inc.
#
#  This Makefile is included to gain the rules and definitions shared by
#  the library and application makefiles.
#

# let make know about specsheet files
.SUFFIXES: .spec .aux

# command to build shared libraries
MKSHLIB = mkshlib

# command to use for printing source
PRINT = list

# flags used in all installs
IFLAGS = -q -c

# file generated by vers_string
VERSFILE = $(NAME)_vers

# all the object files, including a file with a version stamp
OFILES = $(MFILES:.m=.o) $(CFILES:.c=.o) $(PSWFILES:.psw=.o)	\
	$(PSWMFILES:.pswm=.o) $(SFILES:.s=.o) $(LFILES:.l=.o)	\
	$(LMFILES:.lm=.o) $(YFILES:.y=.o) $(YMFILES:.ym=.o)	\
	$(OTHER_SRCS_OFILES) $(VERSFILE).o

# source files derived in the build process
DFILES = $(MFILES:.m=.d) $(CFILES:.c=.d) $(SFILES:.s=.d) \
	$(PSWFILES:.psw=.d) $(PSWMFILES:.pswm=.d) \
	$(YMFILES:.ym=.d) $(LMFILES:.lm=.d) $(YFILES:.y=.d) $(LFILES:.l=.d)

# source files derived in the build process
DERIVED_SRC = $(PSWFILES:.psw=.c) $(PSWMFILES:.pswm=.m) \
	$(YMFILES:.ym=.m) $(LMFILES:.lm=.m) $(YFILES:.y=.c) $(LFILES:.l=.c)

# files that will be removed on make clean, along with .o's
COMMON_GARBAGE = $(BY_PRODUCTS) TAGS tags $(VERSFILE).c $(DERIVED_SRC) \
		Makefile.depends .depend_done core .make.out*

# does an install to a local root
local: LCLROOT
	$(MAKE) install "DSTROOT = $(LCLROOT)"

# all source code
SRCS = $(MFILES) $(CFILES) $(PSWFILES) $(PSWMFILES) $(SFILES) \
	$(LFILES) $(LMFILES) $(YFILES) $(YMFILES) $(HFILES) \
	$(PSFILES) $(OTHER_SRCS)

# all non-derived, non-garbage files.  This is the source, plus Makefiles,
# plus anything else that needs to be around for the products to be made.
INSTALL_FILES = $(SRCS) Makefile Makefile.depends

# these really want to share a common root
INSTALL_ROOT = /usr
# places where various products get installed to
BINDIR = $(DSTROOT)/NextApps
LIBDIR = $(DSTROOT)/usr/lib
SHLIBDIR = $(DSTROOT)/usr/shlib
INCDIR = $(DSTROOT)/usr/include/$(NAME)
PSLIBDIR = $(DSTROOT)/usr/lib/NextStep
SPECDIR = $(DSTROOT)/NeXTLibrary/Documentation/NeXT/SysRefNotes/SpecSheets
AUXDIR = $(DSTROOT)/usr/lib/spec
SRCROOT = $(DSTROOT)/src/$(NAME)

# removes all derived files
clean::
	-/bin/rm -f $(OFILES) $(COMMON_GARBAGE) $(SPECIFIC_GARBAGE) $(PRODUCT)
	-/bin/rm -rf $(DIRECTORY_GARBAGE)
	touch Makefile.depends

#  The tags target creates an index on the source files' functions.
tags:: $(MFILES) $(CFILES) $(PSWFILES) $(PSWMFILES) $(LFILES) \
		$(LMFILES) $(YFILES) $(YMFILES) $(HFILES)
	ctags $(MFILES) $(CFILES) $(PSWFILES) $(PSWMFILES) $(LFILES) \
		$(LMFILES) $(YFILES) $(YMFILES) $(HFILES)

#  prints out all source files
print:: $(SRCS)
	$(PRINT) $(SRCS)

# lints all source files (oh, what to do about .m's?? )
lint:: $(CFILES)
	lint -I$(INCDIR) $(CFILES) $(LINTLIBS) -lc

# shows line count of source
wc: $(SRCS)
	wc $(SRCS)

# diffs the current sources with the installed sources
diff::
	for f in $(SRCS);				\
	    do (echo $$f;				\
	    csh -f -c "diff -c $(SRCROOT)/$$f $$f; exit 0")	\
	done

# rules to make version files
$(VERSFILE).c:
	vers_string $(VERSFLAGS) $(PRODUCT) > $@

force_version::
	-/bin/rm -f $(VERSFILE).c

#  The depend target scans the source files for includes and generates
#  the right dependencies to reflect those inter-file dependencies.
#$(PRODUCT): .depend_done

depend .depend_done:
	if (test "$(DERIVED_SRC)" != " ")			\
	    then $(MAKE) $(DERIVED_SRC);			\
	fi
	-/bin/rm -f Makefile.depends
	-touch Makefile.depends
	$(CC) -MD -E $(CFLAGS) $(MFILES) $(CFILES) $(SFILES) $(DERIVED_SRC) \
		> /dev/null
	@md -m Makefile.depends -d $(DFILES)
	-touch .depend_done

.m.spec:
	-speculate $(SPECFLAGS) $*.m

clean_wraps::
	-rm -rf $(PSWFILES:.psw=.c) $(PSWMFILES:.pswm=.m)
	-if [ -d shlib_obj ];						\
	then								\
		cd shlib_obj; 						\
		rm -rf $(PSWFILES:.psw=.o) $(PSWMFILES:.pswm=.o);	\
	fi
	-if [ -d debug_obj ];						\
	then								\
		cd debug_obj; 						\
		rm -rf $(PSWFILES:.psw=.o) $(PSWMFILES:.pswm=.o);	\
	fi
	-if [ -d obj ];							\
	then								\
		cd obj; 						\
		rm -rf $(PSWFILES:.psw=.o) $(PSWMFILES:.pswm=.o);	\
	fi
	-if [ -d profile_obj ];						\
	then								\
		cd profile_obj; 					\
		rm -rf $(PSWFILES:.psw=.o) $(PSWMFILES:.pswm=.o);	\
	fi
	-rm -rf $(PSWFILES:.psw=.o) $(PSWMFILES:.pswm=.o);

